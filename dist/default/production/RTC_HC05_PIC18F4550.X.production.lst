

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Jun 27 19:37:53 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           	psect	smallconst
    62  000800                     __psmallconst:
    63                           	opt stack 0
    64  000800  00                 	db	0
    65  000801                     _dpowers:
    66                           	opt stack 0
    67  000801  0001               	dw	1
    68  000803  000A               	dw	10
    69  000805  0064               	dw	100
    70  000807  03E8               	dw	1000
    71  000809  2710               	dw	10000
    72  00080B                     __end_of_dpowers:
    73                           	opt stack 0
    74  0000                     _INTCONbits	set	4082
    75  0000                     _PIE1bits	set	3997
    76  0000                     _PIR1bits	set	3998
    77  0000                     _PORTBbits	set	3969
    78  0000                     _PORTDbits	set	3971
    79  0000                     _RCREG	set	4014
    80  0000                     _SPBRG	set	4015
    81  0000                     _SSPADD	set	4040
    82  0000                     _SSPBUF	set	4041
    83  0000                     _SSPCON1	set	4038
    84  0000                     _SSPCON2	set	4037
    85  0000                     _SSPSTAT	set	4039
    86  0000                     _TRISBbits	set	3987
    87  0000                     _TRISD	set	3989
    88  0000                     _TXREG	set	4013
    89  0000                     _ACKDT	set	32301
    90  0000                     _ACKEN	set	32300
    91  0000                     _BF	set	32312
    92  0000                     _BRGH	set	32098
    93  0000                     _CREN	set	32092
    94  0000                     _PEIE	set	32662
    95  0000                     _PEN	set	32298
    96  0000                     _RCEN	set	32299
    97  0000                     _RCIE	set	31981
    98  0000                     _RCIF	set	31989
    99  0000                     _RSEN	set	32297
   100  0000                     _SEN	set	32296
   101  0000                     _SPEN	set	32095
   102  0000                     _SYNC	set	32100
   103  0000                     _TRISB0	set	31896
   104  0000                     _TRISB1	set	31897
   105  0000                     _TRISC6	set	31910
   106  0000                     _TRISC7	set	31911
   107  0000                     _TRMT	set	32097
   108  0000                     _TXEN	set	32101
   109  00080B                     STR_5:
   110  00080B  20                 	db	32
   111  00080C  57                 	db	87	;'W'
   112  00080D  45                 	db	69	;'E'
   113  00080E  4C                 	db	76	;'L'
   114  00080F  43                 	db	67	;'C'
   115  000810  4F                 	db	79	;'O'
   116  000811  4D                 	db	77	;'M'
   117  000812  45                 	db	69	;'E'
   118  000813  20                 	db	32
   119  000814  54                 	db	84	;'T'
   120  000815  4F                 	db	79	;'O'
   121  000816  20                 	db	32
   122  000817  52                 	db	82	;'R'
   123  000818  54                 	db	84	;'T'
   124  000819  43                 	db	67	;'C'
   125  00081A  21                 	db	33
   126  00081B  00                 	db	0
   127  00081C                     STR_1:
   128  00081C  53                 	db	83	;'S'
   129  00081D  65                 	db	101	;'e'
   130  00081E  74                 	db	116	;'t'
   131  00081F  74                 	db	116	;'t'
   132  000820  69                 	db	105	;'i'
   133  000821  6E                 	db	110	;'n'
   134  000822  67                 	db	103	;'g'
   135  000823  20                 	db	32
   136  000824  43                 	db	67	;'C'
   137  000825  6C                 	db	108	;'l'
   138  000826  6F                 	db	111	;'o'
   139  000827  63                 	db	99	;'c'
   140  000828  6B                 	db	107	;'k'
   141  000829  2E                 	db	46
   142  00082A  2E                 	db	46
   143  00082B  2E                 	db	46
   144  00082C  00                 	db	0
   145  00082D                     STR_2:
   146  00082D  52                 	db	82	;'R'
   147  00082E  65                 	db	101	;'e'
   148  00082F  63                 	db	99	;'c'
   149  000830  65                 	db	101	;'e'
   150  000831  69                 	db	105	;'i'
   151  000832  76                 	db	118	;'v'
   152  000833  65                 	db	101	;'e'
   153  000834  64                 	db	100	;'d'
   154  000835  20                 	db	32
   155  000836  53                 	db	83	;'S'
   156  000837  74                 	db	116	;'t'
   157  000838  72                 	db	114	;'r'
   158  000839  69                 	db	105	;'i'
   159  00083A  6E                 	db	110	;'n'
   160  00083B  67                 	db	103	;'g'
   161  00083C  3A                 	db	58	;':'
   162  00083D  00                 	db	0
   163  00083E                     STR_10:
   164  00083E  20                 	db	32
   165  00083F  20                 	db	32
   166  000840  43                 	db	67	;'C'
   167  000841  4F                 	db	79	;'O'
   168  000842  4D                 	db	77	;'M'
   169  000843  50                 	db	80	;'P'
   170  000844  4C                 	db	76	;'L'
   171  000845  45                 	db	69	;'E'
   172  000846  54                 	db	84	;'T'
   173  000847  45                 	db	69	;'E'
   174  000848  44                 	db	68	;'D'
   175  000849  20                 	db	32
   176  00084A  21                 	db	33
   177  00084B  21                 	db	33
   178  00084C  21                 	db	33
   179  00084D  00                 	db	0
   180  00084E                     STR_12:
   181  00084E  57                 	db	87	;'W'
   182  00084F  61                 	db	97	;'a'
   183  000850  69                 	db	105	;'i'
   184  000851  74                 	db	116	;'t'
   185  000852  69                 	db	105	;'i'
   186  000853  6E                 	db	110	;'n'
   187  000854  67                 	db	103	;'g'
   188  000855  20                 	db	32
   189  000856  64                 	db	100	;'d'
   190  000857  61                 	db	97	;'a'
   191  000858  74                 	db	116	;'t'
   192  000859  61                 	db	97	;'a'
   193  00085A  2E                 	db	46
   194  00085B  2E                 	db	46
   195  00085C  2E                 	db	46
   196  00085D  00                 	db	0
   197  00085E                     STR_6:
   198  00085E  20                 	db	32
   199  00085F  20                 	db	32
   200  000860  48                 	db	72	;'H'
   201  000861  43                 	db	67	;'C'
   202  000862  30                 	db	48	;'0'
   203  000863  35                 	db	53	;'5'
   204  000864  20                 	db	32
   205  000865  2D                 	db	45
   206  000866  20                 	db	32
   207  000867  44                 	db	68	;'D'
   208  000868  53                 	db	83	;'S'
   209  000869  31                 	db	49	;'1'
   210  00086A  33                 	db	51	;'3'
   211  00086B  30                 	db	48	;'0'
   212  00086C  37                 	db	55	;'7'
   213  00086D  00                 	db	0
   214  00086E                     STR_11:
   215  00086E  20                 	db	32
   216  00086F  20                 	db	32
   217  000870  53                 	db	83	;'S'
   218  000871  59                 	db	89	;'Y'
   219  000872  53                 	db	83	;'S'
   220  000873  54                 	db	84	;'T'
   221  000874  45                 	db	69	;'E'
   222  000875  4D                 	db	77	;'M'
   223  000876  20                 	db	32
   224  000877  52                 	db	82	;'R'
   225  000878  45                 	db	69	;'E'
   226  000879  41                 	db	65	;'A'
   227  00087A  44                 	db	68	;'D'
   228  00087B  59                 	db	89	;'Y'
   229  00087C  00                 	db	0
   230  00087D                     STR_7:
   231  00087D  4C                 	db	76	;'L'
   232  00087E  4F                 	db	79	;'O'
   233  00087F  41                 	db	65	;'A'
   234  000880  44                 	db	68	;'D'
   235  000881  49                 	db	73	;'I'
   236  000882  4E                 	db	78	;'N'
   237  000883  47                 	db	71	;'G'
   238  000884  2E                 	db	46
   239  000885  2E                 	db	46
   240  000886  2E                 	db	46
   241  000887  00                 	db	0
   242  000888                     STR_4:
   243  000888  43                 	db	67	;'C'
   244  000889  4E                 	db	78	;'N'
   245  00088A  20                 	db	32
   246  00088B  00                 	db	0
   247  00088C                     STR_8:
   248  00088C  25                 	db	37
   249  00088D  75                 	db	117	;'u'
   250  00088E  00                 	db	0
   251  0000                     
   252                           ; #config settings
   253  00088F  00                 	db	0	; dummy byte at the end
   254  0000                     
   255                           	psect	cinit
   256  001936                     __pcinit:
   257                           	opt stack 0
   258  001936                     start_initialization:
   259                           	opt stack 0
   260  001936                     __initialization:
   261                           	opt stack 0
   262                           
   263                           ; Clear objects allocated to BANK0 (1 bytes)
   264  001936  0100               	movlb	0
   265  001938  6B7D               	clrf	__pbssBANK0& (0+255),b
   266                           
   267                           ; Clear objects allocated to COMRAM (18 bytes)
   268  00193A  EE00  F02E         	lfsr	0,__pbssCOMRAM
   269  00193E  0E12               	movlw	18
   270  001940                     clear_0:
   271  001940  6AEE               	clrf	postinc0,c
   272  001942  06E8               	decf	wreg,f,c
   273  001944  E1FD               	bnz	clear_0
   274  001946                     end_of_initialization:
   275                           	opt stack 0
   276  001946                     __end_of__initialization:
   277                           	opt stack 0
   278  001946  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   279  001948  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   280  00194A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   281  00194C  6EF8               	movwf	tblptru,c
   282  00194E  0100               	movlb	0
   283  001950  EFF9  F008         	goto	_main	;jump to C main() function
   284                           tblptru	equ	0xFF8
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           
   288                           	psect	bssCOMRAM
   289  00002E                     __pbssCOMRAM:
   290                           	opt stack 0
   291  00002E                     _i:
   292                           	opt stack 0
   293  00002E                     	ds	2
   294  000030                     _uartBuffer:
   295                           	opt stack 0
   296  000030                     	ds	16
   297                           tblptru	equ	0xFF8
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           
   301                           	psect	bssBANK0
   302  00007D                     __pbssBANK0:
   303                           	opt stack 0
   304  00007D                     _isSetClock:
   305                           	opt stack 0
   306  00007D                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           	psect	cstackBANK0
   312  000060                     __pcstackBANK0:
   313                           	opt stack 0
   314  000060                     ??_UART_Init:
   315  000060                     sprintf@flag:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x0
   319  000060                     	ds	1
   320  000061                     sprintf@ap:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x1
   324  000061                     	ds	2
   325  000063                     sprintf@val:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x3
   329  000063                     	ds	2
   330  000065                     sprintf@prec:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x5
   334  000065                     	ds	1
   335  000066                     sprintf@c:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x6
   339  000066                     	ds	1
   340  000067                     showLoadScreen@s:
   341                           	opt stack 0
   342                           
   343                           ; 10 bytes @ 0x7
   344  000067                     	ds	10
   345  000071                     showLoadScreen@k:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x11
   349  000071                     	ds	2
   350  000073                     showLoadScreen@j:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x13
   354  000073                     	ds	2
   355  000075                     main@RTC_data:
   356                           	opt stack 0
   357                           
   358                           ; 8 bytes @ 0x15
   359  000075                     	ds	8
   360                           tblptru	equ	0xFF8
   361                           postinc0	equ	0xFEE
   362                           wreg	equ	0xFE8
   363                           
   364                           	psect	cstackCOMRAM
   365  000001                     __pcstackCOMRAM:
   366                           	opt stack 0
   367  000001                     ??i2_LCD_Port:
   368  000001                     ??i2_I2CWait:
   369  000001                     bin2bcd@binary_value:
   370                           	opt stack 0
   371  000001                     clearBuffer@buffer:
   372                           	opt stack 0
   373  000001                     i2delay_ms@duration:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x0
   377  000001                     	ds	1
   378  000002                     bin2bcd@retval:
   379                           	opt stack 0
   380  000002                     i2LCD_Port@a:
   381                           	opt stack 0
   382  000002                     i2I2CSend@dat:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x1
   386  000002                     	ds	1
   387  000003                     ??i2_LCD_Cmd:
   388  000003                     ??i2_delay_ms:
   389  000003                     bin2bcd@temp:
   390                           	opt stack 0
   391  000003                     i2LCD_Write_Char@temp:
   392                           	opt stack 0
   393  000003                     clearBuffer@bufferSize:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x2
   397  000003                     	ds	1
   398  000004                     i2LCD_Cmd@cmd:
   399                           	opt stack 0
   400  000004                     i2LCD_Write_Char@y:
   401                           	opt stack 0
   402  000004                     ds1307_setData@iData:
   403                           	opt stack 0
   404  000004                     i2delay_ms@i:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x3
   408  000004                     	ds	1
   409  000005                     i2LCD_Set_Cursor@x:
   410                           	opt stack 0
   411  000005                     i2LCD_Write_Char@c:
   412                           	opt stack 0
   413  000005                     clearBuffer@i:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x4
   417  000005                     	ds	1
   418  000006                     i2LCD_Set_Cursor@y:
   419                           	opt stack 0
   420  000006                     ds1307_setData@j:
   421                           	opt stack 0
   422  000006                     i2LCD_Write_String@str:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x5
   426  000006                     	ds	1
   427  000007                     i2LCD_Set_Cursor@z:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x6
   431  000007                     	ds	1
   432  000008                     ??i2_LCD_Write_String:
   433  000008                     i2LCD_Set_Cursor@t:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x7
   437  000008                     	ds	1
   438  000009                     i2LCD_Set_Cursor@temp:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x8
   442  000009                     	ds	1
   443  00000A                     i2LCD_Write_String@i:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x9
   447  00000A                     	ds	2
   448  00000C                     ??_UART_ISR:
   449                           
   450                           ; 1 bytes @ 0xB
   451  00000C                     	ds	14
   452  00001A                     UART_ISR@c:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x19
   456  00001A                     	ds	1
   457  00001B                     ??_LCD_Port:
   458  00001B                     ??_I2CWait:
   459  00001B                     ??_bcd2bin:
   460  00001B                     ?___awdiv:
   461                           	opt stack 0
   462  00001B                     ?___awmod:
   463                           	opt stack 0
   464  00001B                     ?___lwdiv:
   465                           	opt stack 0
   466  00001B                     ?___lldiv:
   467                           	opt stack 0
   468  00001B                     delay_ms@duration:
   469                           	opt stack 0
   470  00001B                     ___awdiv@dividend:
   471                           	opt stack 0
   472  00001B                     ___awmod@dividend:
   473                           	opt stack 0
   474  00001B                     ___lwdiv@dividend:
   475                           	opt stack 0
   476  00001B                     ___lldiv@dividend:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x1A
   480  00001B                     	ds	1
   481  00001C                     LCD_Port@a:
   482                           	opt stack 0
   483  00001C                     I2CSend@dat:
   484                           	opt stack 0
   485  00001C                     bcd2bin@bcd_value:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x1B
   489  00001C                     	ds	1
   490  00001D                     ??_LCD_Cmd:
   491  00001D                     ??_delay_ms:
   492  00001D                     LCD_Write_Char@temp:
   493                           	opt stack 0
   494  00001D                     bcd2bin@temp:
   495                           	opt stack 0
   496  00001D                     ___awdiv@divisor:
   497                           	opt stack 0
   498  00001D                     ___awmod@divisor:
   499                           	opt stack 0
   500  00001D                     ___lwdiv@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1C
   504  00001D                     	ds	1
   505  00001E                     LCD_Cmd@cmd:
   506                           	opt stack 0
   507  00001E                     LCD_Write_Char@y:
   508                           	opt stack 0
   509  00001E                     ds1307_getData@buffer:
   510                           	opt stack 0
   511  00001E                     delay_ms@i:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x1D
   515  00001E                     	ds	1
   516  00001F                     ??_LCD_Init:
   517  00001F                     LCD_Set_Cursor@x:
   518                           	opt stack 0
   519  00001F                     LCD_Write_Char@c:
   520                           	opt stack 0
   521  00001F                     ___awdiv@counter:
   522                           	opt stack 0
   523  00001F                     ___awmod@counter:
   524                           	opt stack 0
   525  00001F                     ___lwdiv@counter:
   526                           	opt stack 0
   527  00001F                     ___lldiv@divisor:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x1E
   531  00001F                     	ds	1
   532  000020                     LCD_Set_Cursor@y:
   533                           	opt stack 0
   534  000020                     ___awdiv@sign:
   535                           	opt stack 0
   536  000020                     ___awmod@sign:
   537                           	opt stack 0
   538  000020                     LCD_Write_String@str:
   539                           	opt stack 0
   540  000020                     ds1307_getData@j:
   541                           	opt stack 0
   542  000020                     ___lwdiv@quotient:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x1F
   546  000020                     	ds	1
   547  000021                     LCD_Set_Cursor@z:
   548                           	opt stack 0
   549  000021                     ___awdiv@quotient:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x20
   553  000021                     	ds	1
   554  000022                     ??_LCD_Write_String:
   555  000022                     ?___lwmod:
   556                           	opt stack 0
   557  000022                     LCD_Set_Cursor@t:
   558                           	opt stack 0
   559  000022                     ___lwmod@dividend:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x21
   563  000022                     	ds	1
   564  000023                     LCD_Set_Cursor@temp:
   565                           	opt stack 0
   566  000023                     ___lldiv@quotient:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x22
   570  000023                     	ds	1
   571  000024                     LCD_Write_String@i:
   572                           	opt stack 0
   573  000024                     ___lwmod@divisor:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x23
   577  000024                     	ds	2
   578  000026                     ___lwmod@counter:
   579                           	opt stack 0
   580  000026                     showClock@RTC_data:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x25
   584  000026                     	ds	1
   585  000027                     ?_sprintf:
   586                           	opt stack 0
   587  000027                     ___lldiv@counter:
   588                           	opt stack 0
   589  000027                     sprintf@sp:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x26
   593  000027                     	ds	1
   594  000028                     ??_showClock:
   595  000028                     UART_Init@baudrate:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x27
   599  000028                     	ds	1
   600  000029                     sprintf@f:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x28
   604  000029                     	ds	3
   605  00002C                     UART_Init@x:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x2B
   609  00002C                     	ds	1
   610  00002D                     
   611                           ; 1 bytes @ 0x2C
   612  00002D                     	ds	1
   613  00002E                     tblptru	equ	0xFF8
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           
   617                           ; 1 bytes @ 0x2D
   618 ;;
   619 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   620 ;;
   621 ;; *************** function _main *****************
   622 ;; Defined at:
   623 ;;		line 247 in file "Main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  RTC_data        8   21[BANK0 ] unsigned char [8]
   628 ;; Return value:  Size  Location     Type
   629 ;;                  2  262[None  ] int 
   630 ;; Registers used:
   631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   637 ;;      Params:         0       0       0       0       0       0       0       0       0
   638 ;;      Locals:         0       8       0       0       0       0       0       0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0
   640 ;;      Totals:         0       8       0       0       0       0       0       0       0
   641 ;;Total ram usage:        8 bytes
   642 ;; Hardware stack levels required when called:    8
   643 ;; This function calls:
   644 ;;		_I2CInit
   645 ;;		_LCD_Clear
   646 ;;		_LCD_Init
   647 ;;		_LCD_Write_String
   648 ;;		_UART_Init
   649 ;;		_delay_ms
   650 ;;		_ds1307_getData
   651 ;;		_showClock
   652 ;;		_showLoadScreen
   653 ;; This function is called by:
   654 ;;		Startup code after reset
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           	psect	text0
   659  0011F2                     __ptext0:
   660                           	opt stack 0
   661  0011F2                     _main:
   662                           	opt stack 23
   663                           
   664                           ;Main.c: 249: TRISD = 0x00;
   665                           
   666                           ;incstack = 0
   667  0011F2  0E00               	movlw	0
   668  0011F4  6E95               	movwf	3989,c	;volatile
   669                           
   670                           ;Main.c: 250: TRISBbits.TRISB2 = 0;
   671  0011F6  9493               	bcf	3987,2,c	;volatile
   672                           
   673                           ;Main.c: 251: TRISBbits.TRISB3 = 0;
   674  0011F8  9693               	bcf	3987,3,c	;volatile
   675                           
   676                           ;Main.c: 252: TRISBbits.TRISB4 = 0;
   677  0011FA  9893               	bcf	3987,4,c	;volatile
   678                           
   679                           ;Main.c: 253: LCD_Init();
   680  0011FC  ECFB  F009         	call	_LCD_Init	;wreg free
   681                           
   682                           ;Main.c: 254: I2CInit();
   683  001200  ECC4  F00C         	call	_I2CInit	;wreg free
   684                           
   685                           ;Main.c: 255: UART_Init(38400);
   686  001204  0E00               	movlw	0
   687  001206  6E28               	movwf	UART_Init@baudrate,c
   688  001208  0E96               	movlw	150
   689  00120A  6E29               	movwf	UART_Init@baudrate+1,c
   690  00120C  0E00               	movlw	0
   691  00120E  6E2A               	movwf	UART_Init@baudrate+2,c
   692  001210  0E00               	movlw	0
   693  001212  6E2B               	movwf	UART_Init@baudrate+3,c
   694  001214  EC60  F007         	call	_UART_Init	;wreg free
   695                           
   696                           ;Main.c: 256: RCIF = 0x0;
   697  001218  9A9E               	bcf	3998,5,c	;volatile
   698                           
   699                           ;Main.c: 257: RCIE = 0x1;
   700  00121A  8A9D               	bsf	3997,5,c	;volatile
   701                           
   702                           ;Main.c: 258: PEIE = 0x1;
   703  00121C  8CF2               	bsf	intcon,6,c	;volatile
   704                           
   705                           ;Main.c: 259: INTCONbits.GIE = 0x1;
   706  00121E  8EF2               	bsf	intcon,7,c	;volatile
   707                           
   708                           ;Main.c: 260: PORTBbits.RB3 = 0;
   709  001220  9681               	bcf	3969,3,c	;volatile
   710                           
   711                           ;Main.c: 262: unsigned char RTC_data[8];
   712                           ;Main.c: 264: showLoadScreen();
   713  001222  EC7F  F005         	call	_showLoadScreen	;wreg free
   714  001226                     l3029:
   715                           
   716                           ;Main.c: 267: {
   717                           ;Main.c: 268: if(isSetClock == 1)
   718  001226  0100               	movlb	0	; () banked
   719  001228  057D               	decf	_isSetClock& (0+255),w,b
   720  00122A  A4D8               	btfss	status,2,c
   721  00122C  D013               	goto	l3037
   722                           
   723                           ; BSR set to: 0
   724                           ;Main.c: 269: {
   725                           ;Main.c: 270: delay_ms(900);
   726  00122E  0E03               	movlw	3
   727  001230  6E1C               	movwf	delay_ms@duration+1,c
   728  001232  0E84               	movlw	132
   729  001234  6E1B               	movwf	delay_ms@duration,c
   730  001236  EC17  F00C         	call	_delay_ms	;wreg free
   731                           
   732                           ;Main.c: 271: ds1307_getData(RTC_data);
   733  00123A  0E75               	movlw	low main@RTC_data
   734  00123C  6E1E               	movwf	ds1307_getData@buffer,c
   735  00123E  0E00               	movlw	high main@RTC_data
   736  001240  6E1F               	movwf	ds1307_getData@buffer+1,c
   737  001242  EC11  F00B         	call	_ds1307_getData	;wreg free
   738                           
   739                           ;Main.c: 272: showClock(RTC_data);
   740  001246  0E75               	movlw	low main@RTC_data
   741  001248  6E26               	movwf	showClock@RTC_data,c
   742  00124A  0E00               	movlw	high main@RTC_data
   743  00124C  6E27               	movwf	showClock@RTC_data+1,c
   744  00124E  EC48  F004         	call	_showClock	;wreg free
   745                           
   746                           ;Main.c: 273: }
   747  001252  D7E9               	goto	l3029
   748  001254                     l3037:
   749                           
   750                           ;Main.c: 274: else
   751                           ;Main.c: 275: {
   752                           ;Main.c: 276: LCD_Clear();
   753  001254  ECD4  F00C         	call	_LCD_Clear	;wreg free
   754                           
   755                           ;Main.c: 277: delay_ms(500);
   756  001258  0E01               	movlw	1
   757  00125A  6E1C               	movwf	delay_ms@duration+1,c
   758  00125C  0EF4               	movlw	244
   759  00125E  6E1B               	movwf	delay_ms@duration,c
   760  001260  EC17  F00C         	call	_delay_ms	;wreg free
   761                           
   762                           ;Main.c: 278: LCD_Write_String("Waiting data...");
   763  001264  0E4E               	movlw	low STR_12
   764  001266  6E20               	movwf	LCD_Write_String@str,c
   765  001268  0E08               	movlw	high STR_12
   766  00126A  6E21               	movwf	LCD_Write_String@str+1,c
   767  00126C  ECC2  F009         	call	_LCD_Write_String	;wreg free
   768                           
   769                           ;Main.c: 279: delay_ms(500);
   770  001270  0E01               	movlw	1
   771  001272  6E1C               	movwf	delay_ms@duration+1,c
   772  001274  0EF4               	movlw	244
   773  001276  6E1B               	movwf	delay_ms@duration,c
   774  001278  EC17  F00C         	call	_delay_ms	;wreg free
   775  00127C  D7D4               	goto	l3029
   776  00127E                     __end_of_main:
   777                           	opt stack 0
   778                           tblptru	equ	0xFF8
   779                           intcon	equ	0xFF2
   780                           postinc0	equ	0xFEE
   781                           wreg	equ	0xFE8
   782                           status	equ	0xFD8
   783                           
   784 ;; *************** function _showLoadScreen *****************
   785 ;; Defined at:
   786 ;;		line 195 in file "Main.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;		None
   789 ;; Auto vars:     Size  Location     Type
   790 ;;  s              10    7[BANK0 ] unsigned char [10]
   791 ;;  j               2   19[BANK0 ] int 
   792 ;;  k               2   17[BANK0 ] int 
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   802 ;;      Params:         0       0       0       0       0       0       0       0       0
   803 ;;      Locals:         0      14       0       0       0       0       0       0       0
   804 ;;      Temps:          0       0       0       0       0       0       0       0       0
   805 ;;      Totals:         0      14       0       0       0       0       0       0       0
   806 ;;Total ram usage:       14 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; Hardware stack levels required when called:    7
   809 ;; This function calls:
   810 ;;		_LCD_Clear
   811 ;;		_LCD_Set_Cursor
   812 ;;		_LCD_Write_Char
   813 ;;		_LCD_Write_String
   814 ;;		___awdiv
   815 ;;		___awmod
   816 ;;		_delay_ms
   817 ;;		_sprintf
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text1
   824  000AFE                     __ptext1:
   825                           	opt stack 0
   826  000AFE                     _showLoadScreen:
   827                           	opt stack 23
   828                           
   829                           ;Main.c: 197: char s[10];
   830                           ;Main.c: 198: int j;
   831                           ;Main.c: 200: LCD_Clear();
   832                           
   833                           ;incstack = 0
   834  000AFE  ECD4  F00C         	call	_LCD_Clear	;wreg free
   835                           
   836                           ;Main.c: 201: LCD_Set_Cursor(1,1);
   837  000B02  0E01               	movlw	1
   838  000B04  6E1F               	movwf	LCD_Set_Cursor@x,c
   839  000B06  0E01               	movlw	1
   840  000B08  EC6E  F00B         	call	_LCD_Set_Cursor
   841                           
   842                           ;Main.c: 202: LCD_Write_String(" WELCOME TO RTC!");
   843  000B0C  0E0B               	movlw	low STR_5
   844  000B0E  6E20               	movwf	LCD_Write_String@str,c
   845  000B10  0E08               	movlw	high STR_5
   846  000B12  6E21               	movwf	LCD_Write_String@str+1,c
   847  000B14  ECC2  F009         	call	_LCD_Write_String	;wreg free
   848                           
   849                           ;Main.c: 203: LCD_Set_Cursor(2,1);
   850  000B18  0E01               	movlw	1
   851  000B1A  6E1F               	movwf	LCD_Set_Cursor@x,c
   852  000B1C  0E02               	movlw	2
   853  000B1E  EC6E  F00B         	call	_LCD_Set_Cursor
   854                           
   855                           ;Main.c: 204: LCD_Write_String("  HC05 - DS1307");
   856  000B22  0E5E               	movlw	low STR_6
   857  000B24  6E20               	movwf	LCD_Write_String@str,c
   858  000B26  0E08               	movlw	high STR_6
   859  000B28  6E21               	movwf	LCD_Write_String@str+1,c
   860  000B2A  ECC2  F009         	call	_LCD_Write_String	;wreg free
   861                           
   862                           ;Main.c: 205: delay_ms(2000);
   863  000B2E  0E07               	movlw	7
   864  000B30  6E1C               	movwf	delay_ms@duration+1,c
   865  000B32  0ED0               	movlw	208
   866  000B34  6E1B               	movwf	delay_ms@duration,c
   867  000B36  EC17  F00C         	call	_delay_ms	;wreg free
   868                           
   869                           ;Main.c: 206: LCD_Clear();
   870  000B3A  ECD4  F00C         	call	_LCD_Clear	;wreg free
   871                           
   872                           ;Main.c: 208: LCD_Set_Cursor(2, 1);
   873  000B3E  0E01               	movlw	1
   874  000B40  6E1F               	movwf	LCD_Set_Cursor@x,c
   875  000B42  0E02               	movlw	2
   876  000B44  EC6E  F00B         	call	_LCD_Set_Cursor
   877                           
   878                           ;Main.c: 209: for (j = 0; j < 15; j++) {
   879  000B48  0E00               	movlw	0
   880  000B4A  0100               	movlb	0	; () banked
   881  000B4C  6F74               	movwf	(showLoadScreen@j+1)& (0+255),b
   882  000B4E  0E00               	movlw	0
   883  000B50  6F73               	movwf	showLoadScreen@j& (0+255),b
   884  000B52                     l2833:
   885                           
   886                           ; BSR set to: 0
   887  000B52  0100               	movlb	0	; () banked
   888  000B54  BF74               	btfsc	(showLoadScreen@j+1)& (0+255),7,b
   889  000B56  D008               	goto	l2837
   890  000B58  0100               	movlb	0	; () banked
   891  000B5A  5174               	movf	(showLoadScreen@j+1)& (0+255),w,b
   892  000B5C  E10C               	bnz	l2843
   893  000B5E  0E0F               	movlw	15
   894  000B60  0100               	movlb	0	; () banked
   895  000B62  5D73               	subwf	showLoadScreen@j& (0+255),w,b
   896  000B64  B0D8               	btfsc	status,0,c
   897  000B66  D007               	goto	l2843
   898  000B68                     l2837:
   899                           
   900                           ; BSR set to: 0
   901                           ;Main.c: 210: LCD_Write_Char(219);
   902  000B68  0EDB               	movlw	219
   903  000B6A  ECDF  F00B         	call	_LCD_Write_Char
   904  000B6E  0100               	movlb	0	; () banked
   905  000B70  4B73               	infsnz	showLoadScreen@j& (0+255),f,b
   906  000B72  2B74               	incf	(showLoadScreen@j+1)& (0+255),f,b
   907  000B74  D7EE               	goto	l2833
   908  000B76                     l2843:
   909                           
   910                           ; BSR set to: 0
   911                           ;Main.c: 211: }
   912                           ;Main.c: 212: int k = 1;
   913  000B76  0E00               	movlw	0
   914  000B78  0100               	movlb	0	; () banked
   915  000B7A  6F72               	movwf	(showLoadScreen@k+1)& (0+255),b
   916  000B7C  0E01               	movlw	1
   917  000B7E  6F71               	movwf	showLoadScreen@k& (0+255),b
   918                           
   919                           ;Main.c: 213: for (j = 0; j <= 100; ++j)
   920  000B80  0E00               	movlw	0
   921  000B82  0100               	movlb	0	; () banked
   922  000B84  6F74               	movwf	(showLoadScreen@j+1)& (0+255),b
   923  000B86  0E00               	movlw	0
   924  000B88  6F73               	movwf	showLoadScreen@j& (0+255),b
   925                           
   926                           ; BSR set to: 0
   927  000B8A  0100               	movlb	0	; () banked
   928  000B8C  BF74               	btfsc	(showLoadScreen@j+1)& (0+255),7,b
   929  000B8E  D00A               	goto	l2849
   930  000B90  0100               	movlb	0	; () banked
   931  000B92  5174               	movf	(showLoadScreen@j+1)& (0+255),w,b
   932  000B94  E106               	bnz	u2500
   933  000B96  0E65               	movlw	101
   934  000B98  0100               	movlb	0	; () banked
   935  000B9A  5D73               	subwf	showLoadScreen@j& (0+255),w,b
   936  000B9C  B0D8               	btfsc	status,0,c
   937  000B9E  D086               	goto	l2881
   938  000BA0  D001               	goto	l2849
   939  000BA2                     u2500:
   940                           
   941                           ; BSR set to: 0
   942  000BA2  D084               	goto	l2881
   943  000BA4                     l2849:
   944                           
   945                           ; BSR set to: 0
   946                           ;Main.c: 214: {
   947                           ;Main.c: 215: LCD_Set_Cursor(1, 1);
   948  000BA4  0E01               	movlw	1
   949  000BA6  6E1F               	movwf	LCD_Set_Cursor@x,c
   950  000BA8  0E01               	movlw	1
   951  000BAA  EC6E  F00B         	call	_LCD_Set_Cursor
   952                           
   953                           ;Main.c: 216: LCD_Write_String("LOADING...");
   954  000BAE  0E7D               	movlw	low STR_7
   955  000BB0  6E20               	movwf	LCD_Write_String@str,c
   956  000BB2  0E08               	movlw	high STR_7
   957  000BB4  6E21               	movwf	LCD_Write_String@str+1,c
   958  000BB6  ECC2  F009         	call	_LCD_Write_String	;wreg free
   959                           
   960                           ;Main.c: 217: sprintf(s, "%u", (j / 10));
   961  000BBA  0E67               	movlw	low showLoadScreen@s
   962  000BBC  6E27               	movwf	sprintf@sp,c
   963  000BBE  0E00               	movlw	high showLoadScreen@s
   964  000BC0  6E28               	movwf	sprintf@sp+1,c
   965  000BC2  0E8C               	movlw	low STR_8
   966  000BC4  6E29               	movwf	sprintf@f,c
   967  000BC6  0E08               	movlw	high STR_8
   968  000BC8  6E2A               	movwf	sprintf@f+1,c
   969  000BCA  C073  F01B         	movff	showLoadScreen@j,___awdiv@dividend
   970  000BCE  C074  F01C         	movff	showLoadScreen@j+1,___awdiv@dividend+1
   971  000BD2  0E00               	movlw	0
   972  000BD4  6E1E               	movwf	___awdiv@divisor+1,c
   973  000BD6  0E0A               	movlw	10
   974  000BD8  6E1D               	movwf	___awdiv@divisor,c
   975  000BDA  EC3F  F009         	call	___awdiv	;wreg free
   976  000BDE  C01B  F02B         	movff	?___awdiv,?_sprintf+4
   977  000BE2  C01C  F02C         	movff	?___awdiv+1,?_sprintf+5
   978  000BE6  EC04  F008         	call	_sprintf	;wreg free
   979                           
   980                           ;Main.c: 218: LCD_Set_Cursor(1, 11);
   981  000BEA  0E0B               	movlw	11
   982  000BEC  6E1F               	movwf	LCD_Set_Cursor@x,c
   983  000BEE  0E01               	movlw	1
   984  000BF0  EC6E  F00B         	call	_LCD_Set_Cursor
   985                           
   986                           ;Main.c: 219: LCD_Write_String(s);
   987  000BF4  0E67               	movlw	low showLoadScreen@s
   988  000BF6  6E20               	movwf	LCD_Write_String@str,c
   989  000BF8  0E00               	movlw	high showLoadScreen@s
   990  000BFA  6E21               	movwf	LCD_Write_String@str+1,c
   991  000BFC  ECC2  F009         	call	_LCD_Write_String	;wreg free
   992                           
   993                           ;Main.c: 220: sprintf(s, "%u", (j % 10));
   994  000C00  0E67               	movlw	low showLoadScreen@s
   995  000C02  6E27               	movwf	sprintf@sp,c
   996  000C04  0E00               	movlw	high showLoadScreen@s
   997  000C06  6E28               	movwf	sprintf@sp+1,c
   998  000C08  0E8C               	movlw	low STR_8
   999  000C0A  6E29               	movwf	sprintf@f,c
  1000  000C0C  0E08               	movlw	high STR_8
  1001  000C0E  6E2A               	movwf	sprintf@f+1,c
  1002  000C10  C073  F01B         	movff	showLoadScreen@j,___awmod@dividend
  1003  000C14  C074  F01C         	movff	showLoadScreen@j+1,___awmod@dividend+1
  1004  000C18  0E00               	movlw	0
  1005  000C1A  6E1E               	movwf	___awmod@divisor+1,c
  1006  000C1C  0E0A               	movlw	10
  1007  000C1E  6E1D               	movwf	___awmod@divisor,c
  1008  000C20  EC6D  F00A         	call	___awmod	;wreg free
  1009  000C24  C01B  F02B         	movff	?___awmod,?_sprintf+4
  1010  000C28  C01C  F02C         	movff	?___awmod+1,?_sprintf+5
  1011  000C2C  EC04  F008         	call	_sprintf	;wreg free
  1012                           
  1013                           ;Main.c: 221: LCD_Set_Cursor(1, 12);
  1014  000C30  0E0C               	movlw	12
  1015  000C32  6E1F               	movwf	LCD_Set_Cursor@x,c
  1016  000C34  0E01               	movlw	1
  1017  000C36  EC6E  F00B         	call	_LCD_Set_Cursor
  1018                           
  1019                           ;Main.c: 222: LCD_Write_String(s);
  1020  000C3A  0E67               	movlw	low showLoadScreen@s
  1021  000C3C  6E20               	movwf	LCD_Write_String@str,c
  1022  000C3E  0E00               	movlw	high showLoadScreen@s
  1023  000C40  6E21               	movwf	LCD_Write_String@str+1,c
  1024  000C42  ECC2  F009         	call	_LCD_Write_String	;wreg free
  1025                           
  1026                           ;Main.c: 223: LCD_Write_Char(37);
  1027  000C46  0E25               	movlw	37
  1028  000C48  ECDF  F00B         	call	_LCD_Write_Char
  1029                           
  1030                           ;Main.c: 225: if (!(j % 7))
  1031  000C4C  C073  F01B         	movff	showLoadScreen@j,___awmod@dividend
  1032  000C50  C074  F01C         	movff	showLoadScreen@j+1,___awmod@dividend+1
  1033  000C54  0E00               	movlw	0
  1034  000C56  6E1E               	movwf	___awmod@divisor+1,c
  1035  000C58  0E07               	movlw	7
  1036  000C5A  6E1D               	movwf	___awmod@divisor,c
  1037  000C5C  EC6D  F00A         	call	___awmod	;wreg free
  1038  000C60  501B               	movf	?___awmod,w,c
  1039  000C62  101C               	iorwf	?___awmod+1,w,c
  1040  000C64  A4D8               	btfss	status,2,c
  1041  000C66  D012               	goto	l2875
  1042                           
  1043                           ;Main.c: 226: {
  1044                           ;Main.c: 227: LCD_Set_Cursor(2, k++);
  1045  000C68  C071  F01F         	movff	showLoadScreen@k,LCD_Set_Cursor@x
  1046  000C6C  0E02               	movlw	2
  1047  000C6E  EC6E  F00B         	call	_LCD_Set_Cursor
  1048  000C72  0100               	movlb	0	; () banked
  1049  000C74  4B71               	infsnz	showLoadScreen@k& (0+255),f,b
  1050  000C76  2B72               	incf	(showLoadScreen@k+1)& (0+255),f,b
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;Main.c: 228: LCD_Write_Char(255);
  1054  000C78  0EFF               	movlw	255
  1055  000C7A  ECDF  F00B         	call	_LCD_Write_Char
  1056                           
  1057                           ;Main.c: 229: delay_ms(40);
  1058  000C7E  0E00               	movlw	0
  1059  000C80  6E1C               	movwf	delay_ms@duration+1,c
  1060  000C82  0E28               	movlw	40
  1061  000C84  6E1B               	movwf	delay_ms@duration,c
  1062  000C86  EC17  F00C         	call	_delay_ms	;wreg free
  1063                           
  1064                           ;Main.c: 230: } else
  1065  000C8A  D006               	goto	l2877
  1066  000C8C                     l2875:
  1067                           
  1068                           ;Main.c: 231: {
  1069                           ;Main.c: 232: delay_ms(50);
  1070  000C8C  0E00               	movlw	0
  1071  000C8E  6E1C               	movwf	delay_ms@duration+1,c
  1072  000C90  0E32               	movlw	50
  1073  000C92  6E1B               	movwf	delay_ms@duration,c
  1074  000C94  EC17  F00C         	call	_delay_ms	;wreg free
  1075  000C98                     l2877:
  1076  000C98  0100               	movlb	0	; () banked
  1077  000C9A  4B73               	infsnz	showLoadScreen@j& (0+255),f,b
  1078  000C9C  2B74               	incf	(showLoadScreen@j+1)& (0+255),f,b
  1079                           
  1080                           ; BSR set to: 0
  1081  000C9E  0100               	movlb	0	; () banked
  1082  000CA0  BF74               	btfsc	(showLoadScreen@j+1)& (0+255),7,b
  1083  000CA2  D780               	goto	l2849
  1084  000CA4  0100               	movlb	0	; () banked
  1085  000CA6  5174               	movf	(showLoadScreen@j+1)& (0+255),w,b
  1086  000CA8  E101               	bnz	l2881
  1087  000CAA  D775               	goto	L1
  1088  000CAC                     l2881:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;Main.c: 233: }
  1092                           ;Main.c: 234: }
  1093                           ;Main.c: 236: LCD_Clear();
  1094  000CAC  ECD4  F00C         	call	_LCD_Clear	;wreg free
  1095                           
  1096                           ;Main.c: 237: delay_ms(1000);
  1097  000CB0  0E03               	movlw	3
  1098  000CB2  6E1C               	movwf	delay_ms@duration+1,c
  1099  000CB4  0EE8               	movlw	232
  1100  000CB6  6E1B               	movwf	delay_ms@duration,c
  1101  000CB8  EC17  F00C         	call	_delay_ms	;wreg free
  1102                           
  1103                           ;Main.c: 238: LCD_Set_Cursor(1, 1);
  1104  000CBC  0E01               	movlw	1
  1105  000CBE  6E1F               	movwf	LCD_Set_Cursor@x,c
  1106  000CC0  0E01               	movlw	1
  1107  000CC2  EC6E  F00B         	call	_LCD_Set_Cursor
  1108                           
  1109                           ;Main.c: 239: LCD_Write_String("  COMPLETED !!!");
  1110  000CC6  0E3E               	movlw	low STR_10
  1111  000CC8  6E20               	movwf	LCD_Write_String@str,c
  1112  000CCA  0E08               	movlw	high STR_10
  1113  000CCC  6E21               	movwf	LCD_Write_String@str+1,c
  1114  000CCE  ECC2  F009         	call	_LCD_Write_String	;wreg free
  1115                           
  1116                           ;Main.c: 240: LCD_Set_Cursor(2, 1);
  1117  000CD2  0E01               	movlw	1
  1118  000CD4  6E1F               	movwf	LCD_Set_Cursor@x,c
  1119  000CD6  0E02               	movlw	2
  1120  000CD8  EC6E  F00B         	call	_LCD_Set_Cursor
  1121                           
  1122                           ;Main.c: 241: LCD_Write_String("  SYSTEM READY");
  1123  000CDC  0E6E               	movlw	low STR_11
  1124  000CDE  6E20               	movwf	LCD_Write_String@str,c
  1125  000CE0  0E08               	movlw	high STR_11
  1126  000CE2  6E21               	movwf	LCD_Write_String@str+1,c
  1127  000CE4  ECC2  F009         	call	_LCD_Write_String	;wreg free
  1128                           
  1129                           ;Main.c: 242: delay_ms(1000);
  1130  000CE8  0E03               	movlw	3
  1131  000CEA  6E1C               	movwf	delay_ms@duration+1,c
  1132  000CEC  0EE8               	movlw	232
  1133  000CEE  6E1B               	movwf	delay_ms@duration,c
  1134  000CF0  EC17  F00C         	call	_delay_ms	;wreg free
  1135  000CF4  0012               	return		;funcret
  1136  000CF6                     __end_of_showLoadScreen:
  1137                           	opt stack 0
  1138                           tblptru	equ	0xFF8
  1139                           intcon	equ	0xFF2
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _sprintf *****************
  1145 ;; Defined at:
  1146 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  sp              2   38[COMRAM] PTR unsigned char 
  1149 ;;		 -> showLoadScreen@s(10), 
  1150 ;;  f               2   40[COMRAM] PTR const unsigned char 
  1151 ;;		 -> STR_9(3), STR_8(3), 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  tmpval          4    0        struct .
  1154 ;;  cp              3    0        PTR const unsigned char 
  1155 ;;  val             2    3[BANK0 ] unsigned int 
  1156 ;;  ap              2    1[BANK0 ] PTR void [1]
  1157 ;;		 -> ?_sprintf(2), 
  1158 ;;  len             2    0        unsigned int 
  1159 ;;  c               1    6[BANK0 ] char 
  1160 ;;  prec            1    5[BANK0 ] char 
  1161 ;;  flag            1    0[BANK0 ] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  2   38[COMRAM] int 
  1164 ;; Registers used:
  1165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1171 ;;      Params:         6       0       0       0       0       0       0       0       0
  1172 ;;      Locals:         0       7       0       0       0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1174 ;;      Totals:         6       7       0       0       0       0       0       0       0
  1175 ;;Total ram usage:       13 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    5
  1178 ;; This function calls:
  1179 ;;		___lwdiv
  1180 ;;		___lwmod
  1181 ;; This function is called by:
  1182 ;;		_showLoadScreen
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text2
  1187  001008                     __ptext2:
  1188                           	opt stack 0
  1189  001008                     _sprintf:
  1190                           	opt stack 24
  1191                           
  1192                           ;doprnt.c: 494: va_list ap;
  1193                           ;doprnt.c: 499: signed char c;
  1194                           ;doprnt.c: 506: signed char prec;
  1195                           ;doprnt.c: 508: unsigned char flag;
  1196                           ;doprnt.c: 523: union {
  1197                           ;doprnt.c: 524: unsigned long vd;
  1198                           ;doprnt.c: 525: double integ;
  1199                           ;doprnt.c: 526: } tmpval;
  1200                           ;doprnt.c: 528: unsigned int val;
  1201                           ;doprnt.c: 529: unsigned len;
  1202                           ;doprnt.c: 530: const char * cp;
  1203                           ;doprnt.c: 533: *ap = __va_start();
  1204                           
  1205                           ;incstack = 0
  1206  001008  0E2B               	movlw	low (?_sprintf+4)
  1207  00100A  0100               	movlb	0	; () banked
  1208  00100C  6F61               	movwf	sprintf@ap& (0+255),b
  1209  00100E  0E00               	movlw	high (?_sprintf+4)
  1210  001010  0100               	movlb	0	; () banked
  1211  001012  6F62               	movwf	(sprintf@ap+1)& (0+255),b
  1212                           
  1213                           ;doprnt.c: 536: while(c = *f++) {
  1214  001014  D087               	goto	l2645
  1215  001016                     l2605:
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;doprnt.c: 538: if(c != '%')
  1219  001016  0E25               	movlw	37
  1220  001018  0100               	movlb	0	; () banked
  1221  00101A  1966               	xorwf	sprintf@c& (0+255),w,b
  1222  00101C  B4D8               	btfsc	status,2,c
  1223  00101E  D009               	goto	l2611
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;doprnt.c: 540: {
  1227                           ;doprnt.c: 541: ((*sp++ = (c)));
  1228  001020  C027  FFD9         	movff	sprintf@sp,fsr2l
  1229  001024  C028  FFDA         	movff	sprintf@sp+1,fsr2h
  1230  001028  C066  FFDF         	movff	sprintf@c,indf2
  1231                           
  1232                           ; BSR set to: 0
  1233  00102C  4A27               	infsnz	sprintf@sp,f,c
  1234  00102E  2A28               	incf	sprintf@sp+1,f,c
  1235                           
  1236                           ;doprnt.c: 542: continue;
  1237  001030  D079               	goto	l2645
  1238  001032                     l2611:
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;doprnt.c: 543: }
  1242                           ;doprnt.c: 548: flag = 0;
  1243  001032  0E00               	movlw	0
  1244  001034  0100               	movlb	0	; () banked
  1245  001036  6F60               	movwf	sprintf@flag& (0+255),b
  1246                           
  1247                           ;doprnt.c: 635: switch(c = *f++) {
  1248  001038  D004               	goto	l2617
  1249  00103A                     l2613:
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;doprnt.c: 818: flag |= 0xC0;
  1253  00103A  0EC0               	movlw	192
  1254  00103C  0100               	movlb	0	; () banked
  1255  00103E  1360               	iorwf	sprintf@flag& (0+255),f,b
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;doprnt.c: 822: }
  1259                           
  1260                           ;doprnt.c: 819: break;
  1261  001040  D012               	goto	l2619
  1262  001042                     l2617:
  1263                           
  1264                           ; BSR set to: 0
  1265  001042  C029  FFF6         	movff	sprintf@f,tblptrl
  1266  001046  C02A  FFF7         	movff	sprintf@f+1,tblptrh
  1267  00104A  4A29               	infsnz	sprintf@f,f,c
  1268  00104C  2A2A               	incf	sprintf@f+1,f,c
  1269  00104E                     	if	0	;tblptru may be non-zero
  1270  00104E                     	endif
  1271  00104E                     	if	0	;tblptru may be non-zero
  1272  00104E                     	endif
  1273  00104E  0008               	tblrd		*
  1274  001050  CFF5 F066          	movff	tablat,sprintf@c
  1275  001054  0100               	movlb	0	; () banked
  1276  001056  5166               	movf	sprintf@c& (0+255),w,b
  1277                           
  1278                           ; Switch size 1, requested type "space"
  1279                           ; Number of cases is 2, Range of values is 0 to 117
  1280                           ; switch strategies available:
  1281                           ; Name         Instructions Cycles
  1282                           ; simple_byte            7     4 (average)
  1283                           ;	Chosen strategy is simple_byte
  1284  001058  0A00               	xorlw	0	; case 0
  1285  00105A  B4D8               	btfsc	status,2,c
  1286  00105C  D070               	goto	l2647
  1287  00105E  0A75               	xorlw	117	; case 117
  1288  001060  B4D8               	btfsc	status,2,c
  1289  001062  D7EB               	goto	l2613
  1290  001064  D05F               	goto	l2645
  1291  001066                     l2619:
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;doprnt.c: 1273: {
  1295                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1296  001066  C061  FFD9         	movff	sprintf@ap,fsr2l
  1297  00106A  C062  FFDA         	movff	sprintf@ap+1,fsr2h
  1298  00106E  CFDE F063          	movff	postinc2,sprintf@val
  1299  001072  CFDD F064          	movff	postdec2,sprintf@val+1
  1300                           
  1301                           ; BSR set to: 0
  1302  001076  0E02               	movlw	2
  1303  001078  0100               	movlb	0	; () banked
  1304  00107A  2761               	addwf	sprintf@ap& (0+255),f,b
  1305  00107C  0E00               	movlw	0
  1306  00107E  2362               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;doprnt.c: 1287: }
  1310                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1311  001080  0E01               	movlw	1
  1312  001082  0100               	movlb	0	; () banked
  1313  001084  6F66               	movwf	sprintf@c& (0+255),b
  1314  001086                     l2625:
  1315                           
  1316                           ; BSR set to: 0
  1317  001086  0E05               	movlw	5
  1318  001088  0100               	movlb	0	; () banked
  1319  00108A  1966               	xorwf	sprintf@c& (0+255),w,b
  1320  00108C  B4D8               	btfsc	status,2,c
  1321  00108E  D016               	goto	l287
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;doprnt.c: 1306: if(val < dpowers[c])
  1325                           
  1326                           ; BSR set to: 0
  1327                           
  1328                           ; BSR set to: 0
  1329  001090  0100               	movlb	0	; () banked
  1330  001092  5166               	movf	sprintf@c& (0+255),w,b
  1331  001094  0D02               	mullw	2
  1332  001096  0E01               	movlw	low _dpowers
  1333  001098  24F3               	addwf	prodl,w,c
  1334  00109A  6EF6               	movwf	tblptrl,c
  1335  00109C  0E08               	movlw	high _dpowers
  1336  00109E  20F4               	addwfc	prodh,w,c
  1337  0010A0  6EF7               	movwf	tblptrh,c
  1338  0010A2                     	if	0	;There are less than 3 active tblptr bytes
  1339  0010A2                     	endif
  1340  0010A2  0009               	tblrd		*+
  1341  0010A4  50F5               	movf	tablat,w,c
  1342  0010A6  0100               	movlb	0	; () banked
  1343  0010A8  5D63               	subwf	sprintf@val& (0+255),w,b
  1344  0010AA  0009               	tblrd		*+
  1345  0010AC  50F5               	movf	tablat,w,c
  1346  0010AE  0100               	movlb	0	; () banked
  1347  0010B0  5964               	subwfb	(sprintf@val+1)& (0+255),w,b
  1348  0010B2  A0D8               	btfss	status,0,c
  1349  0010B4  D003               	goto	l287
  1350                           
  1351                           ; BSR set to: 0
  1352                           
  1353                           ; BSR set to: 0
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;doprnt.c: 1307: break;
  1357  0010B6  0100               	movlb	0	; () banked
  1358  0010B8  2B66               	incf	sprintf@c& (0+255),f,b
  1359  0010BA  D7E5               	goto	l2625
  1360  0010BC                     l287:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;doprnt.c: 1422: {
  1364                           ;doprnt.c: 1469: }
  1365                           ;doprnt.c: 1472: prec = c;
  1366  0010BC  C066  F065         	movff	sprintf@c,sprintf@prec
  1367                           
  1368                           ;doprnt.c: 1474: while(prec--) {
  1369  0010C0  D02B               	goto	l2643
  1370  0010C2                     l2637:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;doprnt.c: 1478: {
  1374                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1375  0010C2  0100               	movlb	0	; () banked
  1376  0010C4  5165               	movf	sprintf@prec& (0+255),w,b
  1377  0010C6  0D02               	mullw	2
  1378  0010C8  0E01               	movlw	low _dpowers
  1379  0010CA  24F3               	addwf	prodl,w,c
  1380  0010CC  6EF6               	movwf	tblptrl,c
  1381  0010CE  0E08               	movlw	high _dpowers
  1382  0010D0  20F4               	addwfc	prodh,w,c
  1383  0010D2  6EF7               	movwf	tblptrh,c
  1384  0010D4                     	if	0	;There are less than 3 active tblptr bytes
  1385  0010D4                     	endif
  1386  0010D4  0009               	tblrd		*+
  1387  0010D6  CFF5 F01D          	movff	tablat,___lwdiv@divisor
  1388  0010DA  000A               	tblrd		*-
  1389  0010DC  CFF5 F01E          	movff	tablat,___lwdiv@divisor+1
  1390  0010E0  C063  F01B         	movff	sprintf@val,___lwdiv@dividend
  1391  0010E4  C064  F01C         	movff	sprintf@val+1,___lwdiv@dividend+1
  1392  0010E8  EC45  F00B         	call	___lwdiv	;wreg free
  1393  0010EC  C01B  F022         	movff	?___lwdiv,___lwmod@dividend
  1394  0010F0  C01C  F023         	movff	?___lwdiv+1,___lwmod@dividend+1
  1395  0010F4  0E00               	movlw	0
  1396  0010F6  6E25               	movwf	___lwmod@divisor+1,c
  1397  0010F8  0E0A               	movlw	10
  1398  0010FA  6E24               	movwf	___lwmod@divisor,c
  1399  0010FC  ECBE  F00B         	call	___lwmod	;wreg free
  1400  001100  5022               	movf	?___lwmod,w,c
  1401  001102  0F30               	addlw	48
  1402  001104  0100               	movlb	0	; () banked
  1403  001106  6F66               	movwf	sprintf@c& (0+255),b
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;doprnt.c: 1523: }
  1407                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1408  001108  C027  FFD9         	movff	sprintf@sp,fsr2l
  1409  00110C  C028  FFDA         	movff	sprintf@sp+1,fsr2h
  1410  001110  C066  FFDF         	movff	sprintf@c,indf2
  1411                           
  1412                           ; BSR set to: 0
  1413  001114  4A27               	infsnz	sprintf@sp,f,c
  1414  001116  2A28               	incf	sprintf@sp+1,f,c
  1415  001118                     l2643:
  1416                           
  1417                           ; BSR set to: 0
  1418  001118  0100               	movlb	0	; () banked
  1419  00111A  0765               	decf	sprintf@prec& (0+255),f,b
  1420  00111C  0100               	movlb	0	; () banked
  1421  00111E  2965               	incf	sprintf@prec& (0+255),w,b
  1422  001120  A4D8               	btfss	status,2,c
  1423  001122  D7CF               	goto	l2637
  1424  001124                     l2645:
  1425                           
  1426                           ; BSR set to: 0
  1427  001124  C029  FFF6         	movff	sprintf@f,tblptrl
  1428  001128  C02A  FFF7         	movff	sprintf@f+1,tblptrh
  1429  00112C  4A29               	infsnz	sprintf@f,f,c
  1430  00112E  2A2A               	incf	sprintf@f+1,f,c
  1431  001130                     	if	0	;tblptru may be non-zero
  1432  001130                     	endif
  1433  001130                     	if	0	;tblptru may be non-zero
  1434  001130                     	endif
  1435  001130  0008               	tblrd		*
  1436  001132  CFF5 F066          	movff	tablat,sprintf@c
  1437  001136  0100               	movlb	0	; () banked
  1438  001138  5166               	movf	sprintf@c& (0+255),w,b
  1439  00113A  A4D8               	btfss	status,2,c
  1440  00113C  D76C               	goto	l2605
  1441  00113E                     l2647:
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;doprnt.c: 1538: *sp = 0;
  1445  00113E  C027  FFD9         	movff	sprintf@sp,fsr2l
  1446  001142  C028  FFDA         	movff	sprintf@sp+1,fsr2h
  1447  001146  0E00               	movlw	0
  1448  001148  6EDF               	movwf	indf2,c
  1449  00114A  0012               	return	
  1450  00114C                     __end_of_sprintf:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           prodh	equ	0xFF4
  1457                           prodl	equ	0xFF3
  1458                           intcon	equ	0xFF2
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           indf2	equ	0xFDF
  1462                           postinc2	equ	0xFDE
  1463                           postdec2	equ	0xFDD
  1464                           fsr2h	equ	0xFDA
  1465                           fsr2l	equ	0xFD9
  1466                           status	equ	0xFD8
  1467                           
  1468 ;; *************** function ___lwmod *****************
  1469 ;; Defined at:
  1470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  dividend        2   33[COMRAM] unsigned int 
  1473 ;;  divisor         2   35[COMRAM] unsigned int 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  counter         1   37[COMRAM] unsigned char 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2   33[COMRAM] unsigned int 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1485 ;;      Params:         4       0       0       0       0       0       0       0       0
  1486 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1488 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1489 ;;Total ram usage:        5 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    4
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_sprintf
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text3
  1500  00177C                     __ptext3:
  1501                           	opt stack 0
  1502  00177C                     ___lwmod:
  1503                           	opt stack 24
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;incstack = 0
  1507  00177C  5024               	movf	___lwmod@divisor,w,c
  1508  00177E  1025               	iorwf	___lwmod@divisor+1,w,c
  1509  001780  B4D8               	btfsc	status,2,c
  1510  001782  D018               	goto	l706
  1511  001784  0E01               	movlw	1
  1512  001786  6E26               	movwf	___lwmod@counter,c
  1513  001788  D004               	goto	l2559
  1514  00178A                     l2557:
  1515  00178A  90D8               	bcf	status,0,c
  1516  00178C  3624               	rlcf	___lwmod@divisor,f,c
  1517  00178E  3625               	rlcf	___lwmod@divisor+1,f,c
  1518  001790  2A26               	incf	___lwmod@counter,f,c
  1519  001792                     l2559:
  1520  001792  AE25               	btfss	___lwmod@divisor+1,7,c
  1521  001794  D7FA               	goto	l2557
  1522  001796                     l2561:
  1523  001796  5024               	movf	___lwmod@divisor,w,c
  1524  001798  5C22               	subwf	___lwmod@dividend,w,c
  1525  00179A  5025               	movf	___lwmod@divisor+1,w,c
  1526  00179C  5823               	subwfb	___lwmod@dividend+1,w,c
  1527  00179E  A0D8               	btfss	status,0,c
  1528  0017A0  D004               	goto	l2565
  1529  0017A2  5024               	movf	___lwmod@divisor,w,c
  1530  0017A4  5E22               	subwf	___lwmod@dividend,f,c
  1531  0017A6  5025               	movf	___lwmod@divisor+1,w,c
  1532  0017A8  5A23               	subwfb	___lwmod@dividend+1,f,c
  1533  0017AA                     l2565:
  1534  0017AA  90D8               	bcf	status,0,c
  1535  0017AC  3225               	rrcf	___lwmod@divisor+1,f,c
  1536  0017AE  3224               	rrcf	___lwmod@divisor,f,c
  1537  0017B0  2E26               	decfsz	___lwmod@counter,f,c
  1538  0017B2  D7F1               	goto	l2561
  1539  0017B4                     l706:
  1540  0017B4  C022  F022         	movff	___lwmod@dividend,?___lwmod
  1541  0017B8  C023  F023         	movff	___lwmod@dividend+1,?___lwmod+1
  1542  0017BC  0012               	return		;funcret
  1543  0017BE                     __end_of___lwmod:
  1544                           	opt stack 0
  1545                           tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           prodh	equ	0xFF4
  1550                           prodl	equ	0xFF3
  1551                           intcon	equ	0xFF2
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           indf2	equ	0xFDF
  1555                           postinc2	equ	0xFDE
  1556                           postdec2	equ	0xFDD
  1557                           fsr2h	equ	0xFDA
  1558                           fsr2l	equ	0xFD9
  1559                           status	equ	0xFD8
  1560                           
  1561 ;; *************** function ___lwdiv *****************
  1562 ;; Defined at:
  1563 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;  dividend        2   26[COMRAM] unsigned int 
  1566 ;;  divisor         2   28[COMRAM] unsigned int 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  quotient        2   31[COMRAM] unsigned int 
  1569 ;;  counter         1   30[COMRAM] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  2   26[COMRAM] unsigned int 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1579 ;;      Params:         4       0       0       0       0       0       0       0       0
  1580 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1582 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1583 ;;Total ram usage:        7 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    4
  1586 ;; This function calls:
  1587 ;;		Nothing
  1588 ;; This function is called by:
  1589 ;;		_sprintf
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text4
  1594  00168A                     __ptext4:
  1595                           	opt stack 0
  1596  00168A                     ___lwdiv:
  1597                           	opt stack 24
  1598                           
  1599                           ;incstack = 0
  1600  00168A  0E00               	movlw	0
  1601  00168C  6E21               	movwf	___lwdiv@quotient+1,c
  1602  00168E  0E00               	movlw	0
  1603  001690  6E20               	movwf	___lwdiv@quotient,c
  1604  001692  501D               	movf	___lwdiv@divisor,w,c
  1605  001694  101E               	iorwf	___lwdiv@divisor+1,w,c
  1606  001696  B4D8               	btfsc	status,2,c
  1607  001698  D01C               	goto	l696
  1608  00169A  0E01               	movlw	1
  1609  00169C  6E1F               	movwf	___lwdiv@counter,c
  1610  00169E  D004               	goto	l2539
  1611  0016A0                     l2537:
  1612  0016A0  90D8               	bcf	status,0,c
  1613  0016A2  361D               	rlcf	___lwdiv@divisor,f,c
  1614  0016A4  361E               	rlcf	___lwdiv@divisor+1,f,c
  1615  0016A6  2A1F               	incf	___lwdiv@counter,f,c
  1616  0016A8                     l2539:
  1617  0016A8  AE1E               	btfss	___lwdiv@divisor+1,7,c
  1618  0016AA  D7FA               	goto	l2537
  1619  0016AC                     l2541:
  1620  0016AC  90D8               	bcf	status,0,c
  1621  0016AE  3620               	rlcf	___lwdiv@quotient,f,c
  1622  0016B0  3621               	rlcf	___lwdiv@quotient+1,f,c
  1623  0016B2  501D               	movf	___lwdiv@divisor,w,c
  1624  0016B4  5C1B               	subwf	___lwdiv@dividend,w,c
  1625  0016B6  501E               	movf	___lwdiv@divisor+1,w,c
  1626  0016B8  581C               	subwfb	___lwdiv@dividend+1,w,c
  1627  0016BA  A0D8               	btfss	status,0,c
  1628  0016BC  D005               	goto	l2549
  1629  0016BE  501D               	movf	___lwdiv@divisor,w,c
  1630  0016C0  5E1B               	subwf	___lwdiv@dividend,f,c
  1631  0016C2  501E               	movf	___lwdiv@divisor+1,w,c
  1632  0016C4  5A1C               	subwfb	___lwdiv@dividend+1,f,c
  1633  0016C6  8020               	bsf	___lwdiv@quotient,0,c
  1634  0016C8                     l2549:
  1635  0016C8  90D8               	bcf	status,0,c
  1636  0016CA  321E               	rrcf	___lwdiv@divisor+1,f,c
  1637  0016CC  321D               	rrcf	___lwdiv@divisor,f,c
  1638  0016CE  2E1F               	decfsz	___lwdiv@counter,f,c
  1639  0016D0  D7ED               	goto	l2541
  1640  0016D2                     l696:
  1641  0016D2  C020  F01B         	movff	___lwdiv@quotient,?___lwdiv
  1642  0016D6  C021  F01C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1643  0016DA  0012               	return		;funcret
  1644  0016DC                     __end_of___lwdiv:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           intcon	equ	0xFF2
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           indf2	equ	0xFDF
  1656                           postinc2	equ	0xFDE
  1657                           postdec2	equ	0xFDD
  1658                           fsr2h	equ	0xFDA
  1659                           fsr2l	equ	0xFD9
  1660                           status	equ	0xFD8
  1661                           
  1662 ;; *************** function _delay_ms *****************
  1663 ;; Defined at:
  1664 ;;		line 89 in file "Main.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  duration        2   26[COMRAM] unsigned int 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  i               2   29[COMRAM] int 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         2       0       0       0       0       0       0       0       0
  1679 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1680 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1681 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1682 ;;Total ram usage:        5 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    4
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_showLoadScreen
  1689 ;;		_main
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text5
  1694  00182E                     __ptext5:
  1695                           	opt stack 0
  1696  00182E                     _delay_ms:
  1697                           	opt stack 25
  1698                           
  1699                           ;Main.c: 91: for(int i = 0; i < duration; ++i)
  1700                           
  1701                           ;incstack = 0
  1702  00182E  0E00               	movlw	0
  1703  001830  6E1F               	movwf	delay_ms@i+1,c
  1704  001832  0E00               	movlw	0
  1705  001834  6E1E               	movwf	delay_ms@i,c
  1706  001836  D00A               	goto	l222
  1707  001838                     l2599:
  1708                           
  1709                           ;Main.c: 92: _delay((unsigned long)((1)*(20000000UL/4000.0)));
  1710  001838  0E07               	movlw	7
  1711  00183A  6E1D               	movwf	??_delay_ms& (0+255),c
  1712  00183C  0E7D               	movlw	125
  1713  00183E                     u2647:
  1714  00183E  2EE8               	decfsz	wreg,f,c
  1715  001840  D7FE               	goto	u2647
  1716  001842  2E1D               	decfsz	??_delay_ms& (0+255),f,c
  1717  001844  D7FC               	goto	u2647
  1718  001846  F000               	nop	
  1719  001848  4A1E               	infsnz	delay_ms@i,f,c
  1720  00184A  2A1F               	incf	delay_ms@i+1,f,c
  1721  00184C                     l222:
  1722  00184C  501B               	movf	delay_ms@duration,w,c
  1723  00184E  5C1E               	subwf	delay_ms@i,w,c
  1724  001850  501C               	movf	delay_ms@duration+1,w,c
  1725  001852  581F               	subwfb	delay_ms@i+1,w,c
  1726  001854  B0D8               	btfsc	status,0,c
  1727  001856  0012               	return	
  1728  001858  D7EF               	goto	l2599
  1729  00185A                     __end_of_delay_ms:
  1730                           	opt stack 0
  1731                           tblptru	equ	0xFF8
  1732                           tblptrh	equ	0xFF7
  1733                           tblptrl	equ	0xFF6
  1734                           tablat	equ	0xFF5
  1735                           prodh	equ	0xFF4
  1736                           prodl	equ	0xFF3
  1737                           intcon	equ	0xFF2
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           indf2	equ	0xFDF
  1741                           postinc2	equ	0xFDE
  1742                           postdec2	equ	0xFDD
  1743                           fsr2h	equ	0xFDA
  1744                           fsr2l	equ	0xFD9
  1745                           status	equ	0xFD8
  1746                           
  1747 ;; *************** function _showClock *****************
  1748 ;; Defined at:
  1749 ;;		line 160 in file "Main.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  RTC_data        2   37[COMRAM] PTR unsigned char 
  1752 ;;		 -> main@RTC_data(8), 
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;		None
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1764 ;;      Params:         2       0       0       0       0       0       0       0       0
  1765 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1766 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1767 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1768 ;;Total ram usage:        3 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    7
  1771 ;; This function calls:
  1772 ;;		_LCD_Clear
  1773 ;;		_LCD_Set_Cursor
  1774 ;;		_LCD_Write_Char
  1775 ;;		_LCD_Write_String
  1776 ;;		___awdiv
  1777 ;;		___awmod
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text6
  1784  000890                     __ptext6:
  1785                           	opt stack 0
  1786  000890                     _showClock:
  1787                           	opt stack 23
  1788                           
  1789                           ;Main.c: 162: LCD_Clear();
  1790                           
  1791                           ;incstack = 0
  1792  000890  ECD4  F00C         	call	_LCD_Clear	;wreg free
  1793                           
  1794                           ;Main.c: 163: LCD_Set_Cursor(1,1);
  1795  000894  0E01               	movlw	1
  1796  000896  6E1F               	movwf	LCD_Set_Cursor@x,c
  1797  000898  0E01               	movlw	1
  1798  00089A  EC6E  F00B         	call	_LCD_Set_Cursor
  1799                           
  1800                           ;Main.c: 164: LCD_Write_Char((RTC_data[2]/10) + 48);
  1801  00089E  EE20 F002          	lfsr	2,2
  1802  0008A2  5026               	movf	showClock@RTC_data,w,c
  1803  0008A4  26D9               	addwf	fsr2l,f,c
  1804  0008A6  5027               	movf	showClock@RTC_data+1,w,c
  1805  0008A8  22DA               	addwfc	fsr2h,f,c
  1806  0008AA  50DF               	movf	indf2,w,c
  1807  0008AC  6E28               	movwf	??_showClock& (0+255),c
  1808  0008AE  5028               	movf	??_showClock,w,c
  1809  0008B0  6E1B               	movwf	___awdiv@dividend,c
  1810  0008B2  6A1C               	clrf	___awdiv@dividend+1,c
  1811  0008B4  0E00               	movlw	0
  1812  0008B6  6E1E               	movwf	___awdiv@divisor+1,c
  1813  0008B8  0E0A               	movlw	10
  1814  0008BA  6E1D               	movwf	___awdiv@divisor,c
  1815  0008BC  EC3F  F009         	call	___awdiv	;wreg free
  1816  0008C0  501B               	movf	?___awdiv,w,c
  1817  0008C2  0F30               	addlw	48
  1818  0008C4  ECDF  F00B         	call	_LCD_Write_Char
  1819                           
  1820                           ;Main.c: 165: LCD_Write_Char((RTC_data[2]%10) + 48);
  1821  0008C8  EE20 F002          	lfsr	2,2
  1822  0008CC  5026               	movf	showClock@RTC_data,w,c
  1823  0008CE  26D9               	addwf	fsr2l,f,c
  1824  0008D0  5027               	movf	showClock@RTC_data+1,w,c
  1825  0008D2  22DA               	addwfc	fsr2h,f,c
  1826  0008D4  50DF               	movf	indf2,w,c
  1827  0008D6  6E28               	movwf	??_showClock& (0+255),c
  1828  0008D8  5028               	movf	??_showClock,w,c
  1829  0008DA  6E1B               	movwf	___awmod@dividend,c
  1830  0008DC  6A1C               	clrf	___awmod@dividend+1,c
  1831  0008DE  0E00               	movlw	0
  1832  0008E0  6E1E               	movwf	___awmod@divisor+1,c
  1833  0008E2  0E0A               	movlw	10
  1834  0008E4  6E1D               	movwf	___awmod@divisor,c
  1835  0008E6  EC6D  F00A         	call	___awmod	;wreg free
  1836  0008EA  501B               	movf	?___awmod,w,c
  1837  0008EC  0F30               	addlw	48
  1838  0008EE  ECDF  F00B         	call	_LCD_Write_Char
  1839                           
  1840                           ;Main.c: 166: LCD_Write_Char(':');
  1841  0008F2  0E3A               	movlw	58
  1842  0008F4  ECDF  F00B         	call	_LCD_Write_Char
  1843                           
  1844                           ;Main.c: 167: LCD_Write_Char((RTC_data[1]/10)+48);
  1845  0008F8  EE20 F001          	lfsr	2,1
  1846  0008FC  5026               	movf	showClock@RTC_data,w,c
  1847  0008FE  26D9               	addwf	fsr2l,f,c
  1848  000900  5027               	movf	showClock@RTC_data+1,w,c
  1849  000902  22DA               	addwfc	fsr2h,f,c
  1850  000904  50DF               	movf	indf2,w,c
  1851  000906  6E28               	movwf	??_showClock& (0+255),c
  1852  000908  5028               	movf	??_showClock,w,c
  1853  00090A  6E1B               	movwf	___awdiv@dividend,c
  1854  00090C  6A1C               	clrf	___awdiv@dividend+1,c
  1855  00090E  0E00               	movlw	0
  1856  000910  6E1E               	movwf	___awdiv@divisor+1,c
  1857  000912  0E0A               	movlw	10
  1858  000914  6E1D               	movwf	___awdiv@divisor,c
  1859  000916  EC3F  F009         	call	___awdiv	;wreg free
  1860  00091A  501B               	movf	?___awdiv,w,c
  1861  00091C  0F30               	addlw	48
  1862  00091E  ECDF  F00B         	call	_LCD_Write_Char
  1863                           
  1864                           ;Main.c: 168: LCD_Write_Char((RTC_data[1]%10)+48);
  1865  000922  EE20 F001          	lfsr	2,1
  1866  000926  5026               	movf	showClock@RTC_data,w,c
  1867  000928  26D9               	addwf	fsr2l,f,c
  1868  00092A  5027               	movf	showClock@RTC_data+1,w,c
  1869  00092C  22DA               	addwfc	fsr2h,f,c
  1870  00092E  50DF               	movf	indf2,w,c
  1871  000930  6E28               	movwf	??_showClock& (0+255),c
  1872  000932  5028               	movf	??_showClock,w,c
  1873  000934  6E1B               	movwf	___awmod@dividend,c
  1874  000936  6A1C               	clrf	___awmod@dividend+1,c
  1875  000938  0E00               	movlw	0
  1876  00093A  6E1E               	movwf	___awmod@divisor+1,c
  1877  00093C  0E0A               	movlw	10
  1878  00093E  6E1D               	movwf	___awmod@divisor,c
  1879  000940  EC6D  F00A         	call	___awmod	;wreg free
  1880  000944  501B               	movf	?___awmod,w,c
  1881  000946  0F30               	addlw	48
  1882  000948  ECDF  F00B         	call	_LCD_Write_Char
  1883                           
  1884                           ;Main.c: 169: LCD_Write_Char(':');
  1885  00094C  0E3A               	movlw	58
  1886  00094E  ECDF  F00B         	call	_LCD_Write_Char
  1887                           
  1888                           ;Main.c: 170: LCD_Write_Char(RTC_data[0]/10+48);
  1889  000952  C026  FFD9         	movff	showClock@RTC_data,fsr2l
  1890  000956  C027  FFDA         	movff	showClock@RTC_data+1,fsr2h
  1891  00095A  50DF               	movf	indf2,w,c
  1892  00095C  6E28               	movwf	??_showClock& (0+255),c
  1893  00095E  5028               	movf	??_showClock,w,c
  1894  000960  6E1B               	movwf	___awdiv@dividend,c
  1895  000962  6A1C               	clrf	___awdiv@dividend+1,c
  1896  000964  0E00               	movlw	0
  1897  000966  6E1E               	movwf	___awdiv@divisor+1,c
  1898  000968  0E0A               	movlw	10
  1899  00096A  6E1D               	movwf	___awdiv@divisor,c
  1900  00096C  EC3F  F009         	call	___awdiv	;wreg free
  1901  000970  501B               	movf	?___awdiv,w,c
  1902  000972  0F30               	addlw	48
  1903  000974  ECDF  F00B         	call	_LCD_Write_Char
  1904                           
  1905                           ;Main.c: 171: LCD_Write_Char(RTC_data[0]%10+48);
  1906  000978  C026  FFD9         	movff	showClock@RTC_data,fsr2l
  1907  00097C  C027  FFDA         	movff	showClock@RTC_data+1,fsr2h
  1908  000980  50DF               	movf	indf2,w,c
  1909  000982  6E28               	movwf	??_showClock& (0+255),c
  1910  000984  5028               	movf	??_showClock,w,c
  1911  000986  6E1B               	movwf	___awmod@dividend,c
  1912  000988  6A1C               	clrf	___awmod@dividend+1,c
  1913  00098A  0E00               	movlw	0
  1914  00098C  6E1E               	movwf	___awmod@divisor+1,c
  1915  00098E  0E0A               	movlw	10
  1916  000990  6E1D               	movwf	___awmod@divisor,c
  1917  000992  EC6D  F00A         	call	___awmod	;wreg free
  1918  000996  501B               	movf	?___awmod,w,c
  1919  000998  0F30               	addlw	48
  1920  00099A  ECDF  F00B         	call	_LCD_Write_Char
  1921                           
  1922                           ;Main.c: 172: LCD_Set_Cursor(2,1);
  1923  00099E  0E01               	movlw	1
  1924  0009A0  6E1F               	movwf	LCD_Set_Cursor@x,c
  1925  0009A2  0E02               	movlw	2
  1926  0009A4  EC6E  F00B         	call	_LCD_Set_Cursor
  1927                           
  1928                           ;Main.c: 174: if (RTC_data[3] == 0x01)
  1929  0009A8  EE20 F003          	lfsr	2,3
  1930  0009AC  5026               	movf	showClock@RTC_data,w,c
  1931  0009AE  26D9               	addwf	fsr2l,f,c
  1932  0009B0  5027               	movf	showClock@RTC_data+1,w,c
  1933  0009B2  22DA               	addwfc	fsr2h,f,c
  1934  0009B4  04DE               	decf	postinc2,w,c
  1935  0009B6  A4D8               	btfss	status,2,c
  1936  0009B8  D007               	goto	l2801
  1937                           
  1938                           ;Main.c: 175: LCD_Write_String("CN ");
  1939  0009BA  0E88               	movlw	low STR_4
  1940  0009BC  6E20               	movwf	LCD_Write_String@str,c
  1941  0009BE  0E08               	movlw	high STR_4
  1942  0009C0  6E21               	movwf	LCD_Write_String@str+1,c
  1943  0009C2  ECC2  F009         	call	_LCD_Write_String	;wreg free
  1944  0009C6  D010               	goto	l250
  1945  0009C8                     l2801:
  1946                           
  1947                           ;Main.c: 176: else
  1948                           ;Main.c: 177: {
  1949                           ;Main.c: 178: LCD_Write_Char('T');
  1950  0009C8  0E54               	movlw	84
  1951  0009CA  ECDF  F00B         	call	_LCD_Write_Char
  1952                           
  1953                           ;Main.c: 179: LCD_Write_Char(RTC_data[3] + 48);
  1954  0009CE  EE20 F003          	lfsr	2,3
  1955  0009D2  5026               	movf	showClock@RTC_data,w,c
  1956  0009D4  26D9               	addwf	fsr2l,f,c
  1957  0009D6  5027               	movf	showClock@RTC_data+1,w,c
  1958  0009D8  22DA               	addwfc	fsr2h,f,c
  1959  0009DA  50DF               	movf	indf2,w,c
  1960  0009DC  0F30               	addlw	48
  1961  0009DE  ECDF  F00B         	call	_LCD_Write_Char
  1962                           
  1963                           ;Main.c: 180: LCD_Write_Char(':');
  1964  0009E2  0E3A               	movlw	58
  1965  0009E4  ECDF  F00B         	call	_LCD_Write_Char
  1966  0009E8                     l250:
  1967                           
  1968                           ;Main.c: 181: }
  1969                           ;Main.c: 183: LCD_Write_Char((RTC_data[4] / 10) + 48);
  1970  0009E8  EE20 F004          	lfsr	2,4
  1971  0009EC  5026               	movf	showClock@RTC_data,w,c
  1972  0009EE  26D9               	addwf	fsr2l,f,c
  1973  0009F0  5027               	movf	showClock@RTC_data+1,w,c
  1974  0009F2  22DA               	addwfc	fsr2h,f,c
  1975  0009F4  50DF               	movf	indf2,w,c
  1976  0009F6  6E28               	movwf	??_showClock& (0+255),c
  1977  0009F8  5028               	movf	??_showClock,w,c
  1978  0009FA  6E1B               	movwf	___awdiv@dividend,c
  1979  0009FC  6A1C               	clrf	___awdiv@dividend+1,c
  1980  0009FE  0E00               	movlw	0
  1981  000A00  6E1E               	movwf	___awdiv@divisor+1,c
  1982  000A02  0E0A               	movlw	10
  1983  000A04  6E1D               	movwf	___awdiv@divisor,c
  1984  000A06  EC3F  F009         	call	___awdiv	;wreg free
  1985  000A0A  501B               	movf	?___awdiv,w,c
  1986  000A0C  0F30               	addlw	48
  1987  000A0E  ECDF  F00B         	call	_LCD_Write_Char
  1988                           
  1989                           ;Main.c: 184: LCD_Write_Char((RTC_data[4] % 10) + 48);
  1990  000A12  EE20 F004          	lfsr	2,4
  1991  000A16  5026               	movf	showClock@RTC_data,w,c
  1992  000A18  26D9               	addwf	fsr2l,f,c
  1993  000A1A  5027               	movf	showClock@RTC_data+1,w,c
  1994  000A1C  22DA               	addwfc	fsr2h,f,c
  1995  000A1E  50DF               	movf	indf2,w,c
  1996  000A20  6E28               	movwf	??_showClock& (0+255),c
  1997  000A22  5028               	movf	??_showClock,w,c
  1998  000A24  6E1B               	movwf	___awmod@dividend,c
  1999  000A26  6A1C               	clrf	___awmod@dividend+1,c
  2000  000A28  0E00               	movlw	0
  2001  000A2A  6E1E               	movwf	___awmod@divisor+1,c
  2002  000A2C  0E0A               	movlw	10
  2003  000A2E  6E1D               	movwf	___awmod@divisor,c
  2004  000A30  EC6D  F00A         	call	___awmod	;wreg free
  2005  000A34  501B               	movf	?___awmod,w,c
  2006  000A36  0F30               	addlw	48
  2007  000A38  ECDF  F00B         	call	_LCD_Write_Char
  2008                           
  2009                           ;Main.c: 185: LCD_Write_Char('/');
  2010  000A3C  0E2F               	movlw	47
  2011  000A3E  ECDF  F00B         	call	_LCD_Write_Char
  2012                           
  2013                           ;Main.c: 186: LCD_Write_Char((RTC_data[5] / 10) + 48);
  2014  000A42  EE20 F005          	lfsr	2,5
  2015  000A46  5026               	movf	showClock@RTC_data,w,c
  2016  000A48  26D9               	addwf	fsr2l,f,c
  2017  000A4A  5027               	movf	showClock@RTC_data+1,w,c
  2018  000A4C  22DA               	addwfc	fsr2h,f,c
  2019  000A4E  50DF               	movf	indf2,w,c
  2020  000A50  6E28               	movwf	??_showClock& (0+255),c
  2021  000A52  5028               	movf	??_showClock,w,c
  2022  000A54  6E1B               	movwf	___awdiv@dividend,c
  2023  000A56  6A1C               	clrf	___awdiv@dividend+1,c
  2024  000A58  0E00               	movlw	0
  2025  000A5A  6E1E               	movwf	___awdiv@divisor+1,c
  2026  000A5C  0E0A               	movlw	10
  2027  000A5E  6E1D               	movwf	___awdiv@divisor,c
  2028  000A60  EC3F  F009         	call	___awdiv	;wreg free
  2029  000A64  501B               	movf	?___awdiv,w,c
  2030  000A66  0F30               	addlw	48
  2031  000A68  ECDF  F00B         	call	_LCD_Write_Char
  2032                           
  2033                           ;Main.c: 187: LCD_Write_Char((RTC_data[5] % 10) + 48);
  2034  000A6C  EE20 F005          	lfsr	2,5
  2035  000A70  5026               	movf	showClock@RTC_data,w,c
  2036  000A72  26D9               	addwf	fsr2l,f,c
  2037  000A74  5027               	movf	showClock@RTC_data+1,w,c
  2038  000A76  22DA               	addwfc	fsr2h,f,c
  2039  000A78  50DF               	movf	indf2,w,c
  2040  000A7A  6E28               	movwf	??_showClock& (0+255),c
  2041  000A7C  5028               	movf	??_showClock,w,c
  2042  000A7E  6E1B               	movwf	___awmod@dividend,c
  2043  000A80  6A1C               	clrf	___awmod@dividend+1,c
  2044  000A82  0E00               	movlw	0
  2045  000A84  6E1E               	movwf	___awmod@divisor+1,c
  2046  000A86  0E0A               	movlw	10
  2047  000A88  6E1D               	movwf	___awmod@divisor,c
  2048  000A8A  EC6D  F00A         	call	___awmod	;wreg free
  2049  000A8E  501B               	movf	?___awmod,w,c
  2050  000A90  0F30               	addlw	48
  2051  000A92  ECDF  F00B         	call	_LCD_Write_Char
  2052                           
  2053                           ;Main.c: 188: LCD_Write_Char('/');
  2054  000A96  0E2F               	movlw	47
  2055  000A98  ECDF  F00B         	call	_LCD_Write_Char
  2056                           
  2057                           ;Main.c: 189: LCD_Write_Char(20 / 10 + 48);
  2058  000A9C  0E32               	movlw	50
  2059  000A9E  ECDF  F00B         	call	_LCD_Write_Char
  2060                           
  2061                           ;Main.c: 190: LCD_Write_Char(48);
  2062  000AA2  0E30               	movlw	48
  2063  000AA4  ECDF  F00B         	call	_LCD_Write_Char
  2064                           
  2065                           ;Main.c: 191: LCD_Write_Char(RTC_data[6] / 10 + 48);
  2066  000AA8  EE20 F006          	lfsr	2,6
  2067  000AAC  5026               	movf	showClock@RTC_data,w,c
  2068  000AAE  26D9               	addwf	fsr2l,f,c
  2069  000AB0  5027               	movf	showClock@RTC_data+1,w,c
  2070  000AB2  22DA               	addwfc	fsr2h,f,c
  2071  000AB4  50DF               	movf	indf2,w,c
  2072  000AB6  6E28               	movwf	??_showClock& (0+255),c
  2073  000AB8  5028               	movf	??_showClock,w,c
  2074  000ABA  6E1B               	movwf	___awdiv@dividend,c
  2075  000ABC  6A1C               	clrf	___awdiv@dividend+1,c
  2076  000ABE  0E00               	movlw	0
  2077  000AC0  6E1E               	movwf	___awdiv@divisor+1,c
  2078  000AC2  0E0A               	movlw	10
  2079  000AC4  6E1D               	movwf	___awdiv@divisor,c
  2080  000AC6  EC3F  F009         	call	___awdiv	;wreg free
  2081  000ACA  501B               	movf	?___awdiv,w,c
  2082  000ACC  0F30               	addlw	48
  2083  000ACE  ECDF  F00B         	call	_LCD_Write_Char
  2084                           
  2085                           ;Main.c: 192: LCD_Write_Char(RTC_data[6] % 10 + 48);
  2086  000AD2  EE20 F006          	lfsr	2,6
  2087  000AD6  5026               	movf	showClock@RTC_data,w,c
  2088  000AD8  26D9               	addwf	fsr2l,f,c
  2089  000ADA  5027               	movf	showClock@RTC_data+1,w,c
  2090  000ADC  22DA               	addwfc	fsr2h,f,c
  2091  000ADE  50DF               	movf	indf2,w,c
  2092  000AE0  6E28               	movwf	??_showClock& (0+255),c
  2093  000AE2  5028               	movf	??_showClock,w,c
  2094  000AE4  6E1B               	movwf	___awmod@dividend,c
  2095  000AE6  6A1C               	clrf	___awmod@dividend+1,c
  2096  000AE8  0E00               	movlw	0
  2097  000AEA  6E1E               	movwf	___awmod@divisor+1,c
  2098  000AEC  0E0A               	movlw	10
  2099  000AEE  6E1D               	movwf	___awmod@divisor,c
  2100  000AF0  EC6D  F00A         	call	___awmod	;wreg free
  2101  000AF4  501B               	movf	?___awmod,w,c
  2102  000AF6  0F30               	addlw	48
  2103  000AF8  ECDF  F00B         	call	_LCD_Write_Char
  2104  000AFC  0012               	return		;funcret
  2105  000AFE                     __end_of_showClock:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           tblptrl	equ	0xFF6
  2110                           tablat	equ	0xFF5
  2111                           prodh	equ	0xFF4
  2112                           prodl	equ	0xFF3
  2113                           intcon	equ	0xFF2
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           indf2	equ	0xFDF
  2117                           postinc2	equ	0xFDE
  2118                           postdec2	equ	0xFDD
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function ___awmod *****************
  2124 ;; Defined at:
  2125 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  dividend        2   26[COMRAM] int 
  2128 ;;  divisor         2   28[COMRAM] int 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  sign            1   31[COMRAM] unsigned char 
  2131 ;;  counter         1   30[COMRAM] unsigned char 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  2   26[COMRAM] int 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, status,0
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2141 ;;      Params:         4       0       0       0       0       0       0       0       0
  2142 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2143 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2144 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2145 ;;Total ram usage:        6 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    4
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		_showClock
  2152 ;;		_showLoadScreen
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text7
  2157  0014DA                     __ptext7:
  2158                           	opt stack 0
  2159  0014DA                     ___awmod:
  2160                           	opt stack 25
  2161                           
  2162                           ;incstack = 0
  2163  0014DA  0E00               	movlw	0
  2164  0014DC  6E20               	movwf	___awmod@sign,c
  2165  0014DE  AE1C               	btfss	___awmod@dividend+1,7,c
  2166  0014E0  D006               	goto	l2703
  2167  0014E2  6C1B               	negf	___awmod@dividend,c
  2168  0014E4  1E1C               	comf	___awmod@dividend+1,f,c
  2169  0014E6  B0D8               	btfsc	status,0,c
  2170  0014E8  2A1C               	incf	___awmod@dividend+1,f,c
  2171  0014EA  0E01               	movlw	1
  2172  0014EC  6E20               	movwf	___awmod@sign,c
  2173  0014EE                     l2703:
  2174  0014EE  AE1E               	btfss	___awmod@divisor+1,7,c
  2175  0014F0  D004               	goto	l2707
  2176  0014F2  6C1D               	negf	___awmod@divisor,c
  2177  0014F4  1E1E               	comf	___awmod@divisor+1,f,c
  2178  0014F6  B0D8               	btfsc	status,0,c
  2179  0014F8  2A1E               	incf	___awmod@divisor+1,f,c
  2180  0014FA                     l2707:
  2181  0014FA  501D               	movf	___awmod@divisor,w,c
  2182  0014FC  101E               	iorwf	___awmod@divisor+1,w,c
  2183  0014FE  B4D8               	btfsc	status,2,c
  2184  001500  D018               	goto	l2723
  2185  001502  0E01               	movlw	1
  2186  001504  6E1F               	movwf	___awmod@counter,c
  2187  001506  D004               	goto	l2713
  2188  001508                     l2711:
  2189  001508  90D8               	bcf	status,0,c
  2190  00150A  361D               	rlcf	___awmod@divisor,f,c
  2191  00150C  361E               	rlcf	___awmod@divisor+1,f,c
  2192  00150E  2A1F               	incf	___awmod@counter,f,c
  2193  001510                     l2713:
  2194  001510  AE1E               	btfss	___awmod@divisor+1,7,c
  2195  001512  D7FA               	goto	l2711
  2196  001514                     l2715:
  2197  001514  501D               	movf	___awmod@divisor,w,c
  2198  001516  5C1B               	subwf	___awmod@dividend,w,c
  2199  001518  501E               	movf	___awmod@divisor+1,w,c
  2200  00151A  581C               	subwfb	___awmod@dividend+1,w,c
  2201  00151C  A0D8               	btfss	status,0,c
  2202  00151E  D004               	goto	l2719
  2203  001520  501D               	movf	___awmod@divisor,w,c
  2204  001522  5E1B               	subwf	___awmod@dividend,f,c
  2205  001524  501E               	movf	___awmod@divisor+1,w,c
  2206  001526  5A1C               	subwfb	___awmod@dividend+1,f,c
  2207  001528                     l2719:
  2208  001528  90D8               	bcf	status,0,c
  2209  00152A  321E               	rrcf	___awmod@divisor+1,f,c
  2210  00152C  321D               	rrcf	___awmod@divisor,f,c
  2211  00152E  2E1F               	decfsz	___awmod@counter,f,c
  2212  001530  D7F1               	goto	l2715
  2213  001532                     l2723:
  2214  001532  5020               	movf	___awmod@sign,w,c
  2215  001534  B4D8               	btfsc	status,2,c
  2216  001536  D004               	goto	l2727
  2217  001538  6C1B               	negf	___awmod@dividend,c
  2218  00153A  1E1C               	comf	___awmod@dividend+1,f,c
  2219  00153C  B0D8               	btfsc	status,0,c
  2220  00153E  2A1C               	incf	___awmod@dividend+1,f,c
  2221  001540                     l2727:
  2222  001540  C01B  F01B         	movff	___awmod@dividend,?___awmod
  2223  001544  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  2224  001548  0012               	return	
  2225  00154A                     __end_of___awmod:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           indf2	equ	0xFDF
  2237                           postinc2	equ	0xFDE
  2238                           postdec2	equ	0xFDD
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function ___awdiv *****************
  2244 ;; Defined at:
  2245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;  dividend        2   26[COMRAM] int 
  2248 ;;  divisor         2   28[COMRAM] int 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;  quotient        2   32[COMRAM] int 
  2251 ;;  sign            1   31[COMRAM] unsigned char 
  2252 ;;  counter         1   30[COMRAM] unsigned char 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  2   26[COMRAM] int 
  2255 ;; Registers used:
  2256 ;;		wreg, status,2, status,0
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2262 ;;      Params:         4       0       0       0       0       0       0       0       0
  2263 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2265 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2266 ;;Total ram usage:        8 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    4
  2269 ;; This function calls:
  2270 ;;		Nothing
  2271 ;; This function is called by:
  2272 ;;		_showClock
  2273 ;;		_showLoadScreen
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text8
  2278  00127E                     __ptext8:
  2279                           	opt stack 0
  2280  00127E                     ___awdiv:
  2281                           	opt stack 25
  2282                           
  2283                           ;incstack = 0
  2284  00127E  0E00               	movlw	0
  2285  001280  6E20               	movwf	___awdiv@sign,c
  2286  001282  AE1E               	btfss	___awdiv@divisor+1,7,c
  2287  001284  D006               	goto	l2659
  2288  001286  6C1D               	negf	___awdiv@divisor,c
  2289  001288  1E1E               	comf	___awdiv@divisor+1,f,c
  2290  00128A  B0D8               	btfsc	status,0,c
  2291  00128C  2A1E               	incf	___awdiv@divisor+1,f,c
  2292  00128E  0E01               	movlw	1
  2293  001290  6E20               	movwf	___awdiv@sign,c
  2294  001292                     l2659:
  2295  001292  AE1C               	btfss	___awdiv@dividend+1,7,c
  2296  001294  D006               	goto	l2665
  2297  001296  6C1B               	negf	___awdiv@dividend,c
  2298  001298  1E1C               	comf	___awdiv@dividend+1,f,c
  2299  00129A  B0D8               	btfsc	status,0,c
  2300  00129C  2A1C               	incf	___awdiv@dividend+1,f,c
  2301  00129E  0E01               	movlw	1
  2302  0012A0  1A20               	xorwf	___awdiv@sign,f,c
  2303  0012A2                     l2665:
  2304  0012A2  0E00               	movlw	0
  2305  0012A4  6E22               	movwf	___awdiv@quotient+1,c
  2306  0012A6  0E00               	movlw	0
  2307  0012A8  6E21               	movwf	___awdiv@quotient,c
  2308  0012AA  501D               	movf	___awdiv@divisor,w,c
  2309  0012AC  101E               	iorwf	___awdiv@divisor+1,w,c
  2310  0012AE  B4D8               	btfsc	status,2,c
  2311  0012B0  D01C               	goto	l2687
  2312  0012B2  0E01               	movlw	1
  2313  0012B4  6E1F               	movwf	___awdiv@counter,c
  2314  0012B6  D004               	goto	l2673
  2315  0012B8                     l2671:
  2316  0012B8  90D8               	bcf	status,0,c
  2317  0012BA  361D               	rlcf	___awdiv@divisor,f,c
  2318  0012BC  361E               	rlcf	___awdiv@divisor+1,f,c
  2319  0012BE  2A1F               	incf	___awdiv@counter,f,c
  2320  0012C0                     l2673:
  2321  0012C0  AE1E               	btfss	___awdiv@divisor+1,7,c
  2322  0012C2  D7FA               	goto	l2671
  2323  0012C4                     l2675:
  2324  0012C4  90D8               	bcf	status,0,c
  2325  0012C6  3621               	rlcf	___awdiv@quotient,f,c
  2326  0012C8  3622               	rlcf	___awdiv@quotient+1,f,c
  2327  0012CA  501D               	movf	___awdiv@divisor,w,c
  2328  0012CC  5C1B               	subwf	___awdiv@dividend,w,c
  2329  0012CE  501E               	movf	___awdiv@divisor+1,w,c
  2330  0012D0  581C               	subwfb	___awdiv@dividend+1,w,c
  2331  0012D2  A0D8               	btfss	status,0,c
  2332  0012D4  D005               	goto	l2683
  2333  0012D6  501D               	movf	___awdiv@divisor,w,c
  2334  0012D8  5E1B               	subwf	___awdiv@dividend,f,c
  2335  0012DA  501E               	movf	___awdiv@divisor+1,w,c
  2336  0012DC  5A1C               	subwfb	___awdiv@dividend+1,f,c
  2337  0012DE  8021               	bsf	___awdiv@quotient,0,c
  2338  0012E0                     l2683:
  2339  0012E0  90D8               	bcf	status,0,c
  2340  0012E2  321E               	rrcf	___awdiv@divisor+1,f,c
  2341  0012E4  321D               	rrcf	___awdiv@divisor,f,c
  2342  0012E6  2E1F               	decfsz	___awdiv@counter,f,c
  2343  0012E8  D7ED               	goto	l2675
  2344  0012EA                     l2687:
  2345  0012EA  5020               	movf	___awdiv@sign,w,c
  2346  0012EC  B4D8               	btfsc	status,2,c
  2347  0012EE  D004               	goto	l2691
  2348  0012F0  6C21               	negf	___awdiv@quotient,c
  2349  0012F2  1E22               	comf	___awdiv@quotient+1,f,c
  2350  0012F4  B0D8               	btfsc	status,0,c
  2351  0012F6  2A22               	incf	___awdiv@quotient+1,f,c
  2352  0012F8                     l2691:
  2353  0012F8  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  2354  0012FC  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  2355  001300  0012               	return	
  2356  001302                     __end_of___awdiv:
  2357                           	opt stack 0
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           intcon	equ	0xFF2
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _LCD_Write_String *****************
  2375 ;; Defined at:
  2376 ;;		line 78 in file "LCD.h"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  str             2   31[COMRAM] PTR unsigned char 
  2379 ;;		 -> STR_12(16), STR_11(15), STR_10(16), showLoadScreen@s(10), 
  2380 ;;		 -> STR_7(11), STR_6(16), STR_5(17), STR_4(4), 
  2381 ;;		 -> STR_3(17), STR_2(17), STR_1(17), uartBuffer(16), 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  i               2   35[COMRAM] int 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2393 ;;      Params:         2       0       0       0       0       0       0       0       0
  2394 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2395 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2396 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2397 ;;Total ram usage:        6 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    6
  2400 ;; This function calls:
  2401 ;;		_LCD_Write_Char
  2402 ;; This function is called by:
  2403 ;;		_showClock
  2404 ;;		_showLoadScreen
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text9
  2410  001384                     __ptext9:
  2411                           	opt stack 0
  2412  001384                     _LCD_Write_String:
  2413                           	opt stack 23
  2414                           
  2415                           ;LCD.h: 80: int i;
  2416                           ;LCD.h: 81: for(i = 0; str[i] != '\0'; ++i)
  2417                           
  2418                           ;incstack = 0
  2419  001384  0E00               	movlw	0
  2420  001386  6E25               	movwf	LCD_Write_String@i+1,c
  2421  001388  0E00               	movlw	0
  2422  00138A  6E24               	movwf	LCD_Write_String@i,c
  2423  00138C  D01A               	goto	l2595
  2424  00138E                     l2591:
  2425                           
  2426                           ;LCD.h: 82: LCD_Write_Char(str[i]);
  2427  00138E  5024               	movf	LCD_Write_String@i,w,c
  2428  001390  2420               	addwf	LCD_Write_String@str,w,c
  2429  001392  6E22               	movwf	??_LCD_Write_String& (0+255),c
  2430  001394  5025               	movf	LCD_Write_String@i+1,w,c
  2431  001396  2021               	addwfc	LCD_Write_String@str+1,w,c
  2432  001398  6E23               	movwf	(??_LCD_Write_String+1)& (0+255),c
  2433  00139A  C022  FFF6         	movff	??_LCD_Write_String,tblptrl
  2434  00139E  C023  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2435  0013A2  6AF8               	clrf	tblptru,c
  2436  0013A4  0E07               	movlw	(high __ramtop+-1)
  2437  0013A6  64F7               	cpfsgt	tblptrh,c
  2438  0013A8  D003               	bra	u2197
  2439  0013AA  0008               	tblrd		*
  2440  0013AC  50F5               	movf	tablat,w,c
  2441  0013AE  D005               	bra	u2190
  2442  0013B0                     u2197:
  2443  0013B0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2444  0013B4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2445  0013B8  50EF               	movf	indf0,w,c
  2446  0013BA                     u2190:
  2447  0013BA  ECDF  F00B         	call	_LCD_Write_Char
  2448  0013BE  4A24               	infsnz	LCD_Write_String@i,f,c
  2449  0013C0  2A25               	incf	LCD_Write_String@i+1,f,c
  2450  0013C2                     l2595:
  2451  0013C2  5024               	movf	LCD_Write_String@i,w,c
  2452  0013C4  2420               	addwf	LCD_Write_String@str,w,c
  2453  0013C6  6E22               	movwf	??_LCD_Write_String& (0+255),c
  2454  0013C8  5025               	movf	LCD_Write_String@i+1,w,c
  2455  0013CA  2021               	addwfc	LCD_Write_String@str+1,w,c
  2456  0013CC  6E23               	movwf	(??_LCD_Write_String+1)& (0+255),c
  2457  0013CE  C022  FFF6         	movff	??_LCD_Write_String,tblptrl
  2458  0013D2  C023  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2459  0013D6  6AF8               	clrf	tblptru,c
  2460  0013D8  0E07               	movlw	(high __ramtop+-1)
  2461  0013DA  64F7               	cpfsgt	tblptrh,c
  2462  0013DC  D003               	bra	u2207
  2463  0013DE  0008               	tblrd		*
  2464  0013E0  50F5               	movf	tablat,w,c
  2465  0013E2  D005               	bra	u2200
  2466  0013E4                     u2207:
  2467  0013E4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2468  0013E8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2469  0013EC  50EF               	movf	indf0,w,c
  2470  0013EE                     u2200:
  2471  0013EE  0900               	iorlw	0
  2472  0013F0  B4D8               	btfsc	status,2,c
  2473  0013F2  0012               	return	
  2474  0013F4  D7CC               	goto	l2591
  2475  0013F6                     __end_of_LCD_Write_String:
  2476                           	opt stack 0
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           prodh	equ	0xFF4
  2482                           prodl	equ	0xFF3
  2483                           intcon	equ	0xFF2
  2484                           indf0	equ	0xFEF
  2485                           postinc0	equ	0xFEE
  2486                           fsr0h	equ	0xFEA
  2487                           fsr0l	equ	0xFE9
  2488                           wreg	equ	0xFE8
  2489                           indf2	equ	0xFDF
  2490                           postinc2	equ	0xFDE
  2491                           postdec2	equ	0xFDD
  2492                           fsr2h	equ	0xFDA
  2493                           fsr2l	equ	0xFD9
  2494                           status	equ	0xFD8
  2495                           
  2496 ;; *************** function _LCD_Write_Char *****************
  2497 ;; Defined at:
  2498 ;;		line 63 in file "LCD.h"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  c               1    wreg     unsigned char 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  c               1   30[COMRAM] unsigned char 
  2503 ;;  y               1   29[COMRAM] unsigned char 
  2504 ;;  temp            1   28[COMRAM] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2514 ;;      Params:         0       0       0       0       0       0       0       0       0
  2515 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2517 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2518 ;;Total ram usage:        3 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    5
  2521 ;; This function calls:
  2522 ;;		_LCD_Port
  2523 ;; This function is called by:
  2524 ;;		_LCD_Write_String
  2525 ;;		_showClock
  2526 ;;		_showLoadScreen
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text10
  2531  0017BE                     __ptext10:
  2532                           	opt stack 0
  2533  0017BE                     _LCD_Write_Char:
  2534                           	opt stack 23
  2535                           
  2536                           ;incstack = 0
  2537                           ;LCD_Write_Char@c stored from wreg
  2538  0017BE  6E1F               	movwf	LCD_Write_Char@c,c
  2539                           
  2540                           ;LCD.h: 65: char temp = c & 0x0F;
  2541  0017C0  501F               	movf	LCD_Write_Char@c,w,c
  2542  0017C2  0B0F               	andlw	15
  2543  0017C4  6E1D               	movwf	LCD_Write_Char@temp,c
  2544                           
  2545                           ;LCD.h: 66: char y = c & 0xF0;
  2546  0017C6  501F               	movf	LCD_Write_Char@c,w,c
  2547  0017C8  0BF0               	andlw	240
  2548  0017CA  6E1E               	movwf	LCD_Write_Char@y,c
  2549                           
  2550                           ;LCD.h: 67: PORTBbits.RB2 = 1;
  2551  0017CC  8481               	bsf	3969,2,c	;volatile
  2552                           
  2553                           ;LCD.h: 68: LCD_Port(y >> 4);
  2554  0017CE  381E               	swapf	LCD_Write_Char@y,w,c
  2555  0017D0  0B0F               	andlw	15
  2556  0017D2  ECA5  F00A         	call	_LCD_Port
  2557                           
  2558                           ;LCD.h: 69: PORTBbits.RB4 = 1;
  2559  0017D6  8881               	bsf	3969,4,c	;volatile
  2560                           
  2561                           ;LCD.h: 70: _delay((unsigned long)((40)*(20000000UL/4000000.0)));
  2562  0017D8  0E42               	movlw	66
  2563  0017DA                     u2657:
  2564  0017DA  2EE8               	decfsz	wreg,f,c
  2565  0017DC  D7FE               	goto	u2657
  2566  0017DE  D000               	nop2		;nop
  2567                           
  2568                           ;LCD.h: 71: PORTBbits.RB4 = 0;
  2569  0017E0  9881               	bcf	3969,4,c	;volatile
  2570                           
  2571                           ;LCD.h: 72: LCD_Port(temp);
  2572  0017E2  501D               	movf	LCD_Write_Char@temp,w,c
  2573  0017E4  ECA5  F00A         	call	_LCD_Port
  2574                           
  2575                           ;LCD.h: 73: PORTBbits.RB4 = 1;
  2576  0017E8  8881               	bsf	3969,4,c	;volatile
  2577                           
  2578                           ;LCD.h: 74: _delay((unsigned long)((40)*(20000000UL/4000000.0)));
  2579  0017EA  0E42               	movlw	66
  2580  0017EC                     u2667:
  2581  0017EC  2EE8               	decfsz	wreg,f,c
  2582  0017EE  D7FE               	goto	u2667
  2583  0017F0  D000               	nop2		;nop
  2584                           
  2585                           ;LCD.h: 75: PORTBbits.RB4 = 0;
  2586  0017F2  9881               	bcf	3969,4,c	;volatile
  2587  0017F4  0012               	return		;funcret
  2588  0017F6                     __end_of_LCD_Write_Char:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon	equ	0xFF2
  2597                           indf0	equ	0xFEF
  2598                           postinc0	equ	0xFEE
  2599                           fsr0h	equ	0xFEA
  2600                           fsr0l	equ	0xFE9
  2601                           wreg	equ	0xFE8
  2602                           indf2	equ	0xFDF
  2603                           postinc2	equ	0xFDE
  2604                           postdec2	equ	0xFDD
  2605                           fsr2h	equ	0xFDA
  2606                           fsr2l	equ	0xFD9
  2607                           status	equ	0xFD8
  2608                           
  2609 ;; *************** function _LCD_Set_Cursor *****************
  2610 ;; Defined at:
  2611 ;;		line 27 in file "LCD.h"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;  y               1    wreg     unsigned char 
  2614 ;;  x               1   30[COMRAM] unsigned char 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  y               1   31[COMRAM] unsigned char 
  2617 ;;  temp            1   34[COMRAM] unsigned char 
  2618 ;;  t               1   33[COMRAM] unsigned char 
  2619 ;;  z               1   32[COMRAM] unsigned char 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2629 ;;      Params:         1       0       0       0       0       0       0       0       0
  2630 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2632 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2633 ;;Total ram usage:        5 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    6
  2636 ;; This function calls:
  2637 ;;		_LCD_Cmd
  2638 ;; This function is called by:
  2639 ;;		_showClock
  2640 ;;		_showLoadScreen
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text11
  2645  0016DC                     __ptext11:
  2646                           	opt stack 0
  2647  0016DC                     _LCD_Set_Cursor:
  2648                           	opt stack 23
  2649                           
  2650                           ;incstack = 0
  2651                           ;LCD_Set_Cursor@y stored from wreg
  2652  0016DC  6E20               	movwf	LCD_Set_Cursor@y,c
  2653                           
  2654                           ;LCD.h: 29: char temp, z, t;
  2655                           ;LCD.h: 30: if (y == 1) {
  2656  0016DE  0420               	decf	LCD_Set_Cursor@y,w,c
  2657  0016E0  A4D8               	btfss	status,2,c
  2658  0016E2  D010               	goto	l2581
  2659                           
  2660                           ;LCD.h: 31: temp = 0x80 + x - 1;
  2661  0016E4  501F               	movf	LCD_Set_Cursor@x,w,c
  2662  0016E6  0F7F               	addlw	127
  2663  0016E8  6E23               	movwf	LCD_Set_Cursor@temp,c
  2664                           
  2665                           ;LCD.h: 32: z = temp >> 4;
  2666  0016EA  3823               	swapf	LCD_Set_Cursor@temp,w,c
  2667  0016EC  0B0F               	andlw	15
  2668  0016EE  6E21               	movwf	LCD_Set_Cursor@z,c
  2669                           
  2670                           ;LCD.h: 33: t = temp & 0x0F;
  2671  0016F0  5023               	movf	LCD_Set_Cursor@temp,w,c
  2672  0016F2  0B0F               	andlw	15
  2673  0016F4  6E22               	movwf	LCD_Set_Cursor@t,c
  2674                           
  2675                           ;LCD.h: 34: LCD_Cmd(z);
  2676  0016F6  5021               	movf	LCD_Set_Cursor@z,w,c
  2677  0016F8  EC7B  F00C         	call	_LCD_Cmd
  2678                           
  2679                           ;LCD.h: 35: LCD_Cmd(t);
  2680  0016FC  5022               	movf	LCD_Set_Cursor@t,w,c
  2681  0016FE  EC7B  F00C         	call	_LCD_Cmd
  2682                           
  2683                           ;LCD.h: 36: } else if (y == 2) {
  2684  001702  0012               	return	
  2685  001704                     l2581:
  2686  001704  0E02               	movlw	2
  2687  001706  1820               	xorwf	LCD_Set_Cursor@y,w,c
  2688  001708  A4D8               	btfss	status,2,c
  2689  00170A  0012               	return	
  2690                           
  2691                           ;LCD.h: 37: temp = 0xC0 + x - 1;
  2692  00170C  501F               	movf	LCD_Set_Cursor@x,w,c
  2693  00170E  0FBF               	addlw	191
  2694  001710  6E23               	movwf	LCD_Set_Cursor@temp,c
  2695                           
  2696                           ;LCD.h: 38: z = temp >> 4;
  2697  001712  3823               	swapf	LCD_Set_Cursor@temp,w,c
  2698  001714  0B0F               	andlw	15
  2699  001716  6E21               	movwf	LCD_Set_Cursor@z,c
  2700                           
  2701                           ;LCD.h: 39: t = temp & 0x0F;
  2702  001718  5023               	movf	LCD_Set_Cursor@temp,w,c
  2703  00171A  0B0F               	andlw	15
  2704  00171C  6E22               	movwf	LCD_Set_Cursor@t,c
  2705                           
  2706                           ;LCD.h: 40: LCD_Cmd(z);
  2707  00171E  5021               	movf	LCD_Set_Cursor@z,w,c
  2708  001720  EC7B  F00C         	call	_LCD_Cmd
  2709                           
  2710                           ;LCD.h: 41: LCD_Cmd(t);
  2711  001724  5022               	movf	LCD_Set_Cursor@t,w,c
  2712  001726  EC7B  F00C         	call	_LCD_Cmd
  2713  00172A  0012               	return	
  2714  00172C                     __end_of_LCD_Set_Cursor:
  2715                           	opt stack 0
  2716                           tblptru	equ	0xFF8
  2717                           tblptrh	equ	0xFF7
  2718                           tblptrl	equ	0xFF6
  2719                           tablat	equ	0xFF5
  2720                           prodh	equ	0xFF4
  2721                           prodl	equ	0xFF3
  2722                           intcon	equ	0xFF2
  2723                           indf0	equ	0xFEF
  2724                           postinc0	equ	0xFEE
  2725                           fsr0h	equ	0xFEA
  2726                           fsr0l	equ	0xFE9
  2727                           wreg	equ	0xFE8
  2728                           indf2	equ	0xFDF
  2729                           postinc2	equ	0xFDE
  2730                           postdec2	equ	0xFDD
  2731                           fsr2h	equ	0xFDA
  2732                           fsr2l	equ	0xFD9
  2733                           status	equ	0xFD8
  2734                           
  2735 ;; *************** function _LCD_Clear *****************
  2736 ;; Defined at:
  2737 ;;		line 21 in file "LCD.h"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;		None
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0, cstack
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2751 ;;      Params:         0       0       0       0       0       0       0       0       0
  2752 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2754 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2755 ;;Total ram usage:        0 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    6
  2758 ;; This function calls:
  2759 ;;		_LCD_Cmd
  2760 ;; This function is called by:
  2761 ;;		_showClock
  2762 ;;		_showLoadScreen
  2763 ;;		_main
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text12
  2768  0019A8                     __ptext12:
  2769                           	opt stack 0
  2770  0019A8                     _LCD_Clear:
  2771                           	opt stack 23
  2772                           
  2773                           ;LCD.h: 23: LCD_Cmd(0);
  2774                           
  2775                           ;incstack = 0
  2776  0019A8  0E00               	movlw	0
  2777  0019AA  EC7B  F00C         	call	_LCD_Cmd
  2778                           
  2779                           ;LCD.h: 24: LCD_Cmd(1);
  2780  0019AE  0E01               	movlw	1
  2781  0019B0  EC7B  F00C         	call	_LCD_Cmd
  2782  0019B4  0012               	return		;funcret
  2783  0019B6                     __end_of_LCD_Clear:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           prodh	equ	0xFF4
  2790                           prodl	equ	0xFF3
  2791                           intcon	equ	0xFF2
  2792                           indf0	equ	0xFEF
  2793                           postinc0	equ	0xFEE
  2794                           fsr0h	equ	0xFEA
  2795                           fsr0l	equ	0xFE9
  2796                           wreg	equ	0xFE8
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           postdec2	equ	0xFDD
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _ds1307_getData *****************
  2805 ;; Defined at:
  2806 ;;		line 109 in file "DS1307.h"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  buffer          2   29[COMRAM] PTR unsigned char 
  2809 ;;		 -> main@RTC_data(8), 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  j               2   31[COMRAM] int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         2       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        4 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    6
  2828 ;; This function calls:
  2829 ;;		_I2CAck
  2830 ;;		_I2CNak
  2831 ;;		_I2CRead
  2832 ;;		_I2CRestart
  2833 ;;		_I2CSend
  2834 ;;		_I2CStart
  2835 ;;		_I2CStop
  2836 ;;		_bcd2bin
  2837 ;; This function is called by:
  2838 ;;		_main
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           	psect	text13
  2843  001622                     __ptext13:
  2844                           	opt stack 0
  2845  001622                     _ds1307_getData:
  2846                           	opt stack 24
  2847                           
  2848                           ;DS1307.h: 111: I2CStart();
  2849                           
  2850                           ;incstack = 0
  2851  001622  ECF7  F00C         	call	_I2CStart	;wreg free
  2852                           
  2853                           ;DS1307.h: 112: I2CSend(0xD0);
  2854  001626  0ED0               	movlw	208
  2855  001628  ECBC  F00C         	call	_I2CSend
  2856                           
  2857                           ;DS1307.h: 113: I2CSend(0x00);
  2858  00162C  0E00               	movlw	0
  2859  00162E  ECBC  F00C         	call	_I2CSend
  2860                           
  2861                           ;DS1307.h: 114: I2CRestart();
  2862  001632  ECFB  F00C         	call	_I2CRestart	;wreg free
  2863                           
  2864                           ;DS1307.h: 115: I2CSend(0xD1);
  2865  001636  0ED1               	movlw	209
  2866  001638  ECBC  F00C         	call	_I2CSend
  2867                           
  2868                           ;DS1307.h: 118: for (int j = 0; j < 8; ++j) {
  2869  00163C  0E00               	movlw	0
  2870  00163E  6E21               	movwf	ds1307_getData@j+1,c
  2871  001640  0E00               	movlw	0
  2872  001642  6E20               	movwf	ds1307_getData@j,c
  2873  001644                     l2139:
  2874  001644  BE21               	btfsc	ds1307_getData@j+1,7,c
  2875  001646  D006               	goto	l2143
  2876  001648  5021               	movf	ds1307_getData@j+1,w,c
  2877  00164A  E11C               	bnz	l2155
  2878  00164C  0E08               	movlw	8
  2879  00164E  5C20               	subwf	ds1307_getData@j,w,c
  2880  001650  B0D8               	btfsc	status,0,c
  2881  001652  D018               	goto	l2155
  2882  001654                     l2143:
  2883                           
  2884                           ;DS1307.h: 119: buffer[j] = bcd2bin(I2CRead());
  2885  001654  5020               	movf	ds1307_getData@j,w,c
  2886  001656  241E               	addwf	ds1307_getData@buffer,w,c
  2887  001658  6ED9               	movwf	fsr2l,c
  2888  00165A  5021               	movf	ds1307_getData@j+1,w,c
  2889  00165C  201F               	addwfc	ds1307_getData@buffer+1,w,c
  2890  00165E  6EDA               	movwf	fsr2h,c
  2891  001660  ECDB  F00C         	call	_I2CRead	;wreg free
  2892  001664  EC59  F00C         	call	_bcd2bin
  2893  001668  6EDF               	movwf	indf2,c
  2894                           
  2895                           ;DS1307.h: 122: if (j == 7)
  2896  00166A  0E07               	movlw	7
  2897  00166C  1820               	xorwf	ds1307_getData@j,w,c
  2898  00166E  1021               	iorwf	ds1307_getData@j+1,w,c
  2899  001670  A4D8               	btfss	status,2,c
  2900  001672  D003               	goto	l2149
  2901                           
  2902                           ;DS1307.h: 123: I2CNak();
  2903  001674  ECE9  F00C         	call	_I2CNak	;wreg free
  2904  001678  D002               	goto	l2151
  2905  00167A                     l2149:
  2906                           
  2907                           ;DS1307.h: 124: else
  2908                           ;DS1307.h: 125: I2CAck();
  2909  00167A  ECEE  F00C         	call	_I2CAck	;wreg free
  2910  00167E                     l2151:
  2911  00167E  4A20               	infsnz	ds1307_getData@j,f,c
  2912  001680  2A21               	incf	ds1307_getData@j+1,f,c
  2913  001682  D7E0               	goto	l2139
  2914  001684                     l2155:
  2915                           
  2916                           ;DS1307.h: 126: }
  2917                           ;DS1307.h: 128: I2CStop();
  2918  001684  ECF3  F00C         	call	_I2CStop	;wreg free
  2919  001688  0012               	return		;funcret
  2920  00168A                     __end_of_ds1307_getData:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           prodh	equ	0xFF4
  2927                           prodl	equ	0xFF3
  2928                           intcon	equ	0xFF2
  2929                           indf0	equ	0xFEF
  2930                           postinc0	equ	0xFEE
  2931                           fsr0h	equ	0xFEA
  2932                           fsr0l	equ	0xFE9
  2933                           wreg	equ	0xFE8
  2934                           indf2	equ	0xFDF
  2935                           postinc2	equ	0xFDE
  2936                           postdec2	equ	0xFDD
  2937                           fsr2h	equ	0xFDA
  2938                           fsr2l	equ	0xFD9
  2939                           status	equ	0xFD8
  2940                           
  2941 ;; *************** function _bcd2bin *****************
  2942 ;; Defined at:
  2943 ;;		line 6 in file "DS1307.h"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  bcd_value       1    wreg     unsigned char 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  bcd_value       1   27[COMRAM] unsigned char 
  2948 ;;  temp            1   28[COMRAM] unsigned char 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  1    wreg      unsigned char 
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2958 ;;      Params:         0       0       0       0       0       0       0       0       0
  2959 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2960 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2961 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2962 ;;Total ram usage:        3 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:    4
  2965 ;; This function calls:
  2966 ;;		Nothing
  2967 ;; This function is called by:
  2968 ;;		_ds1307_getData
  2969 ;;		_ds1307_Init
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text14
  2974  0018B2                     __ptext14:
  2975                           	opt stack 0
  2976  0018B2                     _bcd2bin:
  2977                           	opt stack 25
  2978                           
  2979                           ;incstack = 0
  2980                           ;bcd2bin@bcd_value stored from wreg
  2981  0018B2  6E1C               	movwf	bcd2bin@bcd_value,c
  2982                           
  2983                           ;DS1307.h: 8: unsigned char temp;
  2984                           ;DS1307.h: 9: temp = bcd_value;
  2985  0018B4  C01C  F01D         	movff	bcd2bin@bcd_value,bcd2bin@temp
  2986                           
  2987                           ;DS1307.h: 10: temp >>= 1;
  2988  0018B8  90D8               	bcf	status,0,c
  2989  0018BA  321D               	rrcf	bcd2bin@temp,f,c
  2990                           
  2991                           ;DS1307.h: 11: temp &= 0x78;
  2992  0018BC  0E78               	movlw	120
  2993  0018BE  161D               	andwf	bcd2bin@temp,f,c
  2994                           
  2995                           ;DS1307.h: 12: return(temp + (temp >> 2) + (bcd_value & 0x0f));
  2996  0018C0  C01C  F01B         	movff	bcd2bin@bcd_value,??_bcd2bin
  2997  0018C4  0E0F               	movlw	15
  2998  0018C6  161B               	andwf	??_bcd2bin,f,c
  2999  0018C8  401D               	rrncf	bcd2bin@temp,w,c
  3000  0018CA  42E8               	rrncf	wreg,f,c
  3001  0018CC  0B3F               	andlw	63
  3002  0018CE  241B               	addwf	??_bcd2bin,w,c
  3003  0018D0  241D               	addwf	bcd2bin@temp,w,c
  3004  0018D2  0012               	return	
  3005  0018D4                     __end_of_bcd2bin:
  3006                           	opt stack 0
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           prodh	equ	0xFF4
  3012                           prodl	equ	0xFF3
  3013                           intcon	equ	0xFF2
  3014                           indf0	equ	0xFEF
  3015                           postinc0	equ	0xFEE
  3016                           fsr0h	equ	0xFEA
  3017                           fsr0l	equ	0xFE9
  3018                           wreg	equ	0xFE8
  3019                           indf2	equ	0xFDF
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _I2CStop *****************
  3027 ;; Defined at:
  3028 ;;		line 32 in file "I2C.h"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		None
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3045 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3046 ;;Total ram usage:        0 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    4
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_ds1307_getData
  3053 ;;		_ds1307_Init
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text15
  3058  0019E6                     __ptext15:
  3059                           	opt stack 0
  3060  0019E6                     _I2CStop:
  3061                           	opt stack 25
  3062                           
  3063                           ;I2C.h: 34: PEN = 1;
  3064                           
  3065                           ;incstack = 0
  3066  0019E6  84C5               	bsf	4037,2,c	;volatile
  3067  0019E8                     l154:
  3068  0019E8  A4C5               	btfss	4037,2,c	;volatile
  3069  0019EA  0012               	return	
  3070  0019EC  D7FD               	goto	l154
  3071  0019EE                     __end_of_I2CStop:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           prodh	equ	0xFF4
  3078                           prodl	equ	0xFF3
  3079                           intcon	equ	0xFF2
  3080                           indf0	equ	0xFEF
  3081                           postinc0	equ	0xFEE
  3082                           fsr0h	equ	0xFEA
  3083                           fsr0l	equ	0xFE9
  3084                           wreg	equ	0xFE8
  3085                           indf2	equ	0xFDF
  3086                           postinc2	equ	0xFDE
  3087                           postdec2	equ	0xFDD
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _I2CStart *****************
  3093 ;; Defined at:
  3094 ;;		line 19 in file "I2C.h"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		None
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3108 ;;      Params:         0       0       0       0       0       0       0       0       0
  3109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3111 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3112 ;;Total ram usage:        0 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    4
  3115 ;; This function calls:
  3116 ;;		Nothing
  3117 ;; This function is called by:
  3118 ;;		_ds1307_getData
  3119 ;;		_ds1307_Init
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text16
  3124  0019EE                     __ptext16:
  3125                           	opt stack 0
  3126  0019EE                     _I2CStart:
  3127                           	opt stack 25
  3128                           
  3129                           ;I2C.h: 21: SEN = 1;
  3130                           
  3131                           ;incstack = 0
  3132  0019EE  80C5               	bsf	4037,0,c	;volatile
  3133  0019F0                     l148:
  3134  0019F0  A0C5               	btfss	4037,0,c	;volatile
  3135  0019F2  0012               	return	
  3136  0019F4  D7FD               	goto	l148
  3137  0019F6                     __end_of_I2CStart:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           indf0	equ	0xFEF
  3147                           postinc0	equ	0xFEE
  3148                           fsr0h	equ	0xFEA
  3149                           fsr0l	equ	0xFE9
  3150                           wreg	equ	0xFE8
  3151                           indf2	equ	0xFDF
  3152                           postinc2	equ	0xFDE
  3153                           postdec2	equ	0xFDD
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158 ;; *************** function _I2CSend *****************
  3159 ;; Defined at:
  3160 ;;		line 96 in file "I2C.h"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  dat             1    wreg     unsigned char 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  dat             1   27[COMRAM] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0, cstack
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3174 ;;      Params:         0       0       0       0       0       0       0       0       0
  3175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3177 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3178 ;;Total ram usage:        1 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    5
  3181 ;; This function calls:
  3182 ;;		_I2CWait
  3183 ;; This function is called by:
  3184 ;;		_ds1307_getData
  3185 ;;		_ds1307_Init
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text17
  3190  001978                     __ptext17:
  3191                           	opt stack 0
  3192  001978                     _I2CSend:
  3193                           	opt stack 24
  3194                           
  3195                           ;incstack = 0
  3196                           ;I2CSend@dat stored from wreg
  3197  001978  6E1C               	movwf	I2CSend@dat,c
  3198                           
  3199                           ;I2C.h: 98: SSPBUF = dat;
  3200  00197A  C01C  FFC9         	movff	I2CSend@dat,4041	;volatile
  3201  00197E                     l184:
  3202  00197E  B0C7               	btfsc	4039,0,c	;volatile
  3203  001980  D7FE               	goto	l184
  3204                           
  3205                           ;I2C.h: 100: I2CWait();
  3206  001982  ECAA  F00C         	call	_I2CWait	;wreg free
  3207  001986  0012               	return		;funcret
  3208  001988                     __end_of_I2CSend:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           prodh	equ	0xFF4
  3215                           prodl	equ	0xFF3
  3216                           intcon	equ	0xFF2
  3217                           indf0	equ	0xFEF
  3218                           postinc0	equ	0xFEE
  3219                           fsr0h	equ	0xFEA
  3220                           fsr0l	equ	0xFE9
  3221                           wreg	equ	0xFE8
  3222                           indf2	equ	0xFDF
  3223                           postinc2	equ	0xFDE
  3224                           postdec2	equ	0xFDD
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _I2CRestart *****************
  3230 ;; Defined at:
  3231 ;;		line 45 in file "I2C.h"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;		None
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;		None
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		None
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3245 ;;      Params:         0       0       0       0       0       0       0       0       0
  3246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3248 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3249 ;;Total ram usage:        0 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    4
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_ds1307_getData
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text18
  3260  0019F6                     __ptext18:
  3261                           	opt stack 0
  3262  0019F6                     _I2CRestart:
  3263                           	opt stack 25
  3264                           
  3265                           ;I2C.h: 47: RSEN = 1;
  3266                           
  3267                           ;incstack = 0
  3268  0019F6  82C5               	bsf	4037,1,c	;volatile
  3269  0019F8                     l160:
  3270  0019F8  A2C5               	btfss	4037,1,c	;volatile
  3271  0019FA  0012               	return	
  3272  0019FC  D7FD               	goto	l160
  3273  0019FE                     __end_of_I2CRestart:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           intcon	equ	0xFF2
  3282                           indf0	equ	0xFEF
  3283                           postinc0	equ	0xFEE
  3284                           fsr0h	equ	0xFEA
  3285                           fsr0l	equ	0xFE9
  3286                           wreg	equ	0xFE8
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8
  3293                           
  3294 ;; *************** function _I2CRead *****************
  3295 ;; Defined at:
  3296 ;;		line 109 in file "I2C.h"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;		None
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;  temp            1    0        unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      unsigned char 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2, status,0, cstack
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3310 ;;      Params:         0       0       0       0       0       0       0       0       0
  3311 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3313 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3314 ;;Total ram usage:        0 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    5
  3317 ;; This function calls:
  3318 ;;		_I2CWait
  3319 ;; This function is called by:
  3320 ;;		_ds1307_getData
  3321 ;;		_ds1307_Init
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text19
  3326  0019B6                     __ptext19:
  3327                           	opt stack 0
  3328  0019B6                     _I2CRead:
  3329                           	opt stack 24
  3330                           
  3331                           ;I2C.h: 111: unsigned char temp;
  3332                           ;I2C.h: 113: RCEN = 1;
  3333                           
  3334                           ;incstack = 0
  3335  0019B6  86C5               	bsf	4037,3,c	;volatile
  3336  0019B8                     l190:
  3337  0019B8  A0C7               	btfss	4039,0,c	;volatile
  3338  0019BA  D7FE               	goto	l190
  3339                           
  3340                           ;I2C.h: 116: I2CWait();
  3341  0019BC  ECAA  F00C         	call	_I2CWait	;wreg free
  3342                           
  3343                           ;I2C.h: 117: return SSPBUF;
  3344  0019C0  50C9               	movf	4041,w,c	;volatile
  3345  0019C2  0012               	return	
  3346  0019C4                     __end_of_I2CRead:
  3347                           	opt stack 0
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodh	equ	0xFF4
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           indf0	equ	0xFEF
  3356                           postinc0	equ	0xFEE
  3357                           fsr0h	equ	0xFEA
  3358                           fsr0l	equ	0xFE9
  3359                           wreg	equ	0xFE8
  3360                           indf2	equ	0xFDF
  3361                           postinc2	equ	0xFDE
  3362                           postdec2	equ	0xFDD
  3363                           fsr2h	equ	0xFDA
  3364                           fsr2l	equ	0xFD9
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function _I2CWait *****************
  3368 ;; Defined at:
  3369 ;;		line 83 in file "I2C.h"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;		None
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;		None
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      void 
  3376 ;; Registers used:
  3377 ;;		wreg, status,2, status,0
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3383 ;;      Params:         0       0       0       0       0       0       0       0       0
  3384 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3385 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3386 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3387 ;;Total ram usage:        1 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    4
  3390 ;; This function calls:
  3391 ;;		Nothing
  3392 ;; This function is called by:
  3393 ;;		_I2CSend
  3394 ;;		_I2CRead
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text20
  3399  001954                     __ptext20:
  3400                           	opt stack 0
  3401  001954                     _I2CWait:
  3402                           	opt stack 24
  3403  001954                     l1745:
  3404  001954  CFC5 F01B          	movff	4037,??_I2CWait	;volatile
  3405  001958  0E1F               	movlw	31
  3406  00195A  161B               	andwf	??_I2CWait,f,c
  3407  00195C  A4D8               	btfss	status,2,c
  3408  00195E  D7FA               	goto	l1745
  3409  001960  A4C7               	btfss	4039,2,c	;volatile
  3410  001962  0012               	return	
  3411  001964  D7F7               	goto	l1745
  3412  001966                     __end_of_I2CWait:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           intcon	equ	0xFF2
  3421                           indf0	equ	0xFEF
  3422                           postinc0	equ	0xFEE
  3423                           fsr0h	equ	0xFEA
  3424                           fsr0l	equ	0xFE9
  3425                           wreg	equ	0xFE8
  3426                           indf2	equ	0xFDF
  3427                           postinc2	equ	0xFDE
  3428                           postdec2	equ	0xFDD
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function _I2CNak *****************
  3434 ;; Defined at:
  3435 ;;		line 70 in file "I2C.h"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;		None
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;		None
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		None
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3449 ;;      Params:         0       0       0       0       0       0       0       0       0
  3450 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3452 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3453 ;;Total ram usage:        0 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:    4
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_ds1307_getData
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text21
  3464  0019D2                     __ptext21:
  3465                           	opt stack 0
  3466  0019D2                     _I2CNak:
  3467                           	opt stack 25
  3468                           
  3469                           ;I2C.h: 72: ACKDT = 1;
  3470                           
  3471                           ;incstack = 0
  3472  0019D2  8AC5               	bsf	4037,5,c	;volatile
  3473                           
  3474                           ;I2C.h: 73: ACKEN = 1;
  3475  0019D4  88C5               	bsf	4037,4,c	;volatile
  3476  0019D6                     l172:
  3477  0019D6  A8C5               	btfss	4037,4,c	;volatile
  3478  0019D8  0012               	return	
  3479  0019DA  D7FD               	goto	l172
  3480  0019DC                     __end_of_I2CNak:
  3481                           	opt stack 0
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           intcon	equ	0xFF2
  3489                           indf0	equ	0xFEF
  3490                           postinc0	equ	0xFEE
  3491                           fsr0h	equ	0xFEA
  3492                           fsr0l	equ	0xFE9
  3493                           wreg	equ	0xFE8
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           postdec2	equ	0xFDD
  3497                           fsr2h	equ	0xFDA
  3498                           fsr2l	equ	0xFD9
  3499                           status	equ	0xFD8
  3500                           
  3501 ;; *************** function _I2CAck *****************
  3502 ;; Defined at:
  3503 ;;		line 57 in file "I2C.h"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		None
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3517 ;;      Params:         0       0       0       0       0       0       0       0       0
  3518 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3520 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3521 ;;Total ram usage:        0 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    4
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_ds1307_getData
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text22
  3532  0019DC                     __ptext22:
  3533                           	opt stack 0
  3534  0019DC                     _I2CAck:
  3535                           	opt stack 25
  3536                           
  3537                           ;I2C.h: 59: ACKDT = 0;
  3538                           
  3539                           ;incstack = 0
  3540  0019DC  9AC5               	bcf	4037,5,c	;volatile
  3541                           
  3542                           ;I2C.h: 60: ACKEN = 1;
  3543  0019DE  88C5               	bsf	4037,4,c	;volatile
  3544  0019E0                     l166:
  3545  0019E0  A8C5               	btfss	4037,4,c	;volatile
  3546  0019E2  0012               	return	
  3547  0019E4  D7FD               	goto	l166
  3548  0019E6                     __end_of_I2CAck:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           intcon	equ	0xFF2
  3557                           indf0	equ	0xFEF
  3558                           postinc0	equ	0xFEE
  3559                           fsr0h	equ	0xFEA
  3560                           fsr0l	equ	0xFE9
  3561                           wreg	equ	0xFE8
  3562                           indf2	equ	0xFDF
  3563                           postinc2	equ	0xFDE
  3564                           postdec2	equ	0xFDD
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _UART_Init *****************
  3570 ;; Defined at:
  3571 ;;		line 4 in file "UART.h"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  baudrate        4   39[COMRAM] const long 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  x               2   43[COMRAM] unsigned int 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      unsigned char 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2, status,0, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3585 ;;      Params:         4       0       0       0       0       0       0       0       0
  3586 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3587 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3588 ;;      Totals:         6       8       0       0       0       0       0       0       0
  3589 ;;Total ram usage:       14 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    5
  3592 ;; This function calls:
  3593 ;;		___lldiv
  3594 ;; This function is called by:
  3595 ;;		_main
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text23
  3600  000EC0                     __ptext23:
  3601                           	opt stack 0
  3602  000EC0                     _UART_Init:
  3603                           	opt stack 25
  3604                           
  3605                           ;UART.h: 6: unsigned int x;
  3606                           ;UART.h: 7: x = (20000000UL - baudrate*64)/(baudrate*64);
  3607                           
  3608                           ;incstack = 0
  3609  000EC0  C028  F060         	movff	UART_Init@baudrate,??_UART_Init
  3610  000EC4  C029  F061         	movff	UART_Init@baudrate+1,??_UART_Init+1
  3611  000EC8  C02A  F062         	movff	UART_Init@baudrate+2,??_UART_Init+2
  3612  000ECC  C02B  F063         	movff	UART_Init@baudrate+3,??_UART_Init+3
  3613  000ED0  0E06               	movlw	6
  3614  000ED2                     u2415:
  3615  000ED2  90D8               	bcf	status,0,c
  3616  000ED4  0100               	movlb	0	; () banked
  3617  000ED6  3760               	rlcf	??_UART_Init& (0+255),f,b
  3618  000ED8  3761               	rlcf	(??_UART_Init+1)& (0+255),f,b
  3619  000EDA  3762               	rlcf	(??_UART_Init+2)& (0+255),f,b
  3620  000EDC  3763               	rlcf	(??_UART_Init+3)& (0+255),f,b
  3621  000EDE  2EE8               	decfsz	wreg,f,c
  3622  000EE0  D7F8               	goto	u2415
  3623  000EE2  0100               	movlb	0	; () banked
  3624  000EE4  1F60               	comf	??_UART_Init& (0+255),f,b
  3625  000EE6  1F61               	comf	(??_UART_Init+1)& (0+255),f,b
  3626  000EE8  1F62               	comf	(??_UART_Init+2)& (0+255),f,b
  3627  000EEA  1F63               	comf	(??_UART_Init+3)& (0+255),f,b
  3628  000EEC  2B60               	incf	??_UART_Init& (0+255),f,b
  3629  000EEE  0E00               	movlw	0
  3630  000EF0  2361               	addwfc	(??_UART_Init+1)& (0+255),f,b
  3631  000EF2  2362               	addwfc	(??_UART_Init+2)& (0+255),f,b
  3632  000EF4  2363               	addwfc	(??_UART_Init+3)& (0+255),f,b
  3633  000EF6  0E00               	movlw	0
  3634  000EF8  0100               	movlb	0	; () banked
  3635  000EFA  2560               	addwf	??_UART_Init& (0+255),w,b
  3636  000EFC  6E1B               	movwf	___lldiv@dividend,c
  3637  000EFE  0E2D               	movlw	45
  3638  000F00  0100               	movlb	0	; () banked
  3639  000F02  2161               	addwfc	(??_UART_Init+1)& (0+255),w,b
  3640  000F04  6E1C               	movwf	___lldiv@dividend+1,c
  3641  000F06  0E31               	movlw	49
  3642  000F08  0100               	movlb	0	; () banked
  3643  000F0A  2162               	addwfc	(??_UART_Init+2)& (0+255),w,b
  3644  000F0C  6E1D               	movwf	___lldiv@dividend+2,c
  3645  000F0E  0E01               	movlw	1
  3646  000F10  0100               	movlb	0	; () banked
  3647  000F12  2163               	addwfc	(??_UART_Init+3)& (0+255),w,b
  3648  000F14  6E1E               	movwf	___lldiv@dividend+3,c
  3649  000F16  C028  F064         	movff	UART_Init@baudrate,??_UART_Init+4
  3650  000F1A  C029  F065         	movff	UART_Init@baudrate+1,??_UART_Init+5
  3651  000F1E  C02A  F066         	movff	UART_Init@baudrate+2,??_UART_Init+6
  3652  000F22  C02B  F067         	movff	UART_Init@baudrate+3,??_UART_Init+7
  3653  000F26  0E06               	movlw	6
  3654  000F28                     u2425:
  3655  000F28  90D8               	bcf	status,0,c
  3656  000F2A  0100               	movlb	0	; () banked
  3657  000F2C  3764               	rlcf	(??_UART_Init+4)& (0+255),f,b
  3658  000F2E  3765               	rlcf	(??_UART_Init+5)& (0+255),f,b
  3659  000F30  3766               	rlcf	(??_UART_Init+6)& (0+255),f,b
  3660  000F32  3767               	rlcf	(??_UART_Init+7)& (0+255),f,b
  3661  000F34  2EE8               	decfsz	wreg,f,c
  3662  000F36  D7F8               	goto	u2425
  3663  000F38  C064  F01F         	movff	??_UART_Init+4,___lldiv@divisor
  3664  000F3C  C065  F020         	movff	??_UART_Init+5,___lldiv@divisor+1
  3665  000F40  C066  F021         	movff	??_UART_Init+6,___lldiv@divisor+2
  3666  000F44  C067  F022         	movff	??_UART_Init+7,___lldiv@divisor+3
  3667  000F48  EC81  F009         	call	___lldiv	;wreg free
  3668  000F4C  C01B  F02C         	movff	?___lldiv,UART_Init@x
  3669  000F50  C01C  F02D         	movff	?___lldiv+1,UART_Init@x+1
  3670                           
  3671                           ;UART.h: 9: if(x > 255)
  3672  000F54  042D               	decf	UART_Init@x+1,w,c
  3673  000F56  A0D8               	btfss	status,0,c
  3674  000F58  D04B               	goto	l2779
  3675                           
  3676                           ;UART.h: 10: {
  3677                           ;UART.h: 11: x = (20000000UL - baudrate*16)/(baudrate*16);
  3678  000F5A  C028  F060         	movff	UART_Init@baudrate,??_UART_Init
  3679  000F5E  C029  F061         	movff	UART_Init@baudrate+1,??_UART_Init+1
  3680  000F62  C02A  F062         	movff	UART_Init@baudrate+2,??_UART_Init+2
  3681  000F66  C02B  F063         	movff	UART_Init@baudrate+3,??_UART_Init+3
  3682  000F6A  0E04               	movlw	4
  3683  000F6C                     u2445:
  3684  000F6C  90D8               	bcf	status,0,c
  3685  000F6E  0100               	movlb	0	; () banked
  3686  000F70  3760               	rlcf	??_UART_Init& (0+255),f,b
  3687  000F72  3761               	rlcf	(??_UART_Init+1)& (0+255),f,b
  3688  000F74  3762               	rlcf	(??_UART_Init+2)& (0+255),f,b
  3689  000F76  3763               	rlcf	(??_UART_Init+3)& (0+255),f,b
  3690  000F78  2EE8               	decfsz	wreg,f,c
  3691  000F7A  D7F8               	goto	u2445
  3692  000F7C  0100               	movlb	0	; () banked
  3693  000F7E  1F60               	comf	??_UART_Init& (0+255),f,b
  3694  000F80  1F61               	comf	(??_UART_Init+1)& (0+255),f,b
  3695  000F82  1F62               	comf	(??_UART_Init+2)& (0+255),f,b
  3696  000F84  1F63               	comf	(??_UART_Init+3)& (0+255),f,b
  3697  000F86  2B60               	incf	??_UART_Init& (0+255),f,b
  3698  000F88  0E00               	movlw	0
  3699  000F8A  2361               	addwfc	(??_UART_Init+1)& (0+255),f,b
  3700  000F8C  2362               	addwfc	(??_UART_Init+2)& (0+255),f,b
  3701  000F8E  2363               	addwfc	(??_UART_Init+3)& (0+255),f,b
  3702  000F90  0E00               	movlw	0
  3703  000F92  0100               	movlb	0	; () banked
  3704  000F94  2560               	addwf	??_UART_Init& (0+255),w,b
  3705  000F96  6E1B               	movwf	___lldiv@dividend,c
  3706  000F98  0E2D               	movlw	45
  3707  000F9A  0100               	movlb	0	; () banked
  3708  000F9C  2161               	addwfc	(??_UART_Init+1)& (0+255),w,b
  3709  000F9E  6E1C               	movwf	___lldiv@dividend+1,c
  3710  000FA0  0E31               	movlw	49
  3711  000FA2  0100               	movlb	0	; () banked
  3712  000FA4  2162               	addwfc	(??_UART_Init+2)& (0+255),w,b
  3713  000FA6  6E1D               	movwf	___lldiv@dividend+2,c
  3714  000FA8  0E01               	movlw	1
  3715  000FAA  0100               	movlb	0	; () banked
  3716  000FAC  2163               	addwfc	(??_UART_Init+3)& (0+255),w,b
  3717  000FAE  6E1E               	movwf	___lldiv@dividend+3,c
  3718  000FB0  C028  F064         	movff	UART_Init@baudrate,??_UART_Init+4
  3719  000FB4  C029  F065         	movff	UART_Init@baudrate+1,??_UART_Init+5
  3720  000FB8  C02A  F066         	movff	UART_Init@baudrate+2,??_UART_Init+6
  3721  000FBC  C02B  F067         	movff	UART_Init@baudrate+3,??_UART_Init+7
  3722  000FC0  0E04               	movlw	4
  3723  000FC2                     u2455:
  3724  000FC2  90D8               	bcf	status,0,c
  3725  000FC4  0100               	movlb	0	; () banked
  3726  000FC6  3764               	rlcf	(??_UART_Init+4)& (0+255),f,b
  3727  000FC8  3765               	rlcf	(??_UART_Init+5)& (0+255),f,b
  3728  000FCA  3766               	rlcf	(??_UART_Init+6)& (0+255),f,b
  3729  000FCC  3767               	rlcf	(??_UART_Init+7)& (0+255),f,b
  3730  000FCE  2EE8               	decfsz	wreg,f,c
  3731  000FD0  D7F8               	goto	u2455
  3732  000FD2  C064  F01F         	movff	??_UART_Init+4,___lldiv@divisor
  3733  000FD6  C065  F020         	movff	??_UART_Init+5,___lldiv@divisor+1
  3734  000FDA  C066  F021         	movff	??_UART_Init+6,___lldiv@divisor+2
  3735  000FDE  C067  F022         	movff	??_UART_Init+7,___lldiv@divisor+3
  3736  000FE2  EC81  F009         	call	___lldiv	;wreg free
  3737  000FE6  C01B  F02C         	movff	?___lldiv,UART_Init@x
  3738  000FEA  C01C  F02D         	movff	?___lldiv+1,UART_Init@x+1
  3739                           
  3740                           ;UART.h: 12: BRGH = 1;
  3741  000FEE  84AC               	bsf	4012,2,c	;volatile
  3742  000FF0                     l2779:
  3743                           
  3744                           ;UART.h: 13: }
  3745                           ;UART.h: 15: if(x < 256)
  3746  000FF0  042D               	decf	UART_Init@x+1,w,c
  3747  000FF2  B0D8               	btfsc	status,0,c
  3748  000FF4  0012               	return	
  3749                           
  3750                           ;UART.h: 16: {
  3751                           ;UART.h: 17: SPBRG = x;
  3752  000FF6  C02C  FFAF         	movff	UART_Init@x,4015	;volatile
  3753                           
  3754                           ;UART.h: 18: SYNC = 0;
  3755  000FFA  98AC               	bcf	4012,4,c	;volatile
  3756                           
  3757                           ;UART.h: 19: SPEN = 1;
  3758  000FFC  8EAB               	bsf	4011,7,c	;volatile
  3759                           
  3760                           ;UART.h: 20: TRISC7 = 1;
  3761  000FFE  8E94               	bsf	3988,7,c	;volatile
  3762                           
  3763                           ;UART.h: 21: TRISC6 = 1;
  3764  001000  8C94               	bsf	3988,6,c	;volatile
  3765                           
  3766                           ;UART.h: 22: CREN = 1;
  3767  001002  88AB               	bsf	4011,4,c	;volatile
  3768                           
  3769                           ;UART.h: 23: TXEN = 1;
  3770  001004  8AAC               	bsf	4012,5,c	;volatile
  3771                           
  3772                           ;UART.h: 24: return 1;
  3773                           ;	Return value of _UART_Init is never used
  3774  001006  0012               	return	
  3775  001008                     __end_of_UART_Init:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           indf0	equ	0xFEF
  3785                           postinc0	equ	0xFEE
  3786                           fsr0h	equ	0xFEA
  3787                           fsr0l	equ	0xFE9
  3788                           wreg	equ	0xFE8
  3789                           indf2	equ	0xFDF
  3790                           postinc2	equ	0xFDE
  3791                           postdec2	equ	0xFDD
  3792                           fsr2h	equ	0xFDA
  3793                           fsr2l	equ	0xFD9
  3794                           status	equ	0xFD8
  3795                           
  3796 ;; *************** function ___lldiv *****************
  3797 ;; Defined at:
  3798 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  dividend        4   26[COMRAM] unsigned long 
  3801 ;;  divisor         4   30[COMRAM] unsigned long 
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  quotient        4   34[COMRAM] unsigned long 
  3804 ;;  counter         1   38[COMRAM] unsigned char 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  4   26[COMRAM] unsigned long 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3814 ;;      Params:         8       0       0       0       0       0       0       0       0
  3815 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3816 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3817 ;;      Totals:        13       0       0       0       0       0       0       0       0
  3818 ;;Total ram usage:       13 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    4
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_UART_Init
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text24
  3829  001302                     __ptext24:
  3830                           	opt stack 0
  3831  001302                     ___lldiv:
  3832                           	opt stack 25
  3833                           
  3834                           ;incstack = 0
  3835  001302  0E00               	movlw	0
  3836  001304  6E23               	movwf	___lldiv@quotient,c
  3837  001306  0E00               	movlw	0
  3838  001308  6E24               	movwf	___lldiv@quotient+1,c
  3839  00130A  0E00               	movlw	0
  3840  00130C  6E25               	movwf	___lldiv@quotient+2,c
  3841  00130E  0E00               	movlw	0
  3842  001310  6E26               	movwf	___lldiv@quotient+3,c
  3843  001312  501F               	movf	___lldiv@divisor,w,c
  3844  001314  1020               	iorwf	___lldiv@divisor+1,w,c
  3845  001316  1021               	iorwf	___lldiv@divisor+2,w,c
  3846  001318  1022               	iorwf	___lldiv@divisor+3,w,c
  3847  00131A  B4D8               	btfsc	status,2,c
  3848  00131C  D02A               	goto	l643
  3849  00131E  0E01               	movlw	1
  3850  001320  6E27               	movwf	___lldiv@counter,c
  3851  001322  D006               	goto	l2009
  3852  001324                     l2007:
  3853  001324  90D8               	bcf	status,0,c
  3854  001326  361F               	rlcf	___lldiv@divisor,f,c
  3855  001328  3620               	rlcf	___lldiv@divisor+1,f,c
  3856  00132A  3621               	rlcf	___lldiv@divisor+2,f,c
  3857  00132C  3622               	rlcf	___lldiv@divisor+3,f,c
  3858  00132E  2A27               	incf	___lldiv@counter,f,c
  3859  001330                     l2009:
  3860  001330  AE22               	btfss	___lldiv@divisor+3,7,c
  3861  001332  D7F8               	goto	l2007
  3862  001334                     l2011:
  3863  001334  90D8               	bcf	status,0,c
  3864  001336  3623               	rlcf	___lldiv@quotient,f,c
  3865  001338  3624               	rlcf	___lldiv@quotient+1,f,c
  3866  00133A  3625               	rlcf	___lldiv@quotient+2,f,c
  3867  00133C  3626               	rlcf	___lldiv@quotient+3,f,c
  3868  00133E  501F               	movf	___lldiv@divisor,w,c
  3869  001340  5C1B               	subwf	___lldiv@dividend,w,c
  3870  001342  5020               	movf	___lldiv@divisor+1,w,c
  3871  001344  581C               	subwfb	___lldiv@dividend+1,w,c
  3872  001346  5021               	movf	___lldiv@divisor+2,w,c
  3873  001348  581D               	subwfb	___lldiv@dividend+2,w,c
  3874  00134A  5022               	movf	___lldiv@divisor+3,w,c
  3875  00134C  581E               	subwfb	___lldiv@dividend+3,w,c
  3876  00134E  A0D8               	btfss	status,0,c
  3877  001350  D009               	goto	l2019
  3878  001352  501F               	movf	___lldiv@divisor,w,c
  3879  001354  5E1B               	subwf	___lldiv@dividend,f,c
  3880  001356  5020               	movf	___lldiv@divisor+1,w,c
  3881  001358  5A1C               	subwfb	___lldiv@dividend+1,f,c
  3882  00135A  5021               	movf	___lldiv@divisor+2,w,c
  3883  00135C  5A1D               	subwfb	___lldiv@dividend+2,f,c
  3884  00135E  5022               	movf	___lldiv@divisor+3,w,c
  3885  001360  5A1E               	subwfb	___lldiv@dividend+3,f,c
  3886  001362  8023               	bsf	___lldiv@quotient,0,c
  3887  001364                     l2019:
  3888  001364  90D8               	bcf	status,0,c
  3889  001366  3222               	rrcf	___lldiv@divisor+3,f,c
  3890  001368  3221               	rrcf	___lldiv@divisor+2,f,c
  3891  00136A  3220               	rrcf	___lldiv@divisor+1,f,c
  3892  00136C  321F               	rrcf	___lldiv@divisor,f,c
  3893  00136E  2E27               	decfsz	___lldiv@counter,f,c
  3894  001370  D7E1               	goto	l2011
  3895  001372                     l643:
  3896  001372  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  3897  001376  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  3898  00137A  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  3899  00137E  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  3900  001382  0012               	return		;funcret
  3901  001384                     __end_of___lldiv:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           intcon	equ	0xFF2
  3910                           indf0	equ	0xFEF
  3911                           postinc0	equ	0xFEE
  3912                           fsr0h	equ	0xFEA
  3913                           fsr0l	equ	0xFE9
  3914                           wreg	equ	0xFE8
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _LCD_Init *****************
  3923 ;; Defined at:
  3924 ;;		line 45 in file "LCD.h"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      void 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3940 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3941 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3942 ;;Total ram usage:        1 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    6
  3945 ;; This function calls:
  3946 ;;		_LCD_Cmd
  3947 ;;		_LCD_Port
  3948 ;; This function is called by:
  3949 ;;		_main
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text25
  3954  0013F6                     __ptext25:
  3955                           	opt stack 0
  3956  0013F6                     _LCD_Init:
  3957                           	opt stack 24
  3958                           
  3959                           ;LCD.h: 46: LCD_Port(0x00);
  3960                           
  3961                           ;incstack = 0
  3962  0013F6  0E00               	movlw	0
  3963  0013F8  ECA5  F00A         	call	_LCD_Port
  3964                           
  3965                           ;LCD.h: 47: _delay((unsigned long)((20)*(20000000UL/4000.0)));
  3966  0013FC  0E82               	movlw	130
  3967  0013FE  6E1F               	movwf	??_LCD_Init& (0+255),c
  3968  001400  0EDE               	movlw	222
  3969  001402                     u2677:
  3970  001402  2EE8               	decfsz	wreg,f,c
  3971  001404  D7FE               	goto	u2677
  3972  001406  2E1F               	decfsz	??_LCD_Init& (0+255),f,c
  3973  001408  D7FC               	goto	u2677
  3974                           
  3975                           ;LCD.h: 48: LCD_Cmd(0x03);
  3976  00140A  0E03               	movlw	3
  3977  00140C  EC7B  F00C         	call	_LCD_Cmd
  3978                           
  3979                           ;LCD.h: 49: _delay((unsigned long)((5)*(20000000UL/4000.0)));
  3980  001410  0E21               	movlw	33
  3981  001412  6E1F               	movwf	??_LCD_Init& (0+255),c
  3982  001414  0E76               	movlw	118
  3983  001416                     u2687:
  3984  001416  2EE8               	decfsz	wreg,f,c
  3985  001418  D7FE               	goto	u2687
  3986  00141A  2E1F               	decfsz	??_LCD_Init& (0+255),f,c
  3987  00141C  D7FC               	goto	u2687
  3988  00141E  D000               	nop2	
  3989                           
  3990                           ;LCD.h: 50: LCD_Cmd(0x03);
  3991  001420  0E03               	movlw	3
  3992  001422  EC7B  F00C         	call	_LCD_Cmd
  3993                           
  3994                           ;LCD.h: 51: _delay((unsigned long)((11)*(20000000UL/4000.0)));
  3995  001426  0E48               	movlw	72
  3996  001428  6E1F               	movwf	??_LCD_Init& (0+255),c
  3997  00142A  0E6C               	movlw	108
  3998  00142C                     u2697:
  3999  00142C  2EE8               	decfsz	wreg,f,c
  4000  00142E  D7FE               	goto	u2697
  4001  001430  2E1F               	decfsz	??_LCD_Init& (0+255),f,c
  4002  001432  D7FC               	goto	u2697
  4003  001434  D000               	nop2	
  4004                           
  4005                           ;LCD.h: 52: LCD_Cmd(0x03);
  4006  001436  0E03               	movlw	3
  4007  001438  EC7B  F00C         	call	_LCD_Cmd
  4008                           
  4009                           ;LCD.h: 54: LCD_Cmd(0x02);
  4010  00143C  0E02               	movlw	2
  4011  00143E  EC7B  F00C         	call	_LCD_Cmd
  4012                           
  4013                           ;LCD.h: 55: LCD_Cmd(0x02);
  4014  001442  0E02               	movlw	2
  4015  001444  EC7B  F00C         	call	_LCD_Cmd
  4016                           
  4017                           ;LCD.h: 56: LCD_Cmd(0x08);
  4018  001448  0E08               	movlw	8
  4019  00144A  EC7B  F00C         	call	_LCD_Cmd
  4020                           
  4021                           ;LCD.h: 57: LCD_Cmd(0x00);
  4022  00144E  0E00               	movlw	0
  4023  001450  EC7B  F00C         	call	_LCD_Cmd
  4024                           
  4025                           ;LCD.h: 58: LCD_Cmd(0x0C);
  4026  001454  0E0C               	movlw	12
  4027  001456  EC7B  F00C         	call	_LCD_Cmd
  4028                           
  4029                           ;LCD.h: 59: LCD_Cmd(0x00);
  4030  00145A  0E00               	movlw	0
  4031  00145C  EC7B  F00C         	call	_LCD_Cmd
  4032                           
  4033                           ;LCD.h: 60: LCD_Cmd(0x06);
  4034  001460  0E06               	movlw	6
  4035  001462  EC7B  F00C         	call	_LCD_Cmd
  4036  001466  0012               	return		;funcret
  4037  001468                     __end_of_LCD_Init:
  4038                           	opt stack 0
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           indf0	equ	0xFEF
  4047                           postinc0	equ	0xFEE
  4048                           fsr0h	equ	0xFEA
  4049                           fsr0l	equ	0xFE9
  4050                           wreg	equ	0xFE8
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _LCD_Cmd *****************
  4059 ;; Defined at:
  4060 ;;		line 12 in file "LCD.h"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  cmd             1    wreg     unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  cmd             1   29[COMRAM] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0
  4075 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4076 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4077 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4078 ;;Total ram usage:        2 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    5
  4081 ;; This function calls:
  4082 ;;		_LCD_Port
  4083 ;; This function is called by:
  4084 ;;		_LCD_Clear
  4085 ;;		_LCD_Set_Cursor
  4086 ;;		_LCD_Init
  4087 ;;		_LCD_ShiftRight
  4088 ;;		_LCD_ShiftLeft
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text26
  4093  0018F6                     __ptext26:
  4094                           	opt stack 0
  4095  0018F6                     _LCD_Cmd:
  4096                           	opt stack 23
  4097                           
  4098                           ;incstack = 0
  4099                           ;LCD_Cmd@cmd stored from wreg
  4100  0018F6  6E1E               	movwf	LCD_Cmd@cmd,c
  4101                           
  4102                           ;LCD.h: 14: PORTBbits.RB2 = 0;
  4103  0018F8  9481               	bcf	3969,2,c	;volatile
  4104                           
  4105                           ;LCD.h: 15: LCD_Port(cmd);
  4106  0018FA  501E               	movf	LCD_Cmd@cmd,w,c
  4107  0018FC  ECA5  F00A         	call	_LCD_Port
  4108                           
  4109                           ;LCD.h: 16: PORTBbits.RB4 = 1;
  4110  001900  8881               	bsf	3969,4,c	;volatile
  4111                           
  4112                           ;LCD.h: 17: _delay((unsigned long)((4)*(20000000UL/4000.0)));
  4113  001902  0E1A               	movlw	26
  4114  001904  6E1D               	movwf	??_LCD_Cmd& (0+255),c
  4115  001906  0EF8               	movlw	248
  4116  001908                     u2707:
  4117  001908  2EE8               	decfsz	wreg,f,c
  4118  00190A  D7FE               	goto	u2707
  4119  00190C  2E1D               	decfsz	??_LCD_Cmd& (0+255),f,c
  4120  00190E  D7FC               	goto	u2707
  4121  001910  D000               	nop2	
  4122                           
  4123                           ;LCD.h: 18: PORTBbits.RB4 = 0;
  4124  001912  9881               	bcf	3969,4,c	;volatile
  4125  001914  0012               	return		;funcret
  4126  001916                     __end_of_LCD_Cmd:
  4127                           	opt stack 0
  4128                           tblptru	equ	0xFF8
  4129                           tblptrh	equ	0xFF7
  4130                           tblptrl	equ	0xFF6
  4131                           tablat	equ	0xFF5
  4132                           prodh	equ	0xFF4
  4133                           prodl	equ	0xFF3
  4134                           intcon	equ	0xFF2
  4135                           indf0	equ	0xFEF
  4136                           postinc0	equ	0xFEE
  4137                           fsr0h	equ	0xFEA
  4138                           fsr0l	equ	0xFE9
  4139                           wreg	equ	0xFE8
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _LCD_Port *****************
  4148 ;; Defined at:
  4149 ;;		line 4 in file "LCD.h"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  a               1    wreg     unsigned char 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  a               1   27[COMRAM] unsigned char 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4163 ;;      Params:         0       0       0       0       0       0       0       0       0
  4164 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4165 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4166 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4167 ;;Total ram usage:        2 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    4
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_LCD_Cmd
  4174 ;;		_LCD_Init
  4175 ;;		_LCD_Write_Char
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text27
  4180  00154A                     __ptext27:
  4181                           	opt stack 0
  4182  00154A                     _LCD_Port:
  4183                           	opt stack 23
  4184                           
  4185                           ;incstack = 0
  4186                           ;LCD_Port@a stored from wreg
  4187  00154A  6E1C               	movwf	LCD_Port@a,c
  4188                           
  4189                           ;LCD.h: 6: PORTDbits.RD4 = (a & 1) ? 1 : 0;
  4190  00154C  A01C               	btfss	LCD_Port@a,0,c
  4191  00154E  D003               	goto	u1950
  4192  001550  6A1B               	clrf	??_LCD_Port& (0+255),c
  4193  001552  2A1B               	incf	??_LCD_Port& (0+255),f,c
  4194  001554  D001               	goto	u1968
  4195  001556                     u1950:
  4196  001556  6A1B               	clrf	??_LCD_Port& (0+255),c
  4197  001558                     u1968:
  4198  001558  3A1B               	swapf	??_LCD_Port,f,c
  4199  00155A  5083               	movf	3971,w,c	;volatile
  4200  00155C  181B               	xorwf	??_LCD_Port,w,c
  4201  00155E  0BEF               	andlw	-17
  4202  001560  181B               	xorwf	??_LCD_Port,w,c
  4203  001562  6E83               	movwf	3971,c	;volatile
  4204                           
  4205                           ;LCD.h: 7: PORTDbits.RD5 = (a & 2) ? 1 : 0;
  4206  001564  A21C               	btfss	LCD_Port@a,1,c
  4207  001566  D003               	goto	u1970
  4208  001568  6A1B               	clrf	??_LCD_Port& (0+255),c
  4209  00156A  2A1B               	incf	??_LCD_Port& (0+255),f,c
  4210  00156C  D001               	goto	u1988
  4211  00156E                     u1970:
  4212  00156E  6A1B               	clrf	??_LCD_Port& (0+255),c
  4213  001570                     u1988:
  4214  001570  3A1B               	swapf	??_LCD_Port,f,c
  4215  001572  461B               	rlncf	??_LCD_Port,f,c
  4216  001574  5083               	movf	3971,w,c	;volatile
  4217  001576  181B               	xorwf	??_LCD_Port,w,c
  4218  001578  0BDF               	andlw	-33
  4219  00157A  181B               	xorwf	??_LCD_Port,w,c
  4220  00157C  6E83               	movwf	3971,c	;volatile
  4221                           
  4222                           ;LCD.h: 8: PORTDbits.RD6 = (a & 4) ? 1 : 0;
  4223  00157E  A41C               	btfss	LCD_Port@a,2,c
  4224  001580  D003               	goto	u1990
  4225  001582  6A1B               	clrf	??_LCD_Port& (0+255),c
  4226  001584  2A1B               	incf	??_LCD_Port& (0+255),f,c
  4227  001586  D001               	goto	u2008
  4228  001588                     u1990:
  4229  001588  6A1B               	clrf	??_LCD_Port& (0+255),c
  4230  00158A                     u2008:
  4231  00158A  3A1B               	swapf	??_LCD_Port,f,c
  4232  00158C  461B               	rlncf	??_LCD_Port,f,c
  4233  00158E  461B               	rlncf	??_LCD_Port,f,c
  4234  001590  5083               	movf	3971,w,c	;volatile
  4235  001592  181B               	xorwf	??_LCD_Port,w,c
  4236  001594  0BBF               	andlw	-65
  4237  001596  181B               	xorwf	??_LCD_Port,w,c
  4238  001598  6E83               	movwf	3971,c	;volatile
  4239                           
  4240                           ;LCD.h: 9: PORTDbits.RD7 = (a & 8) ? 1 : 0;
  4241  00159A  A61C               	btfss	LCD_Port@a,3,c
  4242  00159C  D003               	goto	u2010
  4243  00159E  6A1B               	clrf	??_LCD_Port& (0+255),c
  4244  0015A0  2A1B               	incf	??_LCD_Port& (0+255),f,c
  4245  0015A2  D001               	goto	u2028
  4246  0015A4                     u2010:
  4247  0015A4  6A1B               	clrf	??_LCD_Port& (0+255),c
  4248  0015A6                     u2028:
  4249  0015A6  321B               	rrcf	??_LCD_Port,f,c
  4250  0015A8  321B               	rrcf	??_LCD_Port,f,c
  4251  0015AA  5083               	movf	3971,w,c	;volatile
  4252  0015AC  181B               	xorwf	??_LCD_Port,w,c
  4253  0015AE  0B7F               	andlw	-129
  4254  0015B0  181B               	xorwf	??_LCD_Port,w,c
  4255  0015B2  6E83               	movwf	3971,c	;volatile
  4256  0015B4  0012               	return		;funcret
  4257  0015B6                     __end_of_LCD_Port:
  4258                           	opt stack 0
  4259                           tblptru	equ	0xFF8
  4260                           tblptrh	equ	0xFF7
  4261                           tblptrl	equ	0xFF6
  4262                           tablat	equ	0xFF5
  4263                           prodh	equ	0xFF4
  4264                           prodl	equ	0xFF3
  4265                           intcon	equ	0xFF2
  4266                           indf0	equ	0xFEF
  4267                           postinc0	equ	0xFEE
  4268                           fsr0h	equ	0xFEA
  4269                           fsr0l	equ	0xFE9
  4270                           wreg	equ	0xFE8
  4271                           indf2	equ	0xFDF
  4272                           postinc2	equ	0xFDE
  4273                           postdec2	equ	0xFDD
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _I2CInit *****************
  4279 ;; Defined at:
  4280 ;;		line 4 in file "I2C.h"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;		None
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;		None
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, status,2, status,0
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0
  4295 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4296 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4297 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4298 ;;Total ram usage:        0 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    4
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text28
  4309  001988                     __ptext28:
  4310                           	opt stack 0
  4311  001988                     _I2CInit:
  4312                           	opt stack 26
  4313                           
  4314                           ;I2C.h: 6: TRISB0 = 1;
  4315                           
  4316                           ;incstack = 0
  4317  001988  8093               	bsf	3987,0,c	;volatile
  4318                           
  4319                           ;I2C.h: 7: TRISB1 = 1;
  4320  00198A  8293               	bsf	3987,1,c	;volatile
  4321                           
  4322                           ;I2C.h: 8: SSPSTAT |= 0x80;
  4323  00198C  8EC7               	bsf	4039,7,c	;volatile
  4324                           
  4325                           ;I2C.h: 9: SSPCON1 = 0x28;
  4326  00198E  0E28               	movlw	40
  4327  001990  6EC6               	movwf	4038,c	;volatile
  4328                           
  4329                           ;I2C.h: 10: SSPADD = 0x31;
  4330  001992  0E31               	movlw	49
  4331  001994  6EC8               	movwf	4040,c	;volatile
  4332  001996  0012               	return		;funcret
  4333  001998                     __end_of_I2CInit:
  4334                           	opt stack 0
  4335                           tblptru	equ	0xFF8
  4336                           tblptrh	equ	0xFF7
  4337                           tblptrl	equ	0xFF6
  4338                           tablat	equ	0xFF5
  4339                           prodh	equ	0xFF4
  4340                           prodl	equ	0xFF3
  4341                           intcon	equ	0xFF2
  4342                           indf0	equ	0xFEF
  4343                           postinc0	equ	0xFEE
  4344                           fsr0h	equ	0xFEA
  4345                           fsr0l	equ	0xFE9
  4346                           wreg	equ	0xFE8
  4347                           indf2	equ	0xFDF
  4348                           postinc2	equ	0xFDE
  4349                           postdec2	equ	0xFDD
  4350                           fsr2h	equ	0xFDA
  4351                           fsr2l	equ	0xFD9
  4352                           status	equ	0xFD8
  4353                           
  4354 ;; *************** function _UART_ISR *****************
  4355 ;; Defined at:
  4356 ;;		line 106 in file "Main.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  c               1   25[COMRAM] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4370 ;;      Params:         0       0       0       0       0       0       0       0       0
  4371 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4372 ;;      Temps:         14       0       0       0       0       0       0       0       0
  4373 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4374 ;;Total ram usage:       15 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    3
  4377 ;; This function calls:
  4378 ;;		_UART_Read
  4379 ;;		_clearBuffer
  4380 ;;		_ds1307_setData
  4381 ;;		i2_LCD_Clear
  4382 ;;		i2_LCD_Set_Cursor
  4383 ;;		i2_LCD_Write_String
  4384 ;;		i2_delay_ms
  4385 ;; This function is called by:
  4386 ;;		Interrupt level 2
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	intcode
  4391  000008                     __pintcode:
  4392                           	opt stack 0
  4393  000008                     _UART_ISR:
  4394                           	opt stack 23
  4395                           
  4396                           ;incstack = 0
  4397  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4398  00000A  CFFA F00C          	movff	pclath,??_UART_ISR
  4399  00000E  CFFB F00D          	movff	pclatu,??_UART_ISR+1
  4400  000012  ED7B  F006         	call	int_func,f	;refresh shadow registers
  4401                           pclatu	equ	0xFFB
  4402                           pclath	equ	0xFFA
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           prodh	equ	0xFF4
  4408                           prodl	equ	0xFF3
  4409                           intcon	equ	0xFF2
  4410                           indf0	equ	0xFEF
  4411                           postinc0	equ	0xFEE
  4412                           fsr0h	equ	0xFEA
  4413                           fsr0l	equ	0xFE9
  4414                           wreg	equ	0xFE8
  4415                           indf2	equ	0xFDF
  4416                           postinc2	equ	0xFDE
  4417                           postdec2	equ	0xFDD
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422                           	psect	intcode_body
  4423  000CF6                     __pintcode_body:
  4424                           	opt stack 23
  4425  000CF6                     int_func:
  4426                           	opt stack 23
  4427  000CF6  0006               	pop		; remove dummy address from shadow register refresh
  4428  000CF8  CFE9 F00E          	movff	fsr0l,??_UART_ISR+2
  4429  000CFC  CFEA F00F          	movff	fsr0h,??_UART_ISR+3
  4430  000D00  CFE1 F010          	movff	fsr1l,??_UART_ISR+4
  4431  000D04  CFE2 F011          	movff	fsr1h,??_UART_ISR+5
  4432  000D08  CFD9 F012          	movff	fsr2l,??_UART_ISR+6
  4433  000D0C  CFDA F013          	movff	fsr2h,??_UART_ISR+7
  4434  000D10  CFF3 F014          	movff	prodl,??_UART_ISR+8
  4435  000D14  CFF4 F015          	movff	prodh,??_UART_ISR+9
  4436  000D18  CFF6 F016          	movff	tblptrl,??_UART_ISR+10
  4437  000D1C  CFF7 F017          	movff	tblptrh,??_UART_ISR+11
  4438  000D20  CFF8 F018          	movff	tblptru,??_UART_ISR+12
  4439  000D24  CFF5 F019          	movff	tablat,??_UART_ISR+13
  4440                           
  4441                           ;Main.c: 108: if (PIE1bits.RCIE && PIR1bits.RCIF) {
  4442  000D28  BA9D               	btfsc	3997,5,c	;volatile
  4443  000D2A  AA9E               	btfss	3998,5,c	;volatile
  4444  000D2C  D0AB               	goto	i2l243
  4445                           
  4446                           ;Main.c: 109: if (i < 16)
  4447  000D2E  502F               	movf	_i+1,w,c
  4448  000D30  E177               	bnz	i2l2981
  4449  000D32  0E10               	movlw	16
  4450  000D34  5C2E               	subwf	_i,w,c
  4451  000D36  B0D8               	btfsc	status,0,c
  4452  000D38  D073               	goto	i2l2981
  4453                           
  4454                           ;Main.c: 110: {
  4455                           ;Main.c: 111: char c = UART_Read();
  4456  000D3A  EC07  F00D         	call	_UART_Read	;wreg free
  4457  000D3E  6E1A               	movwf	UART_ISR@c,c
  4458                           
  4459                           ;Main.c: 112: if (c == 0x0D)
  4460  000D40  0E0D               	movlw	13
  4461  000D42  181A               	xorwf	UART_ISR@c,w,c
  4462  000D44  A4D8               	btfss	status,2,c
  4463  000D46  D02B               	goto	i2l2949
  4464                           
  4465                           ;Main.c: 113: {
  4466                           ;Main.c: 114: isSetClock = 1;
  4467  000D48  0E01               	movlw	1
  4468  000D4A  0100               	movlb	0	; () banked
  4469  000D4C  6F7D               	movwf	_isSetClock& (0+255),b
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;Main.c: 115: ds1307_setData(uartBuffer);
  4473  000D4E  0E30               	movlw	low _uartBuffer
  4474  000D50  6E04               	movwf	ds1307_setData@iData,c
  4475  000D52  0E00               	movlw	high _uartBuffer
  4476  000D54  6E05               	movwf	ds1307_setData@iData+1,c
  4477  000D56  ECA6  F008         	call	_ds1307_setData	;wreg free
  4478                           
  4479                           ;Main.c: 116: clearBuffer(uartBuffer, 16);
  4480  000D5A  0E30               	movlw	low _uartBuffer
  4481  000D5C  6E01               	movwf	clearBuffer@buffer,c
  4482  000D5E  0E00               	movlw	high _uartBuffer
  4483  000D60  6E02               	movwf	clearBuffer@buffer+1,c
  4484  000D62  0E00               	movlw	0
  4485  000D64  6E04               	movwf	clearBuffer@bufferSize+1,c
  4486  000D66  0E10               	movlw	16
  4487  000D68  6E03               	movwf	clearBuffer@bufferSize,c
  4488  000D6A  EC43  F00C         	call	_clearBuffer	;wreg free
  4489                           
  4490                           ;Main.c: 117: i = 0;
  4491  000D6E  0E00               	movlw	0
  4492  000D70  6E2F               	movwf	_i+1,c
  4493  000D72  0E00               	movlw	0
  4494  000D74  6E2E               	movwf	_i,c
  4495                           
  4496                           ;Main.c: 118: LCD_Clear();
  4497  000D76  ECE2  F00C         	call	i2_LCD_Clear	;wreg free
  4498                           
  4499                           ;Main.c: 119: LCD_Set_Cursor(1, 1);
  4500  000D7A  0E01               	movlw	1
  4501  000D7C  6E05               	movwf	i2LCD_Set_Cursor@x,c
  4502  000D7E  0E01               	movlw	1
  4503  000D80  EC96  F00B         	call	i2_LCD_Set_Cursor
  4504                           
  4505                           ;Main.c: 120: LCD_Write_String("Setting Clock...");
  4506  000D84  0E1C               	movlw	low STR_1
  4507  000D86  6E06               	movwf	i2LCD_Write_String@str,c
  4508  000D88  0E08               	movlw	high STR_1
  4509  000D8A  6E07               	movwf	i2LCD_Write_String@str+1,c
  4510  000D8C  EC34  F00A         	call	i2_LCD_Write_String	;wreg free
  4511                           
  4512                           ;Main.c: 121: delay_ms(500);
  4513  000D90  0E01               	movlw	1
  4514  000D92  6E02               	movwf	i2delay_ms@duration+1,c
  4515  000D94  0EF4               	movlw	244
  4516  000D96  6E01               	movwf	i2delay_ms@duration,c
  4517  000D98  EC2D  F00C         	call	i2_delay_ms	;wreg free
  4518  000D9C  D072               	goto	i2l3001
  4519  000D9E                     i2l2949:
  4520  000D9E  0E0A               	movlw	10
  4521  000DA0  181A               	xorwf	UART_ISR@c,w,c
  4522  000DA2  A4D8               	btfss	status,2,c
  4523  000DA4  D032               	goto	i2l2975
  4524                           
  4525                           ;Main.c: 125: {
  4526                           ;Main.c: 126: isSetClock = 0;
  4527  000DA6  0E00               	movlw	0
  4528  000DA8  0100               	movlb	0	; () banked
  4529  000DAA  6F7D               	movwf	_isSetClock& (0+255),b
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;Main.c: 127: LCD_Clear();
  4533  000DAC  ECE2  F00C         	call	i2_LCD_Clear	;wreg free
  4534                           
  4535                           ;Main.c: 128: LCD_Set_Cursor(1, 1);
  4536  000DB0  0E01               	movlw	1
  4537  000DB2  6E05               	movwf	i2LCD_Set_Cursor@x,c
  4538  000DB4  0E01               	movlw	1
  4539  000DB6  EC96  F00B         	call	i2_LCD_Set_Cursor
  4540                           
  4541                           ;Main.c: 129: LCD_Write_String("Received String:");
  4542  000DBA  0E2D               	movlw	low STR_2
  4543  000DBC  6E06               	movwf	i2LCD_Write_String@str,c
  4544  000DBE  0E08               	movlw	high STR_2
  4545  000DC0  6E07               	movwf	i2LCD_Write_String@str+1,c
  4546  000DC2  EC34  F00A         	call	i2_LCD_Write_String	;wreg free
  4547                           
  4548                           ;Main.c: 130: LCD_Set_Cursor(2, 1);
  4549  000DC6  0E01               	movlw	1
  4550  000DC8  6E05               	movwf	i2LCD_Set_Cursor@x,c
  4551  000DCA  0E02               	movlw	2
  4552  000DCC  EC96  F00B         	call	i2_LCD_Set_Cursor
  4553                           
  4554                           ;Main.c: 131: LCD_Write_String(uartBuffer);
  4555  000DD0  0E30               	movlw	low _uartBuffer
  4556  000DD2  6E06               	movwf	i2LCD_Write_String@str,c
  4557  000DD4  0E00               	movlw	high _uartBuffer
  4558  000DD6  6E07               	movwf	i2LCD_Write_String@str+1,c
  4559  000DD8  EC34  F00A         	call	i2_LCD_Write_String	;wreg free
  4560                           
  4561                           ;Main.c: 132: clearBuffer(uartBuffer, 16);
  4562  000DDC  0E30               	movlw	low _uartBuffer
  4563  000DDE  6E01               	movwf	clearBuffer@buffer,c
  4564  000DE0  0E00               	movlw	high _uartBuffer
  4565  000DE2  6E02               	movwf	clearBuffer@buffer+1,c
  4566  000DE4  0E00               	movlw	0
  4567  000DE6  6E04               	movwf	clearBuffer@bufferSize+1,c
  4568  000DE8  0E10               	movlw	16
  4569  000DEA  6E03               	movwf	clearBuffer@bufferSize,c
  4570  000DEC  EC43  F00C         	call	_clearBuffer	;wreg free
  4571                           
  4572                           ;Main.c: 133: i = 0;
  4573  000DF0  0E00               	movlw	0
  4574  000DF2  6E2F               	movwf	_i+1,c
  4575  000DF4  0E00               	movlw	0
  4576  000DF6  6E2E               	movwf	_i,c
  4577                           
  4578                           ;Main.c: 134: delay_ms(1500);
  4579  000DF8  0E05               	movlw	5
  4580  000DFA  6E02               	movwf	i2delay_ms@duration+1,c
  4581  000DFC  0EDC               	movlw	220
  4582  000DFE  6E01               	movwf	i2delay_ms@duration,c
  4583  000E00  EC2D  F00C         	call	i2_delay_ms	;wreg free
  4584                           
  4585                           ;Main.c: 135: LCD_Clear();
  4586  000E04  ECE2  F00C         	call	i2_LCD_Clear	;wreg free
  4587  000E08  D03C               	goto	i2l3001
  4588  000E0A                     i2l2975:
  4589                           
  4590                           ;Main.c: 138: }
  4591                           ;Main.c: 140: uartBuffer[i++] = c;
  4592  000E0A  0E30               	movlw	low _uartBuffer
  4593  000E0C  242E               	addwf	_i,w,c
  4594  000E0E  6ED9               	movwf	fsr2l,c
  4595  000E10  0E00               	movlw	high _uartBuffer
  4596  000E12  202F               	addwfc	_i+1,w,c
  4597  000E14  6EDA               	movwf	fsr2h,c
  4598  000E16  C01A  FFDF         	movff	UART_ISR@c,indf2
  4599  000E1A  4A2E               	infsnz	_i,f,c
  4600  000E1C  2A2F               	incf	_i+1,f,c
  4601  000E1E  D031               	goto	i2l3001
  4602  000E20                     i2l2981:
  4603                           
  4604                           ;Main.c: 143: else
  4605                           ;Main.c: 144: {
  4606                           ;Main.c: 145: isSetClock = 0;
  4607  000E20  0E00               	movlw	0
  4608  000E22  0100               	movlb	0	; () banked
  4609  000E24  6F7D               	movwf	_isSetClock& (0+255),b
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;Main.c: 146: LCD_Clear();
  4613  000E26  ECE2  F00C         	call	i2_LCD_Clear	;wreg free
  4614                           
  4615                           ;Main.c: 147: LCD_Set_Cursor(1, 1);
  4616  000E2A  0E01               	movlw	1
  4617  000E2C  6E05               	movwf	i2LCD_Set_Cursor@x,c
  4618  000E2E  0E01               	movlw	1
  4619  000E30  EC96  F00B         	call	i2_LCD_Set_Cursor
  4620                           
  4621                           ;Main.c: 148: LCD_Write_String("Received String:");
  4622  000E34  0E2D               	movlw	low STR_2
  4623  000E36  6E06               	movwf	i2LCD_Write_String@str,c
  4624  000E38  0E08               	movlw	high STR_2
  4625  000E3A  6E07               	movwf	i2LCD_Write_String@str+1,c
  4626  000E3C  EC34  F00A         	call	i2_LCD_Write_String	;wreg free
  4627                           
  4628                           ;Main.c: 149: LCD_Set_Cursor(2, 1);
  4629  000E40  0E01               	movlw	1
  4630  000E42  6E05               	movwf	i2LCD_Set_Cursor@x,c
  4631  000E44  0E02               	movlw	2
  4632  000E46  EC96  F00B         	call	i2_LCD_Set_Cursor
  4633                           
  4634                           ;Main.c: 150: LCD_Write_String(uartBuffer);
  4635  000E4A  0E30               	movlw	low _uartBuffer
  4636  000E4C  6E06               	movwf	i2LCD_Write_String@str,c
  4637  000E4E  0E00               	movlw	high _uartBuffer
  4638  000E50  6E07               	movwf	i2LCD_Write_String@str+1,c
  4639  000E52  EC34  F00A         	call	i2_LCD_Write_String	;wreg free
  4640                           
  4641                           ;Main.c: 151: clearBuffer(uartBuffer, 16);
  4642  000E56  0E30               	movlw	low _uartBuffer
  4643  000E58  6E01               	movwf	clearBuffer@buffer,c
  4644  000E5A  0E00               	movlw	high _uartBuffer
  4645  000E5C  6E02               	movwf	clearBuffer@buffer+1,c
  4646  000E5E  0E00               	movlw	0
  4647  000E60  6E04               	movwf	clearBuffer@bufferSize+1,c
  4648  000E62  0E10               	movlw	16
  4649  000E64  6E03               	movwf	clearBuffer@bufferSize,c
  4650  000E66  EC43  F00C         	call	_clearBuffer	;wreg free
  4651                           
  4652                           ;Main.c: 152: i = 0;
  4653  000E6A  0E00               	movlw	0
  4654  000E6C  6E2F               	movwf	_i+1,c
  4655  000E6E  0E00               	movlw	0
  4656  000E70  6E2E               	movwf	_i,c
  4657                           
  4658                           ;Main.c: 153: delay_ms(1500);
  4659  000E72  0E05               	movlw	5
  4660  000E74  6E02               	movwf	i2delay_ms@duration+1,c
  4661  000E76  0EDC               	movlw	220
  4662  000E78  6E01               	movwf	i2delay_ms@duration,c
  4663  000E7A  EC2D  F00C         	call	i2_delay_ms	;wreg free
  4664                           
  4665                           ;Main.c: 154: LCD_Clear();
  4666  000E7E  ECE2  F00C         	call	i2_LCD_Clear	;wreg free
  4667  000E82                     i2l3001:
  4668                           
  4669                           ;Main.c: 155: PIR1bits.RCIF = 0x0;
  4670  000E82  9A9E               	bcf	3998,5,c	;volatile
  4671  000E84                     i2l243:
  4672  000E84  C019  FFF5         	movff	??_UART_ISR+13,tablat
  4673  000E88  C018  FFF8         	movff	??_UART_ISR+12,tblptru
  4674  000E8C  C017  FFF7         	movff	??_UART_ISR+11,tblptrh
  4675  000E90  C016  FFF6         	movff	??_UART_ISR+10,tblptrl
  4676  000E94  C015  FFF4         	movff	??_UART_ISR+9,prodh
  4677  000E98  C014  FFF3         	movff	??_UART_ISR+8,prodl
  4678  000E9C  C013  FFDA         	movff	??_UART_ISR+7,fsr2h
  4679  000EA0  C012  FFD9         	movff	??_UART_ISR+6,fsr2l
  4680  000EA4  C011  FFE2         	movff	??_UART_ISR+5,fsr1h
  4681  000EA8  C010  FFE1         	movff	??_UART_ISR+4,fsr1l
  4682  000EAC  C00F  FFEA         	movff	??_UART_ISR+3,fsr0h
  4683  000EB0  C00E  FFE9         	movff	??_UART_ISR+2,fsr0l
  4684  000EB4  C00D  FFFB         	movff	??_UART_ISR+1,pclatu
  4685  000EB8  C00C  FFFA         	movff	??_UART_ISR,pclath
  4686  000EBC  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4687  000EBE  0011               	retfie		f
  4688  000EC0                     __end_of_UART_ISR:
  4689                           	opt stack 0
  4690                           pclatu	equ	0xFFB
  4691                           pclath	equ	0xFFA
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodh	equ	0xFF4
  4697                           prodl	equ	0xFF3
  4698                           intcon	equ	0xFF2
  4699                           indf0	equ	0xFEF
  4700                           postinc0	equ	0xFEE
  4701                           fsr0h	equ	0xFEA
  4702                           fsr0l	equ	0xFE9
  4703                           wreg	equ	0xFE8
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function i2_delay_ms *****************
  4714 ;; Defined at:
  4715 ;;		line 89 in file "Main.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  duration        2    0[COMRAM] unsigned int 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  delay_ms        2    3[COMRAM] int 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1    wreg      void 
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4729 ;;      Params:         2       0       0       0       0       0       0       0       0
  4730 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4731 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4732 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4733 ;;Total ram usage:        5 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_UART_ISR
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text30
  4743  00185A                     __ptext30:
  4744                           	opt stack 0
  4745  00185A                     i2_delay_ms:
  4746                           	opt stack 25
  4747                           
  4748                           ;Main.c: 91: for(int i = 0; i < duration; ++i)
  4749                           
  4750                           ;incstack = 0
  4751  00185A  0E00               	movlw	0
  4752  00185C  6E05               	movwf	i2delay_ms@i+1,c
  4753  00185E  0E00               	movlw	0
  4754  001860  6E04               	movwf	i2delay_ms@i,c
  4755  001862  D00A               	goto	i2l222
  4756  001864                     i2l2299:
  4757                           
  4758                           ;Main.c: 92: _delay((unsigned long)((1)*(20000000UL/4000.0)));
  4759  001864  0E07               	movlw	7
  4760  001866  6E03               	movwf	??i2_delay_ms& (0+255),c
  4761  001868  0E7D               	movlw	125
  4762  00186A                     i2u271_47:
  4763  00186A  2EE8               	decfsz	wreg,f,c
  4764  00186C  D7FE               	goto	i2u271_47
  4765  00186E  2E03               	decfsz	??i2_delay_ms& (0+255),f,c
  4766  001870  D7FC               	goto	i2u271_47
  4767  001872  F000               	nop	
  4768  001874  4A04               	infsnz	i2delay_ms@i,f,c
  4769  001876  2A05               	incf	i2delay_ms@i+1,f,c
  4770  001878                     i2l222:
  4771  001878  5001               	movf	i2delay_ms@duration,w,c
  4772  00187A  5C04               	subwf	i2delay_ms@i,w,c
  4773  00187C  5002               	movf	i2delay_ms@duration+1,w,c
  4774  00187E  5805               	subwfb	i2delay_ms@i+1,w,c
  4775  001880  B0D8               	btfsc	status,0,c
  4776  001882  0012               	return	
  4777  001884  D7EF               	goto	i2l2299
  4778  001886                     __end_ofi2_delay_ms:
  4779                           	opt stack 0
  4780                           pclatu	equ	0xFFB
  4781                           pclath	equ	0xFFA
  4782                           tblptru	equ	0xFF8
  4783                           tblptrh	equ	0xFF7
  4784                           tblptrl	equ	0xFF6
  4785                           tablat	equ	0xFF5
  4786                           prodh	equ	0xFF4
  4787                           prodl	equ	0xFF3
  4788                           intcon	equ	0xFF2
  4789                           indf0	equ	0xFEF
  4790                           postinc0	equ	0xFEE
  4791                           fsr0h	equ	0xFEA
  4792                           fsr0l	equ	0xFE9
  4793                           wreg	equ	0xFE8
  4794                           fsr1h	equ	0xFE2
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function i2_LCD_Write_String *****************
  4804 ;; Defined at:
  4805 ;;		line 78 in file "LCD.h"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  str             2    5[COMRAM] PTR unsigned char 
  4808 ;;		 -> STR_12(16), STR_11(15), STR_10(16), showLoadScreen@s(10), 
  4809 ;;		 -> STR_7(11), STR_6(16), STR_5(17), STR_4(4), 
  4810 ;;		 -> STR_3(17), STR_2(17), STR_1(17), uartBuffer(16), 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  LCD_Write_St    2    9[COMRAM] int 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4822 ;;      Params:         2       0       0       0       0       0       0       0       0
  4823 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4824 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4825 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4826 ;;Total ram usage:        6 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    2
  4829 ;; This function calls:
  4830 ;;		i2_LCD_Write_Char
  4831 ;; This function is called by:
  4832 ;;		_UART_ISR
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text31
  4837  001468                     __ptext31:
  4838                           	opt stack 0
  4839  001468                     i2_LCD_Write_String:
  4840                           	opt stack 23
  4841                           
  4842                           ;LCD.h: 80: int i;
  4843                           ;LCD.h: 81: for(i = 0; str[i] != '\0'; ++i)
  4844                           
  4845                           ;incstack = 0
  4846  001468  0E00               	movlw	0
  4847  00146A  6E0B               	movwf	i2LCD_Write_String@i+1,c
  4848  00146C  0E00               	movlw	0
  4849  00146E  6E0A               	movwf	i2LCD_Write_String@i,c
  4850  001470  D01A               	goto	i2l2913
  4851  001472                     i2l2909:
  4852                           
  4853                           ;LCD.h: 82: LCD_Write_Char(str[i]);
  4854  001472  500A               	movf	i2LCD_Write_String@i,w,c
  4855  001474  2406               	addwf	i2LCD_Write_String@str,w,c
  4856  001476  6E08               	movwf	??i2_LCD_Write_String& (0+255),c
  4857  001478  500B               	movf	i2LCD_Write_String@i+1,w,c
  4858  00147A  2007               	addwfc	i2LCD_Write_String@str+1,w,c
  4859  00147C  6E09               	movwf	(??i2_LCD_Write_String+1)& (0+255),c
  4860  00147E  C008  FFF6         	movff	??i2_LCD_Write_String,tblptrl
  4861  001482  C009  FFF7         	movff	??i2_LCD_Write_String+1,tblptrh
  4862  001486  6AF8               	clrf	tblptru,c
  4863  001488  0E07               	movlw	(high __ramtop+-1)
  4864  00148A  64F7               	cpfsgt	tblptrh,c
  4865  00148C  D003               	bra	i2u255_47
  4866  00148E  0008               	tblrd		*
  4867  001490  50F5               	movf	tablat,w,c
  4868  001492  D005               	bra	i2u255_40
  4869  001494                     i2u255_47:
  4870  001494  CFF6 FFE9          	movff	tblptrl,fsr0l
  4871  001498  CFF7 FFEA          	movff	tblptrh,fsr0h
  4872  00149C  50EF               	movf	indf0,w,c
  4873  00149E                     i2u255_40:
  4874  00149E  ECFB  F00B         	call	i2_LCD_Write_Char
  4875  0014A2  4A0A               	infsnz	i2LCD_Write_String@i,f,c
  4876  0014A4  2A0B               	incf	i2LCD_Write_String@i+1,f,c
  4877  0014A6                     i2l2913:
  4878  0014A6  500A               	movf	i2LCD_Write_String@i,w,c
  4879  0014A8  2406               	addwf	i2LCD_Write_String@str,w,c
  4880  0014AA  6E08               	movwf	??i2_LCD_Write_String& (0+255),c
  4881  0014AC  500B               	movf	i2LCD_Write_String@i+1,w,c
  4882  0014AE  2007               	addwfc	i2LCD_Write_String@str+1,w,c
  4883  0014B0  6E09               	movwf	(??i2_LCD_Write_String+1)& (0+255),c
  4884  0014B2  C008  FFF6         	movff	??i2_LCD_Write_String,tblptrl
  4885  0014B6  C009  FFF7         	movff	??i2_LCD_Write_String+1,tblptrh
  4886  0014BA  6AF8               	clrf	tblptru,c
  4887  0014BC  0E07               	movlw	(high __ramtop+-1)
  4888  0014BE  64F7               	cpfsgt	tblptrh,c
  4889  0014C0  D003               	bra	i2u256_47
  4890  0014C2  0008               	tblrd		*
  4891  0014C4  50F5               	movf	tablat,w,c
  4892  0014C6  D005               	bra	i2u256_40
  4893  0014C8                     i2u256_47:
  4894  0014C8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4895  0014CC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4896  0014D0  50EF               	movf	indf0,w,c
  4897  0014D2                     i2u256_40:
  4898  0014D2  0900               	iorlw	0
  4899  0014D4  B4D8               	btfsc	status,2,c
  4900  0014D6  0012               	return	
  4901  0014D8  D7CC               	goto	i2l2909
  4902  0014DA                     __end_ofi2_LCD_Write_String:
  4903                           	opt stack 0
  4904                           pclatu	equ	0xFFB
  4905                           pclath	equ	0xFFA
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           prodh	equ	0xFF4
  4911                           prodl	equ	0xFF3
  4912                           intcon	equ	0xFF2
  4913                           indf0	equ	0xFEF
  4914                           postinc0	equ	0xFEE
  4915                           fsr0h	equ	0xFEA
  4916                           fsr0l	equ	0xFE9
  4917                           wreg	equ	0xFE8
  4918                           fsr1h	equ	0xFE2
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           fsr2h	equ	0xFDA
  4924                           fsr2l	equ	0xFD9
  4925                           status	equ	0xFD8
  4926                           
  4927 ;; *************** function i2_LCD_Write_Char *****************
  4928 ;; Defined at:
  4929 ;;		line 63 in file "LCD.h"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  c               1    wreg     unsigned char 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  c               1    4[COMRAM] unsigned char 
  4934 ;;  LCD_Write_Ch    1    3[COMRAM] unsigned char 
  4935 ;;  LCD_Write_Ch    1    2[COMRAM] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      void 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4945 ;;      Params:         0       0       0       0       0       0       0       0       0
  4946 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4948 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4949 ;;Total ram usage:        3 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    1
  4952 ;; This function calls:
  4953 ;;		i2_LCD_Port
  4954 ;; This function is called by:
  4955 ;;		i2_LCD_Write_String
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text32
  4960  0017F6                     __ptext32:
  4961                           	opt stack 0
  4962  0017F6                     i2_LCD_Write_Char:
  4963                           	opt stack 23
  4964                           
  4965                           ;incstack = 0
  4966                           ;i2LCD_Write_Char@c stored from wreg
  4967  0017F6  6E05               	movwf	i2LCD_Write_Char@c,c
  4968                           
  4969                           ;LCD.h: 65: char temp = c & 0x0F;
  4970  0017F8  5005               	movf	i2LCD_Write_Char@c,w,c
  4971  0017FA  0B0F               	andlw	15
  4972  0017FC  6E03               	movwf	i2LCD_Write_Char@temp,c
  4973                           
  4974                           ;LCD.h: 66: char y = c & 0xF0;
  4975  0017FE  5005               	movf	i2LCD_Write_Char@c,w,c
  4976  001800  0BF0               	andlw	240
  4977  001802  6E04               	movwf	i2LCD_Write_Char@y,c
  4978                           
  4979                           ;LCD.h: 67: PORTBbits.RB2 = 1;
  4980  001804  8481               	bsf	3969,2,c	;volatile
  4981                           
  4982                           ;LCD.h: 68: LCD_Port(y >> 4);
  4983  001806  3804               	swapf	i2LCD_Write_Char@y,w,c
  4984  001808  0B0F               	andlw	15
  4985  00180A  ECDB  F00A         	call	i2_LCD_Port
  4986                           
  4987                           ;LCD.h: 69: PORTBbits.RB4 = 1;
  4988  00180E  8881               	bsf	3969,4,c	;volatile
  4989                           
  4990                           ;LCD.h: 70: _delay((unsigned long)((40)*(20000000UL/4000000.0)));
  4991  001810  0E42               	movlw	66
  4992  001812                     i2u272_47:
  4993  001812  2EE8               	decfsz	wreg,f,c
  4994  001814  D7FE               	goto	i2u272_47
  4995  001816  D000               	nop2		;nop
  4996                           
  4997                           ;LCD.h: 71: PORTBbits.RB4 = 0;
  4998  001818  9881               	bcf	3969,4,c	;volatile
  4999                           
  5000                           ;LCD.h: 72: LCD_Port(temp);
  5001  00181A  5003               	movf	i2LCD_Write_Char@temp,w,c
  5002  00181C  ECDB  F00A         	call	i2_LCD_Port
  5003                           
  5004                           ;LCD.h: 73: PORTBbits.RB4 = 1;
  5005  001820  8881               	bsf	3969,4,c	;volatile
  5006                           
  5007                           ;LCD.h: 74: _delay((unsigned long)((40)*(20000000UL/4000000.0)));
  5008  001822  0E42               	movlw	66
  5009  001824                     i2u273_47:
  5010  001824  2EE8               	decfsz	wreg,f,c
  5011  001826  D7FE               	goto	i2u273_47
  5012  001828  D000               	nop2		;nop
  5013                           
  5014                           ;LCD.h: 75: PORTBbits.RB4 = 0;
  5015  00182A  9881               	bcf	3969,4,c	;volatile
  5016  00182C  0012               	return		;funcret
  5017  00182E                     __end_ofi2_LCD_Write_Char:
  5018                           	opt stack 0
  5019                           pclatu	equ	0xFFB
  5020                           pclath	equ	0xFFA
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           intcon	equ	0xFF2
  5028                           indf0	equ	0xFEF
  5029                           postinc0	equ	0xFEE
  5030                           fsr0h	equ	0xFEA
  5031                           fsr0l	equ	0xFE9
  5032                           wreg	equ	0xFE8
  5033                           fsr1h	equ	0xFE2
  5034                           fsr1l	equ	0xFE1
  5035                           indf2	equ	0xFDF
  5036                           postinc2	equ	0xFDE
  5037                           postdec2	equ	0xFDD
  5038                           fsr2h	equ	0xFDA
  5039                           fsr2l	equ	0xFD9
  5040                           status	equ	0xFD8
  5041                           
  5042 ;; *************** function i2_LCD_Set_Cursor *****************
  5043 ;; Defined at:
  5044 ;;		line 27 in file "LCD.h"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  y               1    wreg     unsigned char 
  5047 ;;  x               1    4[COMRAM] unsigned char 
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;  y               1    5[COMRAM] unsigned char 
  5050 ;;  LCD_Set_Curs    1    8[COMRAM] unsigned char 
  5051 ;;  LCD_Set_Curs    1    7[COMRAM] unsigned char 
  5052 ;;  LCD_Set_Curs    1    6[COMRAM] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5062 ;;      Params:         1       0       0       0       0       0       0       0       0
  5063 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5065 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5066 ;;Total ram usage:        5 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    2
  5069 ;; This function calls:
  5070 ;;		i2_LCD_Cmd
  5071 ;; This function is called by:
  5072 ;;		_UART_ISR
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text33
  5077  00172C                     __ptext33:
  5078                           	opt stack 0
  5079  00172C                     i2_LCD_Set_Cursor:
  5080                           	opt stack 23
  5081                           
  5082                           ;incstack = 0
  5083                           ;i2LCD_Set_Cursor@y stored from wreg
  5084  00172C  6E06               	movwf	i2LCD_Set_Cursor@y,c
  5085                           
  5086                           ;LCD.h: 29: char temp, z, t;
  5087                           ;LCD.h: 30: if (y == 1) {
  5088  00172E  0406               	decf	i2LCD_Set_Cursor@y,w,c
  5089  001730  A4D8               	btfss	status,2,c
  5090  001732  D010               	goto	i2l2899
  5091                           
  5092                           ;LCD.h: 31: temp = 0x80 + x - 1;
  5093  001734  5005               	movf	i2LCD_Set_Cursor@x,w,c
  5094  001736  0F7F               	addlw	127
  5095  001738  6E09               	movwf	i2LCD_Set_Cursor@temp,c
  5096                           
  5097                           ;LCD.h: 32: z = temp >> 4;
  5098  00173A  3809               	swapf	i2LCD_Set_Cursor@temp,w,c
  5099  00173C  0B0F               	andlw	15
  5100  00173E  6E07               	movwf	i2LCD_Set_Cursor@z,c
  5101                           
  5102                           ;LCD.h: 33: t = temp & 0x0F;
  5103  001740  5009               	movf	i2LCD_Set_Cursor@temp,w,c
  5104  001742  0B0F               	andlw	15
  5105  001744  6E08               	movwf	i2LCD_Set_Cursor@t,c
  5106                           
  5107                           ;LCD.h: 34: LCD_Cmd(z);
  5108  001746  5007               	movf	i2LCD_Set_Cursor@z,w,c
  5109  001748  EC8B  F00C         	call	i2_LCD_Cmd
  5110                           
  5111                           ;LCD.h: 35: LCD_Cmd(t);
  5112  00174C  5008               	movf	i2LCD_Set_Cursor@t,w,c
  5113  00174E  EC8B  F00C         	call	i2_LCD_Cmd
  5114                           
  5115                           ;LCD.h: 36: } else if (y == 2) {
  5116  001752  0012               	return	
  5117  001754                     i2l2899:
  5118  001754  0E02               	movlw	2
  5119  001756  1806               	xorwf	i2LCD_Set_Cursor@y,w,c
  5120  001758  A4D8               	btfss	status,2,c
  5121  00175A  0012               	return	
  5122                           
  5123                           ;LCD.h: 37: temp = 0xC0 + x - 1;
  5124  00175C  5005               	movf	i2LCD_Set_Cursor@x,w,c
  5125  00175E  0FBF               	addlw	191
  5126  001760  6E09               	movwf	i2LCD_Set_Cursor@temp,c
  5127                           
  5128                           ;LCD.h: 38: z = temp >> 4;
  5129  001762  3809               	swapf	i2LCD_Set_Cursor@temp,w,c
  5130  001764  0B0F               	andlw	15
  5131  001766  6E07               	movwf	i2LCD_Set_Cursor@z,c
  5132                           
  5133                           ;LCD.h: 39: t = temp & 0x0F;
  5134  001768  5009               	movf	i2LCD_Set_Cursor@temp,w,c
  5135  00176A  0B0F               	andlw	15
  5136  00176C  6E08               	movwf	i2LCD_Set_Cursor@t,c
  5137                           
  5138                           ;LCD.h: 40: LCD_Cmd(z);
  5139  00176E  5007               	movf	i2LCD_Set_Cursor@z,w,c
  5140  001770  EC8B  F00C         	call	i2_LCD_Cmd
  5141                           
  5142                           ;LCD.h: 41: LCD_Cmd(t);
  5143  001774  5008               	movf	i2LCD_Set_Cursor@t,w,c
  5144  001776  EC8B  F00C         	call	i2_LCD_Cmd
  5145  00177A  0012               	return	
  5146  00177C                     __end_ofi2_LCD_Set_Cursor:
  5147                           	opt stack 0
  5148                           pclatu	equ	0xFFB
  5149                           pclath	equ	0xFFA
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           indf0	equ	0xFEF
  5158                           postinc0	equ	0xFEE
  5159                           fsr0h	equ	0xFEA
  5160                           fsr0l	equ	0xFE9
  5161                           wreg	equ	0xFE8
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function i2_LCD_Clear *****************
  5172 ;; Defined at:
  5173 ;;		line 21 in file "LCD.h"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5190 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5191 ;;Total ram usage:        0 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    2
  5194 ;; This function calls:
  5195 ;;		i2_LCD_Cmd
  5196 ;; This function is called by:
  5197 ;;		_UART_ISR
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text34
  5202  0019C4                     __ptext34:
  5203                           	opt stack 0
  5204  0019C4                     i2_LCD_Clear:
  5205                           	opt stack 23
  5206                           
  5207                           ;LCD.h: 23: LCD_Cmd(0);
  5208                           
  5209                           ;incstack = 0
  5210  0019C4  0E00               	movlw	0
  5211  0019C6  EC8B  F00C         	call	i2_LCD_Cmd
  5212                           
  5213                           ;LCD.h: 24: LCD_Cmd(1);
  5214  0019CA  0E01               	movlw	1
  5215  0019CC  EC8B  F00C         	call	i2_LCD_Cmd
  5216  0019D0  0012               	return		;funcret
  5217  0019D2                     __end_ofi2_LCD_Clear:
  5218                           	opt stack 0
  5219                           pclatu	equ	0xFFB
  5220                           pclath	equ	0xFFA
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           indf0	equ	0xFEF
  5229                           postinc0	equ	0xFEE
  5230                           fsr0h	equ	0xFEA
  5231                           fsr0l	equ	0xFE9
  5232                           wreg	equ	0xFE8
  5233                           fsr1h	equ	0xFE2
  5234                           fsr1l	equ	0xFE1
  5235                           indf2	equ	0xFDF
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           fsr2h	equ	0xFDA
  5239                           fsr2l	equ	0xFD9
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function i2_LCD_Cmd *****************
  5243 ;; Defined at:
  5244 ;;		line 12 in file "LCD.h"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  cmd             1    wreg     unsigned char 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  cmd             1    3[COMRAM] unsigned char 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, status,2, status,0, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5258 ;;      Params:         0       0       0       0       0       0       0       0       0
  5259 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5260 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5261 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5262 ;;Total ram usage:        2 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    1
  5265 ;; This function calls:
  5266 ;;		i2_LCD_Port
  5267 ;; This function is called by:
  5268 ;;		i2_LCD_Clear
  5269 ;;		i2_LCD_Set_Cursor
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text35
  5274  001916                     __ptext35:
  5275                           	opt stack 0
  5276  001916                     i2_LCD_Cmd:
  5277                           	opt stack 23
  5278                           
  5279                           ;incstack = 0
  5280                           ;i2LCD_Cmd@cmd stored from wreg
  5281  001916  6E04               	movwf	i2LCD_Cmd@cmd,c
  5282                           
  5283                           ;LCD.h: 14: PORTBbits.RB2 = 0;
  5284  001918  9481               	bcf	3969,2,c	;volatile
  5285                           
  5286                           ;LCD.h: 15: LCD_Port(cmd);
  5287  00191A  5004               	movf	i2LCD_Cmd@cmd,w,c
  5288  00191C  ECDB  F00A         	call	i2_LCD_Port
  5289                           
  5290                           ;LCD.h: 16: PORTBbits.RB4 = 1;
  5291  001920  8881               	bsf	3969,4,c	;volatile
  5292                           
  5293                           ;LCD.h: 17: _delay((unsigned long)((4)*(20000000UL/4000.0)));
  5294  001922  0E1A               	movlw	26
  5295  001924  6E03               	movwf	??i2_LCD_Cmd& (0+255),c
  5296  001926  0EF8               	movlw	248
  5297  001928                     i2u274_47:
  5298  001928  2EE8               	decfsz	wreg,f,c
  5299  00192A  D7FE               	goto	i2u274_47
  5300  00192C  2E03               	decfsz	??i2_LCD_Cmd& (0+255),f,c
  5301  00192E  D7FC               	goto	i2u274_47
  5302  001930  D000               	nop2	
  5303                           
  5304                           ;LCD.h: 18: PORTBbits.RB4 = 0;
  5305  001932  9881               	bcf	3969,4,c	;volatile
  5306  001934  0012               	return		;funcret
  5307  001936                     __end_ofi2_LCD_Cmd:
  5308                           	opt stack 0
  5309                           pclatu	equ	0xFFB
  5310                           pclath	equ	0xFFA
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           indf0	equ	0xFEF
  5319                           postinc0	equ	0xFEE
  5320                           fsr0h	equ	0xFEA
  5321                           fsr0l	equ	0xFE9
  5322                           wreg	equ	0xFE8
  5323                           fsr1h	equ	0xFE2
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           fsr2h	equ	0xFDA
  5329                           fsr2l	equ	0xFD9
  5330                           status	equ	0xFD8
  5331                           
  5332 ;; *************** function i2_LCD_Port *****************
  5333 ;; Defined at:
  5334 ;;		line 4 in file "LCD.h"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  a               1    wreg     unsigned char 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  a               1    1[COMRAM] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      void 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0
  5349 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5350 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5351 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5352 ;;Total ram usage:        2 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; This function calls:
  5355 ;;		Nothing
  5356 ;; This function is called by:
  5357 ;;		i2_LCD_Cmd
  5358 ;;		i2_LCD_Write_Char
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text36
  5363  0015B6                     __ptext36:
  5364                           	opt stack 0
  5365  0015B6                     i2_LCD_Port:
  5366                           	opt stack 23
  5367                           
  5368                           ;incstack = 0
  5369                           ;i2LCD_Port@a stored from wreg
  5370  0015B6  6E02               	movwf	i2LCD_Port@a,c
  5371                           
  5372                           ;LCD.h: 6: PORTDbits.RD4 = (a & 1) ? 1 : 0;
  5373  0015B8  A002               	btfss	i2LCD_Port@a,0,c
  5374  0015BA  D003               	goto	i2u209_40
  5375  0015BC  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5376  0015BE  2A01               	incf	??i2_LCD_Port& (0+255),f,c
  5377  0015C0  D001               	goto	i2u210_48
  5378  0015C2                     i2u209_40:
  5379  0015C2  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5380  0015C4                     i2u210_48:
  5381  0015C4  3A01               	swapf	??i2_LCD_Port,f,c
  5382  0015C6  5083               	movf	3971,w,c	;volatile
  5383  0015C8  1801               	xorwf	??i2_LCD_Port,w,c
  5384  0015CA  0BEF               	andlw	-17
  5385  0015CC  1801               	xorwf	??i2_LCD_Port,w,c
  5386  0015CE  6E83               	movwf	3971,c	;volatile
  5387                           
  5388                           ;LCD.h: 7: PORTDbits.RD5 = (a & 2) ? 1 : 0;
  5389  0015D0  A202               	btfss	i2LCD_Port@a,1,c
  5390  0015D2  D003               	goto	i2u211_40
  5391  0015D4  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5392  0015D6  2A01               	incf	??i2_LCD_Port& (0+255),f,c
  5393  0015D8  D001               	goto	i2u212_48
  5394  0015DA                     i2u211_40:
  5395  0015DA  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5396  0015DC                     i2u212_48:
  5397  0015DC  3A01               	swapf	??i2_LCD_Port,f,c
  5398  0015DE  4601               	rlncf	??i2_LCD_Port,f,c
  5399  0015E0  5083               	movf	3971,w,c	;volatile
  5400  0015E2  1801               	xorwf	??i2_LCD_Port,w,c
  5401  0015E4  0BDF               	andlw	-33
  5402  0015E6  1801               	xorwf	??i2_LCD_Port,w,c
  5403  0015E8  6E83               	movwf	3971,c	;volatile
  5404                           
  5405                           ;LCD.h: 8: PORTDbits.RD6 = (a & 4) ? 1 : 0;
  5406  0015EA  A402               	btfss	i2LCD_Port@a,2,c
  5407  0015EC  D003               	goto	i2u213_40
  5408  0015EE  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5409  0015F0  2A01               	incf	??i2_LCD_Port& (0+255),f,c
  5410  0015F2  D001               	goto	i2u214_48
  5411  0015F4                     i2u213_40:
  5412  0015F4  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5413  0015F6                     i2u214_48:
  5414  0015F6  3A01               	swapf	??i2_LCD_Port,f,c
  5415  0015F8  4601               	rlncf	??i2_LCD_Port,f,c
  5416  0015FA  4601               	rlncf	??i2_LCD_Port,f,c
  5417  0015FC  5083               	movf	3971,w,c	;volatile
  5418  0015FE  1801               	xorwf	??i2_LCD_Port,w,c
  5419  001600  0BBF               	andlw	-65
  5420  001602  1801               	xorwf	??i2_LCD_Port,w,c
  5421  001604  6E83               	movwf	3971,c	;volatile
  5422                           
  5423                           ;LCD.h: 9: PORTDbits.RD7 = (a & 8) ? 1 : 0;
  5424  001606  A602               	btfss	i2LCD_Port@a,3,c
  5425  001608  D003               	goto	i2u215_40
  5426  00160A  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5427  00160C  2A01               	incf	??i2_LCD_Port& (0+255),f,c
  5428  00160E  D001               	goto	i2u216_48
  5429  001610                     i2u215_40:
  5430  001610  6A01               	clrf	??i2_LCD_Port& (0+255),c
  5431  001612                     i2u216_48:
  5432  001612  3201               	rrcf	??i2_LCD_Port,f,c
  5433  001614  3201               	rrcf	??i2_LCD_Port,f,c
  5434  001616  5083               	movf	3971,w,c	;volatile
  5435  001618  1801               	xorwf	??i2_LCD_Port,w,c
  5436  00161A  0B7F               	andlw	-129
  5437  00161C  1801               	xorwf	??i2_LCD_Port,w,c
  5438  00161E  6E83               	movwf	3971,c	;volatile
  5439  001620  0012               	return		;funcret
  5440  001622                     __end_ofi2_LCD_Port:
  5441                           	opt stack 0
  5442                           pclatu	equ	0xFFB
  5443                           pclath	equ	0xFFA
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           indf0	equ	0xFEF
  5452                           postinc0	equ	0xFEE
  5453                           fsr0h	equ	0xFEA
  5454                           fsr0l	equ	0xFE9
  5455                           wreg	equ	0xFE8
  5456                           fsr1h	equ	0xFE2
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _ds1307_setData *****************
  5466 ;; Defined at:
  5467 ;;		line 82 in file "DS1307.h"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  iData           2    3[COMRAM] PTR unsigned char 
  5470 ;;		 -> uartBuffer(16), 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  j               2    5[COMRAM] int 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5482 ;;      Params:         2       0       0       0       0       0       0       0       0
  5483 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5485 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5486 ;;Total ram usage:        4 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    2
  5489 ;; This function calls:
  5490 ;;		_bin2bcd
  5491 ;;		i2_I2CSend
  5492 ;;		i2_I2CStart
  5493 ;;		i2_I2CStop
  5494 ;; This function is called by:
  5495 ;;		_UART_ISR
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text37
  5500  00114C                     __ptext37:
  5501                           	opt stack 0
  5502  00114C                     _ds1307_setData:
  5503                           	opt stack 23
  5504                           
  5505                           ;DS1307.h: 84: iData[0] &= 0x7F;
  5506                           
  5507                           ;incstack = 0
  5508  00114C  C004  FFD9         	movff	ds1307_setData@iData,fsr2l
  5509  001150  C005  FFDA         	movff	ds1307_setData@iData+1,fsr2h
  5510  001154  0E7F               	movlw	127
  5511  001156  16DF               	andwf	indf2,f,c
  5512                           
  5513                           ;DS1307.h: 85: iData[1] &= 0x7F;
  5514  001158  EE20 F001          	lfsr	2,1
  5515  00115C  5004               	movf	ds1307_setData@iData,w,c
  5516  00115E  26D9               	addwf	fsr2l,f,c
  5517  001160  5005               	movf	ds1307_setData@iData+1,w,c
  5518  001162  22DA               	addwfc	fsr2h,f,c
  5519  001164  0E7F               	movlw	127
  5520  001166  16DF               	andwf	indf2,f,c
  5521                           
  5522                           ;DS1307.h: 86: iData[2] &= 0x3F;
  5523  001168  EE20 F002          	lfsr	2,2
  5524  00116C  5004               	movf	ds1307_setData@iData,w,c
  5525  00116E  26D9               	addwf	fsr2l,f,c
  5526  001170  5005               	movf	ds1307_setData@iData+1,w,c
  5527  001172  22DA               	addwfc	fsr2h,f,c
  5528  001174  0E3F               	movlw	63
  5529  001176  16DF               	andwf	indf2,f,c
  5530                           
  5531                           ;DS1307.h: 87: iData[3] &= 0x07;
  5532  001178  EE20 F003          	lfsr	2,3
  5533  00117C  5004               	movf	ds1307_setData@iData,w,c
  5534  00117E  26D9               	addwf	fsr2l,f,c
  5535  001180  5005               	movf	ds1307_setData@iData+1,w,c
  5536  001182  22DA               	addwfc	fsr2h,f,c
  5537  001184  0E07               	movlw	7
  5538  001186  16DF               	andwf	indf2,f,c
  5539                           
  5540                           ;DS1307.h: 88: iData[4] &= 0x3F;
  5541  001188  EE20 F004          	lfsr	2,4
  5542  00118C  5004               	movf	ds1307_setData@iData,w,c
  5543  00118E  26D9               	addwf	fsr2l,f,c
  5544  001190  5005               	movf	ds1307_setData@iData+1,w,c
  5545  001192  22DA               	addwfc	fsr2h,f,c
  5546  001194  0E3F               	movlw	63
  5547  001196  16DF               	andwf	indf2,f,c
  5548                           
  5549                           ;DS1307.h: 89: iData[5] &= 0x1F;
  5550  001198  EE20 F005          	lfsr	2,5
  5551  00119C  5004               	movf	ds1307_setData@iData,w,c
  5552  00119E  26D9               	addwf	fsr2l,f,c
  5553  0011A0  5005               	movf	ds1307_setData@iData+1,w,c
  5554  0011A2  22DA               	addwfc	fsr2h,f,c
  5555  0011A4  0E1F               	movlw	31
  5556  0011A6  16DF               	andwf	indf2,f,c
  5557                           
  5558                           ;DS1307.h: 93: I2CStart();
  5559  0011A8  EC03  F00D         	call	i2_I2CStart	;wreg free
  5560                           
  5561                           ;DS1307.h: 95: I2CSend(0xD0);
  5562  0011AC  0ED0               	movlw	208
  5563  0011AE  ECCC  F00C         	call	i2_I2CSend
  5564                           
  5565                           ;DS1307.h: 97: I2CSend(0x00);
  5566  0011B2  0E00               	movlw	0
  5567  0011B4  ECCC  F00C         	call	i2_I2CSend
  5568                           
  5569                           ;DS1307.h: 100: for (int j = 0; j < 8; ++j) {
  5570  0011B8  0E00               	movlw	0
  5571  0011BA  6E07               	movwf	ds1307_setData@j+1,c
  5572  0011BC  0E00               	movlw	0
  5573  0011BE  6E06               	movwf	ds1307_setData@j,c
  5574  0011C0                     i2l2117:
  5575  0011C0  BE07               	btfsc	ds1307_setData@j+1,7,c
  5576  0011C2  D006               	goto	i2l2121
  5577  0011C4  5007               	movf	ds1307_setData@j+1,w,c
  5578  0011C6  E112               	bnz	i2l2127
  5579  0011C8  0E08               	movlw	8
  5580  0011CA  5C06               	subwf	ds1307_setData@j,w,c
  5581  0011CC  B0D8               	btfsc	status,0,c
  5582  0011CE  D00E               	goto	i2l2127
  5583  0011D0                     i2l2121:
  5584                           
  5585                           ;DS1307.h: 102: I2CSend(bin2bcd(iData[j]));
  5586  0011D0  5006               	movf	ds1307_setData@j,w,c
  5587  0011D2  2404               	addwf	ds1307_setData@iData,w,c
  5588  0011D4  6ED9               	movwf	fsr2l,c
  5589  0011D6  5007               	movf	ds1307_setData@j+1,w,c
  5590  0011D8  2005               	addwfc	ds1307_setData@iData+1,w,c
  5591  0011DA  6EDA               	movwf	fsr2h,c
  5592  0011DC  50DF               	movf	indf2,w,c
  5593  0011DE  EC6A  F00C         	call	_bin2bcd
  5594  0011E2  ECCC  F00C         	call	i2_I2CSend
  5595  0011E6  4A06               	infsnz	ds1307_setData@j,f,c
  5596  0011E8  2A07               	incf	ds1307_setData@j+1,f,c
  5597  0011EA  D7EA               	goto	i2l2117
  5598  0011EC                     i2l2127:
  5599                           
  5600                           ;DS1307.h: 103: }
  5601                           ;DS1307.h: 106: I2CStop();
  5602  0011EC  ECFF  F00C         	call	i2_I2CStop	;wreg free
  5603  0011F0  0012               	return		;funcret
  5604  0011F2                     __end_of_ds1307_setData:
  5605                           	opt stack 0
  5606                           pclatu	equ	0xFFB
  5607                           pclath	equ	0xFFA
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           prodh	equ	0xFF4
  5613                           prodl	equ	0xFF3
  5614                           intcon	equ	0xFF2
  5615                           indf0	equ	0xFEF
  5616                           postinc0	equ	0xFEE
  5617                           fsr0h	equ	0xFEA
  5618                           fsr0l	equ	0xFE9
  5619                           wreg	equ	0xFE8
  5620                           fsr1h	equ	0xFE2
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function i2_I2CStop *****************
  5630 ;; Defined at:
  5631 ;;		line 32 in file "I2C.h"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		None
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5648 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5649 ;;Total ram usage:        0 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		_ds1307_setData
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text38
  5659  0019FE                     __ptext38:
  5660                           	opt stack 0
  5661  0019FE                     i2_I2CStop:
  5662                           	opt stack 24
  5663                           
  5664                           ;I2C.h: 34: PEN = 1;
  5665                           
  5666                           ;incstack = 0
  5667  0019FE  84C5               	bsf	4037,2,c	;volatile
  5668  001A00                     i2l154:
  5669  001A00  A4C5               	btfss	4037,2,c	;volatile
  5670  001A02  0012               	return	
  5671  001A04  D7FD               	goto	i2l154
  5672  001A06                     __end_ofi2_I2CStop:
  5673                           	opt stack 0
  5674                           pclatu	equ	0xFFB
  5675                           pclath	equ	0xFFA
  5676                           tblptru	equ	0xFF8
  5677                           tblptrh	equ	0xFF7
  5678                           tblptrl	equ	0xFF6
  5679                           tablat	equ	0xFF5
  5680                           prodh	equ	0xFF4
  5681                           prodl	equ	0xFF3
  5682                           intcon	equ	0xFF2
  5683                           indf0	equ	0xFEF
  5684                           postinc0	equ	0xFEE
  5685                           fsr0h	equ	0xFEA
  5686                           fsr0l	equ	0xFE9
  5687                           wreg	equ	0xFE8
  5688                           fsr1h	equ	0xFE2
  5689                           fsr1l	equ	0xFE1
  5690                           indf2	equ	0xFDF
  5691                           postinc2	equ	0xFDE
  5692                           postdec2	equ	0xFDD
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function i2_I2CStart *****************
  5698 ;; Defined at:
  5699 ;;		line 19 in file "I2C.h"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      void 
  5706 ;; Registers used:
  5707 ;;		None
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5713 ;;      Params:         0       0       0       0       0       0       0       0       0
  5714 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5716 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5717 ;;Total ram usage:        0 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; This function calls:
  5720 ;;		Nothing
  5721 ;; This function is called by:
  5722 ;;		_ds1307_setData
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           	psect	text39
  5727  001A06                     __ptext39:
  5728                           	opt stack 0
  5729  001A06                     i2_I2CStart:
  5730                           	opt stack 24
  5731                           
  5732                           ;I2C.h: 21: SEN = 1;
  5733                           
  5734                           ;incstack = 0
  5735  001A06  80C5               	bsf	4037,0,c	;volatile
  5736  001A08                     i2l148:
  5737  001A08  A0C5               	btfss	4037,0,c	;volatile
  5738  001A0A  0012               	return	
  5739  001A0C  D7FD               	goto	i2l148
  5740  001A0E                     __end_ofi2_I2CStart:
  5741                           	opt stack 0
  5742                           pclatu	equ	0xFFB
  5743                           pclath	equ	0xFFA
  5744                           tblptru	equ	0xFF8
  5745                           tblptrh	equ	0xFF7
  5746                           tblptrl	equ	0xFF6
  5747                           tablat	equ	0xFF5
  5748                           prodh	equ	0xFF4
  5749                           prodl	equ	0xFF3
  5750                           intcon	equ	0xFF2
  5751                           indf0	equ	0xFEF
  5752                           postinc0	equ	0xFEE
  5753                           fsr0h	equ	0xFEA
  5754                           fsr0l	equ	0xFE9
  5755                           wreg	equ	0xFE8
  5756                           fsr1h	equ	0xFE2
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function i2_I2CSend *****************
  5766 ;; Defined at:
  5767 ;;		line 96 in file "I2C.h"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  dat             1    wreg     unsigned char 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  dat             1    1[COMRAM] unsigned char 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      void 
  5774 ;; Registers used:
  5775 ;;		wreg, status,2, status,0, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0
  5782 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5784 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5785 ;;Total ram usage:        1 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    1
  5788 ;; This function calls:
  5789 ;;		i2_I2CWait
  5790 ;; This function is called by:
  5791 ;;		_ds1307_setData
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text40
  5796  001998                     __ptext40:
  5797                           	opt stack 0
  5798  001998                     i2_I2CSend:
  5799                           	opt stack 23
  5800                           
  5801                           ;incstack = 0
  5802                           ;i2I2CSend@dat stored from wreg
  5803  001998  6E02               	movwf	i2I2CSend@dat,c
  5804                           
  5805                           ;I2C.h: 98: SSPBUF = dat;
  5806  00199A  C002  FFC9         	movff	i2I2CSend@dat,4041	;volatile
  5807  00199E                     i2l184:
  5808  00199E  B0C7               	btfsc	4039,0,c	;volatile
  5809  0019A0  D7FE               	goto	i2l184
  5810                           
  5811                           ;I2C.h: 100: I2CWait();
  5812  0019A2  ECB3  F00C         	call	i2_I2CWait	;wreg free
  5813  0019A6  0012               	return		;funcret
  5814  0019A8                     __end_ofi2_I2CSend:
  5815                           	opt stack 0
  5816                           pclatu	equ	0xFFB
  5817                           pclath	equ	0xFFA
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           indf0	equ	0xFEF
  5826                           postinc0	equ	0xFEE
  5827                           fsr0h	equ	0xFEA
  5828                           fsr0l	equ	0xFE9
  5829                           wreg	equ	0xFE8
  5830                           fsr1h	equ	0xFE2
  5831                           fsr1l	equ	0xFE1
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           fsr2h	equ	0xFDA
  5836                           fsr2l	equ	0xFD9
  5837                           status	equ	0xFD8
  5838                           
  5839 ;; *************** function i2_I2CWait *****************
  5840 ;; Defined at:
  5841 ;;		line 83 in file "I2C.h"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      void 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5855 ;;      Params:         0       0       0       0       0       0       0       0       0
  5856 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5857 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5858 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5859 ;;Total ram usage:        1 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; This function calls:
  5862 ;;		Nothing
  5863 ;; This function is called by:
  5864 ;;		i2_I2CSend
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           	psect	text41
  5869  001966                     __ptext41:
  5870                           	opt stack 0
  5871  001966                     i2_I2CWait:
  5872                           	opt stack 23
  5873  001966                     i2l1791:
  5874  001966  CFC5 F001          	movff	4037,??i2_I2CWait	;volatile
  5875  00196A  0E1F               	movlw	31
  5876  00196C  1601               	andwf	??i2_I2CWait,f,c
  5877  00196E  A4D8               	btfss	status,2,c
  5878  001970  D7FA               	goto	i2l1791
  5879  001972  A4C7               	btfss	4039,2,c	;volatile
  5880  001974  0012               	return	
  5881  001976  D7F7               	goto	i2l1791
  5882  001978                     __end_ofi2_I2CWait:
  5883                           	opt stack 0
  5884                           pclatu	equ	0xFFB
  5885                           pclath	equ	0xFFA
  5886                           tblptru	equ	0xFF8
  5887                           tblptrh	equ	0xFF7
  5888                           tblptrl	equ	0xFF6
  5889                           tablat	equ	0xFF5
  5890                           prodh	equ	0xFF4
  5891                           prodl	equ	0xFF3
  5892                           intcon	equ	0xFF2
  5893                           indf0	equ	0xFEF
  5894                           postinc0	equ	0xFEE
  5895                           fsr0h	equ	0xFEA
  5896                           fsr0l	equ	0xFE9
  5897                           wreg	equ	0xFE8
  5898                           fsr1h	equ	0xFE2
  5899                           fsr1l	equ	0xFE1
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _bin2bcd *****************
  5908 ;; Defined at:
  5909 ;;		line 15 in file "DS1307.h"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  binary_value    1    wreg     unsigned char 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  binary_value    1    0[COMRAM] unsigned char 
  5914 ;;  temp            1    2[COMRAM] unsigned char 
  5915 ;;  retval          1    1[COMRAM] unsigned char 
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      unsigned char 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2, status,0
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5925 ;;      Params:         0       0       0       0       0       0       0       0       0
  5926 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5928 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5929 ;;Total ram usage:        3 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_ds1307_setData
  5935 ;;		_ds1307_Init
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text42
  5940  0018D4                     __ptext42:
  5941                           	opt stack 0
  5942  0018D4                     _bin2bcd:
  5943                           	opt stack 24
  5944                           
  5945                           ;incstack = 0
  5946                           ;bin2bcd@binary_value stored from wreg
  5947  0018D4  6E01               	movwf	bin2bcd@binary_value,c
  5948                           
  5949                           ;DS1307.h: 17: unsigned char temp;
  5950                           ;DS1307.h: 18: unsigned char retval;
  5951                           ;DS1307.h: 19: temp = binary_value;
  5952  0018D6  C001  F003         	movff	bin2bcd@binary_value,bin2bcd@temp
  5953                           
  5954                           ;DS1307.h: 20: retval = 0;
  5955  0018DA  0E00               	movlw	0
  5956  0018DC  6E02               	movwf	bin2bcd@retval,c
  5957  0018DE                     i2l1857:
  5958                           
  5959                           ;DS1307.h: 23: {
  5960                           ;DS1307.h: 26: if(temp >= 10)
  5961  0018DE  0E09               	movlw	9
  5962  0018E0  6403               	cpfsgt	bin2bcd@temp,c
  5963  0018E2  D005               	goto	i2l1861
  5964                           
  5965                           ;DS1307.h: 27: {
  5966                           ;DS1307.h: 28: temp -= 10;
  5967  0018E4  0E0A               	movlw	10
  5968  0018E6  5E03               	subwf	bin2bcd@temp,f,c
  5969                           
  5970                           ;DS1307.h: 29: retval += 0x10;
  5971  0018E8  0E10               	movlw	16
  5972  0018EA  2602               	addwf	bin2bcd@retval,f,c
  5973                           
  5974                           ;DS1307.h: 30: }
  5975  0018EC  D7F8               	goto	i2l1857
  5976  0018EE                     i2l1861:
  5977                           
  5978                           ;DS1307.h: 31: else
  5979                           ;DS1307.h: 32: {
  5980                           ;DS1307.h: 33: retval += temp;
  5981  0018EE  5003               	movf	bin2bcd@temp,w,c
  5982  0018F0  2602               	addwf	bin2bcd@retval,f,c
  5983                           
  5984                           ;DS1307.h: 35: }
  5985                           ;DS1307.h: 36: }
  5986                           ;DS1307.h: 38: return retval;
  5987                           
  5988                           ;DS1307.h: 34: break;
  5989  0018F2  5002               	movf	bin2bcd@retval,w,c
  5990  0018F4  0012               	return	
  5991  0018F6                     __end_of_bin2bcd:
  5992                           	opt stack 0
  5993                           pclatu	equ	0xFFB
  5994                           pclath	equ	0xFFA
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           indf0	equ	0xFEF
  6003                           postinc0	equ	0xFEE
  6004                           fsr0h	equ	0xFEA
  6005                           fsr0l	equ	0xFE9
  6006                           wreg	equ	0xFE8
  6007                           fsr1h	equ	0xFE2
  6008                           fsr1l	equ	0xFE1
  6009                           indf2	equ	0xFDF
  6010                           postinc2	equ	0xFDE
  6011                           postdec2	equ	0xFDD
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function _clearBuffer *****************
  6017 ;; Defined at:
  6018 ;;		line 99 in file "Main.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  buffer          2    0[COMRAM] PTR unsigned char 
  6021 ;;		 -> uartBuffer(16), 
  6022 ;;  bufferSize      2    2[COMRAM] unsigned int 
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  i               2    4[COMRAM] int 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      void 
  6027 ;; Registers used:
  6028 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6034 ;;      Params:         4       0       0       0       0       0       0       0       0
  6035 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6036 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6037 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6038 ;;Total ram usage:        6 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; This function calls:
  6041 ;;		Nothing
  6042 ;; This function is called by:
  6043 ;;		_UART_ISR
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text43
  6048  001886                     __ptext43:
  6049                           	opt stack 0
  6050  001886                     _clearBuffer:
  6051                           	opt stack 25
  6052                           
  6053                           ;Main.c: 101: for(int i = 0; i < bufferSize; ++i)
  6054                           
  6055                           ;incstack = 0
  6056  001886  0E00               	movlw	0
  6057  001888  6E06               	movwf	clearBuffer@i+1,c
  6058  00188A  0E00               	movlw	0
  6059  00188C  6E05               	movwf	clearBuffer@i,c
  6060  00188E  D00A               	goto	i2l2163
  6061  001890                     i2l2159:
  6062                           
  6063                           ;Main.c: 102: buffer[i] = 0x00;
  6064  001890  5005               	movf	clearBuffer@i,w,c
  6065  001892  2401               	addwf	clearBuffer@buffer,w,c
  6066  001894  6ED9               	movwf	fsr2l,c
  6067  001896  5006               	movf	clearBuffer@i+1,w,c
  6068  001898  2002               	addwfc	clearBuffer@buffer+1,w,c
  6069  00189A  6EDA               	movwf	fsr2h,c
  6070  00189C  0E00               	movlw	0
  6071  00189E  6EDF               	movwf	indf2,c
  6072  0018A0  4A05               	infsnz	clearBuffer@i,f,c
  6073  0018A2  2A06               	incf	clearBuffer@i+1,f,c
  6074  0018A4                     i2l2163:
  6075  0018A4  5003               	movf	clearBuffer@bufferSize,w,c
  6076  0018A6  5C05               	subwf	clearBuffer@i,w,c
  6077  0018A8  5004               	movf	clearBuffer@bufferSize+1,w,c
  6078  0018AA  5806               	subwfb	clearBuffer@i+1,w,c
  6079  0018AC  B0D8               	btfsc	status,0,c
  6080  0018AE  0012               	return	
  6081  0018B0  D7EF               	goto	i2l2159
  6082  0018B2                     __end_of_clearBuffer:
  6083                           	opt stack 0
  6084                           pclatu	equ	0xFFB
  6085                           pclath	equ	0xFFA
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           intcon	equ	0xFF2
  6093                           indf0	equ	0xFEF
  6094                           postinc0	equ	0xFEE
  6095                           fsr0h	equ	0xFEA
  6096                           fsr0l	equ	0xFE9
  6097                           wreg	equ	0xFE8
  6098                           fsr1h	equ	0xFE2
  6099                           fsr1l	equ	0xFE1
  6100                           indf2	equ	0xFDF
  6101                           postinc2	equ	0xFDE
  6102                           postdec2	equ	0xFDD
  6103                           fsr2h	equ	0xFDA
  6104                           fsr2l	equ	0xFD9
  6105                           status	equ	0xFD8
  6106                           
  6107 ;; *************** function _UART_Read *****************
  6108 ;; Defined at:
  6109 ;;		line 40 in file "UART.h"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;		None
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;		None
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  1    wreg      unsigned char 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6123 ;;      Params:         0       0       0       0       0       0       0       0       0
  6124 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6126 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6127 ;;Total ram usage:        0 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_UART_ISR
  6133 ;;		_UART_Read_Text
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text44
  6138  001A0E                     __ptext44:
  6139                           	opt stack 0
  6140  001A0E                     _UART_Read:
  6141                           	opt stack 25
  6142  001A0E                     i2l121:
  6143  001A0E  AA9E               	btfss	3998,5,c	;volatile
  6144  001A10  D7FE               	goto	i2l121
  6145                           
  6146                           ;UART.h: 43: return RCREG;
  6147  001A12  50AE               	movf	4014,w,c	;volatile
  6148  001A14  0012               	return	
  6149  001A16                     __end_of_UART_Read:
  6150                           	opt stack 0
  6151                           pclatu	equ	0xFFB
  6152                           pclath	equ	0xFFA
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           intcon	equ	0xFF2
  6160                           indf0	equ	0xFEF
  6161                           postinc0	equ	0xFEE
  6162                           fsr0h	equ	0xFEA
  6163                           fsr0l	equ	0xFE9
  6164                           wreg	equ	0xFE8
  6165                           fsr1h	equ	0xFE2
  6166                           fsr1l	equ	0xFE1
  6167                           indf2	equ	0xFDF
  6168                           postinc2	equ	0xFDE
  6169                           postdec2	equ	0xFDD
  6170                           fsr2h	equ	0xFDA
  6171                           fsr2l	equ	0xFD9
  6172                           status	equ	0xFD8
  6173                           pclatu	equ	0xFFB
  6174                           pclath	equ	0xFFA
  6175                           tblptru	equ	0xFF8
  6176                           tblptrh	equ	0xFF7
  6177                           tblptrl	equ	0xFF6
  6178                           tablat	equ	0xFF5
  6179                           prodh	equ	0xFF4
  6180                           prodl	equ	0xFF3
  6181                           intcon	equ	0xFF2
  6182                           indf0	equ	0xFEF
  6183                           postinc0	equ	0xFEE
  6184                           fsr0h	equ	0xFEA
  6185                           fsr0l	equ	0xFE9
  6186                           wreg	equ	0xFE8
  6187                           fsr1h	equ	0xFE2
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196                           	psect	rparam
  6197  0000                     pclatu	equ	0xFFB
  6198                           pclath	equ	0xFFA
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           indf0	equ	0xFEF
  6207                           postinc0	equ	0xFEE
  6208                           fsr0h	equ	0xFEA
  6209                           fsr0l	equ	0xFE9
  6210                           wreg	equ	0xFE8
  6211                           fsr1h	equ	0xFE2
  6212                           fsr1l	equ	0xFE1
  6213                           indf2	equ	0xFDF
  6214                           postinc2	equ	0xFDE
  6215                           postdec2	equ	0xFDD
  6216                           fsr2h	equ	0xFDA
  6217                           fsr2l	equ	0xFD9
  6218                           status	equ	0xFD8
  6219                           
  6220                           	psect	temp
  6221  000040                     btemp:
  6222                           	opt stack 0
  6223  000040                     	ds	1
  6224  0000                     int$flags	set	btemp
  6225                           pclatu	equ	0xFFB
  6226                           pclath	equ	0xFFA
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           intcon	equ	0xFF2
  6234                           indf0	equ	0xFEF
  6235                           postinc0	equ	0xFEE
  6236                           fsr0h	equ	0xFEA
  6237                           fsr0l	equ	0xFE9
  6238                           wreg	equ	0xFE8
  6239                           fsr1h	equ	0xFE2
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           postdec2	equ	0xFDD
  6244                           fsr2h	equ	0xFDA
  6245                           fsr2l	equ	0xFD9
  6246                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    10
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      63
    BANK0           160     29      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_9(CODE[3]), STR_8(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> showLoadScreen@s(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    showClock@RTC_data	PTR unsigned char  size(2) Largest target is 8
		 -> main@RTC_data(BANK0[8]), 

    clearBuffer@buffer	PTR unsigned char  size(2) Largest target is 16
		 -> uartBuffer(COMRAM[16]), 

    ds1307_getData@buffer	PTR unsigned char  size(2) Largest target is 8
		 -> main@RTC_data(BANK0[8]), 

    ds1307_setData@iData	PTR unsigned char  size(2) Largest target is 16
		 -> uartBuffer(COMRAM[16]), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_12(CODE[16]), STR_11(CODE[15]), STR_10(CODE[16]), showLoadScreen@s(BANK0[10]), 
		 -> STR_7(CODE[11]), STR_6(CODE[16]), STR_5(CODE[17]), STR_4(CODE[4]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), uartBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _showLoadScreen->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _showClock->_LCD_Write_String
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Port
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd
    _ds1307_getData->_bcd2bin
    _I2CSend->_I2CWait
    _I2CRead->_I2CWait
    _UART_Init->___lldiv
    _LCD_Init->_LCD_Cmd
    _LCD_Cmd->_LCD_Port

Critical Paths under _UART_ISR in COMRAM

    _UART_ISR->i2_LCD_Write_String
    i2_LCD_Write_String->i2_LCD_Write_Char
    i2_LCD_Write_Char->i2_LCD_Port
    i2_LCD_Set_Cursor->i2_LCD_Cmd
    i2_LCD_Clear->i2_LCD_Cmd
    i2_LCD_Cmd->i2_LCD_Port
    _ds1307_setData->_bin2bcd
    i2_I2CSend->i2_I2CWait

Critical Paths under _main in BANK0

    _main->_showLoadScreen
    _showLoadScreen->_sprintf

Critical Paths under _UART_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _UART_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _UART_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _UART_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _UART_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _UART_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _UART_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   20016
                                             21 BANK0      8     8      0
                            _I2CInit
                          _LCD_Clear
                           _LCD_Init
                   _LCD_Write_String
                          _UART_Init
                           _delay_ms
                     _ds1307_getData
                          _showClock
                     _showLoadScreen
 ---------------------------------------------------------------------------------
 (1) _showLoadScreen                                      14    14      0    9371
                                              7 BANK0     14    14      0
                          _LCD_Clear
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                   _LCD_Write_String
                            ___awdiv
                            ___awmod
                           _delay_ms
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    1655
                                             38 COMRAM     6     0      6
                                              0 BANK0      7     7      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             33 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             26 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     810
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _showClock                                            3     1      2    6997
                                             37 COMRAM     3     1      2
                          _LCD_Clear
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                   _LCD_Write_String
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1665
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1523
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     6     4      2    1287
                                             31 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       3     3      0     254
                                             28 COMRAM     3     3      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1    1602
                                             30 COMRAM     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0     155
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _ds1307_getData                                       4     2      2     289
                                             29 COMRAM     4     2      2
                             _I2CAck
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (2) _bcd2bin                                              3     3      0      91
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2CSend                                              1     1      0      22
                                             27 COMRAM     1     1      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (2) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2CRead                                              1     1      0       0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (3) _I2CWait                                              1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2CNak                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2CAck                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4     718
                                             39 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     279
                                             30 COMRAM     1     1      0
                            _LCD_Cmd
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (3) _LCD_Cmd                                              2     2      0     155
                                             28 COMRAM     2     2      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (4) _LCD_Port                                             2     2      0     124
                                             26 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _UART_ISR                                            15    15      0    2529
                                             11 COMRAM    15    15      0
                          _UART_Read
                        _clearBuffer
                     _ds1307_setData
                        i2_LCD_Clear
                   i2_LCD_Set_Cursor
                 i2_LCD_Write_String
                         i2_delay_ms
 ---------------------------------------------------------------------------------
 (6) i2_delay_ms                                           5     3      2     124
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) i2_LCD_Write_String                                   6     4      2     559
                                              5 COMRAM     6     4      2
                   i2_LCD_Write_Char
 ---------------------------------------------------------------------------------
 (7) i2_LCD_Write_Char                                     3     3      0     254
                                              2 COMRAM     3     3      0
                         i2_LCD_Port
 ---------------------------------------------------------------------------------
 (6) i2_LCD_Set_Cursor                                     5     4      1     720
                                              4 COMRAM     5     4      1
                          i2_LCD_Cmd
 ---------------------------------------------------------------------------------
 (6) i2_LCD_Clear                                          0     0      0     155
                          i2_LCD_Cmd
 ---------------------------------------------------------------------------------
 (7) i2_LCD_Cmd                                            2     2      0     155
                                              2 COMRAM     2     2      0
                         i2_LCD_Port
 ---------------------------------------------------------------------------------
 (8) i2_LCD_Port                                           2     2      0     124
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ds1307_setData                                       4     2      2     401
                                              3 COMRAM     4     2      2
                            _bin2bcd
                          i2_I2CSend
                         i2_I2CStart
                          i2_I2CStop
 ---------------------------------------------------------------------------------
 (7) i2_I2CStop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_I2CStart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_I2CSend                                            1     1      0      22
                                              1 COMRAM     1     1      0
                          i2_I2CWait
 ---------------------------------------------------------------------------------
 (8) i2_I2CWait                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _bin2bcd                                              3     3      0      93
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _clearBuffer                                          6     2      4     474
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2CInit
   _LCD_Clear
     _LCD_Cmd
       _LCD_Port
   _LCD_Init
     _LCD_Cmd
       _LCD_Port
     _LCD_Port
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Port
   _UART_Init
     ___lldiv
   _delay_ms
   _ds1307_getData
     _I2CAck
     _I2CNak
     _I2CRead
       _I2CWait
     _I2CRestart
     _I2CSend
       _I2CWait
     _I2CStart
     _I2CStop
     _bcd2bin
   _showClock
     _LCD_Clear
       _LCD_Cmd
         _LCD_Port
     _LCD_Set_Cursor
       _LCD_Cmd
         _LCD_Port
     _LCD_Write_Char
       _LCD_Port
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_Port
     ___awdiv
     ___awmod
   _showLoadScreen
     _LCD_Clear
       _LCD_Cmd
         _LCD_Port
     _LCD_Set_Cursor
       _LCD_Cmd
         _LCD_Port
     _LCD_Write_Char
       _LCD_Port
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_Port
     ___awdiv
     ___awmod
     _delay_ms
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)

 _UART_ISR (ROOT)
   _UART_Read
   _clearBuffer
   _ds1307_setData
     _bin2bcd
     i2_I2CSend
       i2_I2CWait
     i2_I2CStart
     i2_I2CStop
   i2_LCD_Clear
     i2_LCD_Cmd
       i2_LCD_Port
   i2_LCD_Set_Cursor
     i2_LCD_Cmd
       i2_LCD_Port
   i2_LCD_Write_String
     i2_LCD_Write_Char
       i2_LCD_Port
   i2_delay_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1D      1E       5       18.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      3F       1       67.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D      20        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Jun 27 19:37:53 2016

                          _i 002E         ds1307_getData@buffer 001E                           _BF 007E38  
               ___awdiv@sign 0020                  __CFG_BORV$3 000000             ??_ds1307_getData 0020  
        __size_of_I2CRestart 0008                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
           ??_showLoadScreen 002D                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l222 184C                          l160 19F8                          l154 19E8  
                        l250 09E8                          l172 19D6                          l148 19F0  
                        l166 19E0                          l190 19B8                          l184 197E  
                        l287 10BC                          l706 17B4                          l643 1372  
                        l696 16D2                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _SEN 007E28                 __CFG_BOR$OFF 000000  
            __end_of_I2CInit 1998              __end_of_I2CRead 19C4              __end_of_I2CSend 1988  
           ??_ds1307_setData 0006              __end_of_I2CWait 1966                 ___awmod@sign 0020  
            __end_of_I2CStop 19EE                  ?i2_I2CStart 0001                          wreg 000FE8  
               __CFG_FOSC$HS 000000                   i2_delay_ms 185A              __end_of_LCD_Cmd 1916  
               __CFG_LVP$OFF 000000               _LCD_Set_Cursor 16DC                 __CFG_WDT$OFF 000000  
                       l2011 1334                         l2007 1324                         l2009 1330  
                       l2019 1364                         l2151 167E                         l2143 1654  
                       l2155 1684                         l2139 1644                         l2149 167A  
                       l3037 1254                         l3029 1226                         l2611 1032  
                       l2541 16AC                         l2613 103A                         l2605 1016  
                       l2711 1508                         l2703 14EE                         l1745 1954  
                       l2713 1510                         l2801 09C8                         l2537 16A0  
                       l2561 1796                         l2625 1086                         l2617 1042  
                       l2715 1514                         l2723 1532                         l2707 14FA  
                       l2539 16A8                         l2643 1118                         l2619 1066  
        LCD_Write_String@str 0020                         l2581 1704                         l2549 16C8  
                       l2565 17AA                         l2557 178A                         l2637 10C2  
                       l2645 1124                         l2591 138E                         l2671 12B8  
                       l2727 1540                         l2719 1528                         l2559 1792  
                       l2647 113E                         l2673 12C0                         l2665 12A2  
                       l2833 0B52                         l2595 13C2                         l2691 12F8  
                       l2683 12E0                         l2675 12C4                         l2659 1292  
                       l2843 0B76                         l2837 0B68                         l2687 12EA  
                       l2599 1838                         l2881 0CAC                         l2849 0BA4  
                       l2779 0FF0                         l2875 0C8C                         l2877 0C98  
                       STR_1 081C                         STR_2 082D                         STR_3 082D  
                       STR_4 0888                         STR_5 080B                         STR_6 085E  
                       STR_7 087D                         STR_8 088C                         STR_9 088C  
                       _BRGH 007D62                         _CREN 007D5C                         u2010 15A4  
                       u2008 158A                         u2200 13EE                         u2028 15A6  
                       u2207 13E4                         u2500 0BA2                         u2190 13BA  
                       u2415 0ED2                         u2425 0F28                         u2445 0F6C  
                       u2197 13B0                         u2455 0FC2                         u2707 1908  
                       u1950 1556                         u2647 183E                         u2657 17DA  
                       u1970 156E                         u2667 17EC                         _PEIE 007F96  
                       u2677 1402                         u1990 1588                         u2687 1416  
                       u1968 1558                         u2697 142C                         _RCIE 007CED  
                       u1988 1570                         _RCIF 007CF5                         _RCEN 007E2B  
                       _SPEN 007D5F                         _RSEN 007E29                         _TRMT 007D61  
                       _TXEN 007D65                         _SYNC 007D64            ?_LCD_Write_String 0020  
                       _main 11F2                  ?i2_LCD_Port 0001           __size_of_LCD_Clear 000E  
                       fsr0h 000FEA                         fsr1h 000FE2                         indf0 000FEF  
                       fsr0l 000FE9                         fsr2h 000FDA                         fsr1l 000FE1  
                       indf2 000FDF                         fsr2l 000FD9                         btemp 0040  
           __end_of_I2CStart 19F6                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 0016           ??_LCD_Write_String 0022  
              __CFG_IESO$OFF 000000           __size_ofi2_I2CSend 0010           __size_ofi2_I2CWait 0012  
         __size_ofi2_I2CStop 0008                 ___param_bank 000010           __size_ofi2_LCD_Cmd 0020  
           __end_of_LCD_Init 1468             __end_of_LCD_Port 15B6                __CFG_PLLDIV$1 000000  
            __end_of_bcd2bin 18D4             bcd2bin@bcd_value 001C                        ?_main 0001  
                      _ACKEN 007E2C                        _ACKDT 007E2D              __end_of___awdiv 1302  
                      STR_10 083E                        STR_11 086E                        STR_12 084E  
            __end_of___awmod 154A              __end_of___lldiv 1384              ___awdiv@divisor 001D  
            __end_of_bin2bcd 18F6              __end_of___lwdiv 16DC                        i2l121 1A0E  
            __end_of___lwmod 17BE                        i2l222 1878                        i2l154 1A00  
                      i2l243 0E84                        i2l148 1A08                        i2l184 199E  
            ___awdiv@counter 001F                        _RCREG 000FAE                        _SPBRG 000FAF  
              __CFG_USBDIV$1 000000                        _TRISD 000F95                        _TXREG 000FAD  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000       __end_of_LCD_Set_Cursor 172C  
             __CFG_EBTR2$OFF 000000             __end_of_UART_ISR 0EC0               __CFG_EBTR3$OFF 000000  
         __size_of_UART_Init 0148           __size_of_UART_Read 0008                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                 ?i2_LCD_Clear 0001                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 080B     __end_ofi2_LCD_Set_Cursor 177C  
                      tablat 000FF5                        status 000FD8              __end_of_sprintf 114C  
                i2delay_ms@i 0004               __CFG_ICPRT$OFF 000000         __size_of_clearBuffer 002C  
             __CFG_MCLRE$OFF 000000               _LCD_Write_Char 17BE                 i2I2CSend@dat 0002  
            __initialization 1936          __size_ofi2_I2CStart 0008                 __end_of_main 127E  
                  ??_I2CInit 001B                    ??_I2CRead 001C                    ??_I2CSend 001C  
                  ??_I2CWait 001B                    ??_I2CStop 001B                       ??_main 002E  
          __end_of_LCD_Clear 19B6                __activetblptr 000002          __size_ofi2_LCD_Port 006C  
                  ??_LCD_Cmd 001D                  ?i2_delay_ms 0001              __CFG_CCP2MX$OFF 000000  
            ?_LCD_Set_Cursor 001F            __end_ofi2_I2CSend 19A8            __end_ofi2_I2CWait 1978  
          __end_ofi2_I2CStop 1A06                       _I2CAck 19DC                       _I2CNak 19D2  
           ___awdiv@dividend 001B                 ??_I2CRestart 001B            __end_ofi2_LCD_Cmd 1936  
                     i2l2121 11D0                       i2l3001 0E82                       i2l2117 11C0  
                     i2l2127 11EC                       i2l2163 18A4                       i2l2159 1890  
                     i2l2299 1864                       i2l1861 18EE                       i2l1791 1966  
                     i2l1857 18DE                       i2l2913 14A6                       i2l2909 1472  
                     i2l2949 0D9E                       i2l2981 0E20                       i2l2975 0E0A  
                     i2l2899 1754                       _SSPADD 000FC8                       _TRISB0 007C98  
                     _TRISB1 007C99                       _TRISC6 007CA6                       _TRISC7 007CA7  
                     _SSPBUF 000FC9       __end_of_LCD_Write_Char 17F6             __end_of_delay_ms 185A  
             __CFG_XINST$OFF 000000            __end_of_UART_Init 1008            __end_of_UART_Read 1A16  
                  ??_bcd2bin 001B     __end_ofi2_LCD_Write_Char 182E                    ??___awdiv 001F  
                  ??___awmod 001F                    ??___lldiv 0023                    ??_bin2bcd 0001  
                  ??___lwdiv 001F          i2LCD_Write_String@i 000A                    ??___lwmod 0026  
                     clear_0 1940             ___awdiv@quotient 0021              ___awmod@divisor 001D  
            ___awmod@counter 001F           __end_of_I2CRestart 19FE                    ?_I2CStart 0001  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                    ??_sprintf 002D              LCD_Set_Cursor@t 0022  
            LCD_Set_Cursor@x 001F              LCD_Set_Cursor@y 0020              LCD_Set_Cursor@z 0021  
                 __accesstop 0060      __end_of__initialization 1946                    ?_LCD_Init 0001  
            __CFG_PBADEN$OFF 000000                    ?_LCD_Port 0001                ___rparam_used 000001  
            ?_LCD_Write_Char 0001               __pcstackCOMRAM 0001          __size_ofi2_delay_ms 002C  
                  LCD_Port@a 001C                    ?_UART_ISR 0001  __size_ofi2_LCD_Write_String 0072  
          i2LCD_Write_Char@c 0005            i2LCD_Write_Char@y 0004                 ??i2_I2CStart 0001  
                 ??_I2CStart 001B                      ?_I2CAck 0001         i2LCD_Write_Char@temp 0003  
                    ?_I2CNak 0001         __size_ofi2_LCD_Clear 000E                   __pbssBANK0 007D  
                 ??_LCD_Init 001F                 ??i2_LCD_Port 0001                   ??_LCD_Port 001B  
               i2LCD_Cmd@cmd 0004                   I2CSend@dat 001C           __end_ofi2_I2CStart 1A0E  
                 ??_UART_ISR 000C         i2LCD_Set_Cursor@temp 0009                      _I2CInit 1988  
                    _I2CRead 19B6                      _I2CSend 1978                      _I2CWait 1954  
                  UART_ISR@c 001A                      _I2CStop 19E6    __size_of_LCD_Write_String 0072  
         __size_of_showClock 026E                      _LCD_Cmd 18F6           __end_ofi2_LCD_Port 1622  
                  ?_delay_ms 001B                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                 _isSetClock 007D              __size_of_I2CAck 000A              __size_of_I2CNak 000A  
                    _SSPSTAT 000FC7             delay_ms@duration 001B            ?i2_LCD_Set_Cursor 0005  
            __CFG_VREGEN$OFF 000000           ??i2_LCD_Set_Cursor 0006                      __Hparam 0000  
                    __Lparam 0000                      _bcd2bin 18B2                      ___awdiv 127E  
                    ___awmod 14DA                      ___lldiv 1302                      _bin2bcd 18D4  
                    ___lwdiv 168A                      ___lwmod 177C                 __psmallconst 0800  
            __CFG_STVREN$OFF 000000                      __pcinit 1936                      __ramtop 0800  
           ??_LCD_Set_Cursor 0020                      __ptext0 11F2                      __ptext1 0AFE  
                    __ptext2 1008                      __ptext3 177C                      __ptext4 168A  
                    __ptext5 182E                      __ptext6 0890                      __ptext7 14DA  
                    __ptext8 127E                      __ptext9 1384                      _dpowers 0801  
           ___awmod@dividend 001B                 ??i2_delay_ms 0003                   ??_delay_ms 001D  
                  _LCD_Clear 19A8      __size_of_ds1307_getData 0068                      _sprintf 1008  
             __pintcode_body 0CF6      __size_of_showLoadScreen 01F8         end_of_initialization 1946  
                  i2_I2CSend 1998                    i2_I2CWait 1966                    i2_I2CStop 19FE  
              ??_clearBuffer 0005      __size_of_ds1307_setData 00A6                __Lmediumconst 0000  
                    int_func 0CF6            __end_of_showClock 0AFE                    i2_LCD_Cmd 1916  
            ___lldiv@divisor 001F              ___lldiv@counter 0027                   _uartBuffer 0030  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                bcd2bin@temp 001D           __end_ofi2_delay_ms 1886            ?i2_LCD_Write_Char 0001  
                  _UART_Init 0EC0                    _UART_Read 1A0E           ??i2_LCD_Write_Char 0003  
                  _PORTBbits 000F81                    _PORTDbits 000F83                    _TRISBbits 000F93  
                 ?_LCD_Clear 0001            __size_of_I2CStart 0008            LCD_Write_String@i 0024  
           ??_LCD_Write_Char 001D               __end_of_I2CAck 19E6               __end_of_I2CNak 19DC  
                 ?i2_I2CSend 0001                   ?i2_I2CWait 0001                   ?i2_I2CStop 0001  
                 LCD_Cmd@cmd 001E                   ?i2_LCD_Cmd 0001            __size_of_LCD_Init 0072  
          __size_of_LCD_Port 006C          __end_of_clearBuffer 18B2            showClock@RTC_data 0026  
           _LCD_Write_String 1384                   ?_UART_Init 0028                   ?_UART_Read 0001  
          __size_of_UART_ISR 0EB8          start_initialization 1936          bin2bcd@binary_value 0001  
                   ??_I2CAck 001B                     ??_I2CNak 001B                bin2bcd@retval 0002  
 __end_ofi2_LCD_Write_String 14DA             __CFG_LPT1OSC$OFF 000000              LCD_Write_Char@c 001F  
                   ?_I2CInit 0001                     ?_I2CRead 0001              LCD_Write_Char@y 001E  
                   ?_I2CSend 0001                     ?_I2CWait 0001                     ?_I2CStop 0001  
            ds1307_getData@j 0020                     ?_LCD_Cmd 0001                  __pbssCOMRAM 002E  
              __pcstackBANK0 0060                ??i2_LCD_Clear 0005                  ??_LCD_Clear 001F  
             _ds1307_getData 1622              showLoadScreen@j 0073              showLoadScreen@k 0071  
            showLoadScreen@s 0067               _showLoadScreen 0AFE            __size_of_delay_ms 002C  
                ??i2_I2CSend 0002                  ??i2_I2CWait 0001                  ??i2_I2CStop 0001  
                bin2bcd@temp 0003               _ds1307_setData 114C                  sprintf@flag 0060  
                _clearBuffer 1886                  sprintf@prec 0065                  ??i2_LCD_Cmd 0003  
           ___lwdiv@dividend 001B                    __pintcode 0008                     ?_bcd2bin 0001  
                i2LCD_Port@a 0002                     ?___awdiv 001B                     ?___awmod 001B  
                   ?___lldiv 001B                     ?_bin2bcd 0001              ds1307_setData@j 0006  
                   ?___lwdiv 001B                     ?___lwmod 0022    __size_ofi2_LCD_Set_Cursor 0050  
                ??_UART_Init 0060                  ??_UART_Read 0001                  __smallconst 0800  
     __end_of_ds1307_getData 168A                     _I2CStart 19EE       __end_of_showLoadScreen 0CF6  
           ___lwdiv@quotient 0020                     ?_sprintf 0027       __end_of_ds1307_setData 11F2  
                 UART_Init@x 002C          __end_ofi2_LCD_Clear 19D2                     _LCD_Init 13F6  
                   _LCD_Port 154A                    delay_ms@i 001E        clearBuffer@bufferSize 0003  
                   _PIE1bits 000F9D                     i2u211_40 15DA                     i2u210_48 15C4  
                   i2u213_40 15F4                     i2u212_48 15DC                     i2u215_40 1610  
                   i2u214_48 15F6                     i2u216_48 1612                     i2u209_40 15C2  
                   i2u255_40 149E                     i2u255_47 1494                     i2u271_47 186A  
                   i2u256_40 14D2                     i2u272_47 1812                     i2u256_47 14C8  
         i2delay_ms@duration 0001                     _PIR1bits 000F9E                     i2u273_47 1824  
                   i2u274_47 1928             __CFG_WDTPS$32768 000000                    _showClock 0890  
                   _UART_ISR 0008                 clearBuffer@i 0005            UART_Init@baudrate 0028  
           __size_of_I2CInit 0010             __size_of_I2CRead 000E             __size_of_I2CSend 0010  
           __size_of_I2CWait 0012             __size_of_I2CStop 0008              ?_ds1307_getData 001E  
           __size_of_LCD_Cmd 0020              ?_showLoadScreen 0001    __size_ofi2_LCD_Write_Char 0038  
            ?_ds1307_setData 0004                   _I2CRestart 19F6     __end_of_LCD_Write_String 13F6  
          clearBuffer@buffer 0001                     __Hrparam 0000                     __Lrparam 0000  
                 ?_showClock 0026             __size_of_bcd2bin 0022          ds1307_setData@iData 0004  
           __size_of___awdiv 0084             __size_of___awmod 0070             __size_of___lldiv 0082  
           __size_of_bin2bcd 0022             __size_of___lwdiv 0052             __size_of___lwmod 0042  
                 sprintf@val 0063                     _delay_ms 182E              ___lwdiv@divisor 001D  
            ___lwdiv@counter 001F                  i2_LCD_Clear 19C4                     __ptext10 17BE  
                   __ptext11 16DC                     __ptext20 1954                     __ptext12 19A8  
                   __ptext21 19D2                     __ptext13 1622                     __ptext30 185A  
                   __ptext22 19DC                     __ptext14 18B2                     __ptext31 1468  
                   __ptext23 0EC0                     __ptext15 19E6                     __ptext40 1998  
                   __ptext32 17F6                     __ptext24 1302                     __ptext16 19EE  
                   __ptext41 1966                     __ptext33 172C                     __ptext25 13F6  
                   __ptext17 1978                     __ptext42 18D4                     __ptext34 19C4  
                   __ptext26 18F6                     __ptext18 19F6                     __ptext43 1886  
                   __ptext35 1916                     __ptext27 154A                     __ptext19 19B6  
                   __ptext44 1A0E                     __ptext36 15B6                     __ptext28 1988  
                   __ptext37 114C                     __ptext38 19FE                     __ptext39 1A06  
      i2LCD_Write_String@str 0006      __size_of_LCD_Set_Cursor 0050             __size_of_sprintf 0144  
              __size_of_main 008C                     int$flags 0040             i2_LCD_Set_Cursor 172C  
      __CFG_CPUDIV$OSC1_PLL2 000000                   _INTCONbits 000FF2                   i2_I2CStart 1A06  
         i2_LCD_Write_String 1468           LCD_Write_Char@temp 001D                  ?_I2CRestart 0001  
                   intlevel2 0000                    sprintf@ap 0061          ?i2_LCD_Write_String 0006  
                  sprintf@sp 0027            i2LCD_Set_Cursor@t 0008            i2LCD_Set_Cursor@x 0005  
          i2LCD_Set_Cursor@y 0006            i2LCD_Set_Cursor@z 0007                 ?_clearBuffer 0001  
           ___lwmod@dividend 0022             ___lldiv@dividend 001B                   i2_LCD_Port 15B6  
    __size_of_LCD_Write_Char 0038                  ??_showClock 0028           LCD_Set_Cursor@temp 0023  
       ??i2_LCD_Write_String 0008                     sprintf@c 0066                     sprintf@f 0029  
           ___lldiv@quotient 0023              ___lwmod@divisor 0024              ___lwmod@counter 0026  
           i2_LCD_Write_Char 17F6                 main@RTC_data 0075  
